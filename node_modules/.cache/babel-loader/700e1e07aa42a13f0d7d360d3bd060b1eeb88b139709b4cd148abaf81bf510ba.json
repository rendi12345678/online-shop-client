{"ast":null,"code":"/* eslint-disable no-redeclare */\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  NEXT_REQUEST_META: null,\n  getRequestMeta: null,\n  setRequestMeta: null,\n  addRequestMeta: null,\n  removeRequestMeta: null,\n  getNextInternalQuery: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  NEXT_REQUEST_META: function () {\n    return NEXT_REQUEST_META;\n  },\n  getRequestMeta: function () {\n    return getRequestMeta;\n  },\n  setRequestMeta: function () {\n    return setRequestMeta;\n  },\n  addRequestMeta: function () {\n    return addRequestMeta;\n  },\n  removeRequestMeta: function () {\n    return removeRequestMeta;\n  },\n  getNextInternalQuery: function () {\n    return getNextInternalQuery;\n  }\n});\nconst NEXT_REQUEST_META = Symbol.for(\"NextInternalRequestMeta\");\nfunction getRequestMeta(req, key) {\n  const meta = req[NEXT_REQUEST_META] || {};\n  return typeof key === \"string\" ? meta[key] : meta;\n}\nfunction setRequestMeta(req, meta) {\n  req[NEXT_REQUEST_META] = meta;\n  return meta;\n}\nfunction addRequestMeta(request, key, value) {\n  const meta = getRequestMeta(request);\n  meta[key] = value;\n  return setRequestMeta(request, meta);\n}\nfunction removeRequestMeta(request, key) {\n  const meta = getRequestMeta(request);\n  delete meta[key];\n  return setRequestMeta(request, meta);\n}\nfunction getNextInternalQuery(query) {\n  const keysToInclude = [\"__nextDefaultLocale\", \"__nextFallback\", \"__nextLocale\", \"__nextSsgPath\", \"_nextBubbleNoFallback\", \"__nextDataReq\", \"__nextInferredLocaleFromDefault\"];\n  const nextInternalQuery = {};\n  for (const key of keysToInclude) {\n    if (key in query) {\n      // @ts-ignore this can't be typed correctly\n      nextInternalQuery[key] = query[key];\n    }\n  }\n  return nextInternalQuery;\n}","map":{"version":3,"names":["NEXT_REQUEST_META","getRequestMeta","setRequestMeta","addRequestMeta","removeRequestMeta","getNextInternalQuery","Symbol","for","req","key","meta","request","value","query","keysToInclude","nextInternalQuery"],"sources":["../../src/server/request-meta.ts"],"sourcesContent":[null],"mappings":"AAAA,iCAA+B;;;;;;;;;;;;;;;;;;;;EAUlBA,iBAAiB,WAAAA,CAAA;WAAjBA,iBAAA;;EA2FGC,cAAc,WAAAA,CAAA;WAAdA,cAAA;;EAeAC,cAAc,WAAAA,CAAA;WAAdA,cAAA;;EAaAC,cAAc,WAAAA,CAAA;WAAdA,cAAA;;EAiBAC,iBAAiB,WAAAA,CAAA;WAAjBA,iBAAA;;EA8CAC,oBAAoB,WAAAA,CAAA;WAApBA,oBAAA;;;AAtLT,MAAML,iBAAA,GAAoBM,MAAA,CAAOC,GAAG,CAAC;AA2FrC,SAASN,eACdO,GAAwB,EACxBC,GAAO;EAEP,MAAMC,IAAA,GAAOF,GAAG,CAACR,iBAAA,CAAkB,IAAI,CAAC;EACxC,OAAO,OAAOS,GAAA,KAAQ,WAAWC,IAAI,CAACD,GAAA,CAAI,GAAGC,IAAA;AAC/C;AASO,SAASR,eAAeM,GAAwB,EAAEE,IAAiB;EACxEF,GAAG,CAACR,iBAAA,CAAkB,GAAGU,IAAA;EACzB,OAAOA,IAAA;AACT;AAUO,SAASP,eACdQ,OAA4B,EAC5BF,GAAM,EACNG,KAAqB;EAErB,MAAMF,IAAA,GAAOT,cAAA,CAAeU,OAAA;EAC5BD,IAAI,CAACD,GAAA,CAAI,GAAGG,KAAA;EACZ,OAAOV,cAAA,CAAeS,OAAA,EAASD,IAAA;AACjC;AASO,SAASN,kBACdO,OAA4B,EAC5BF,GAAM;EAEN,MAAMC,IAAA,GAAOT,cAAA,CAAeU,OAAA;EAC5B,OAAOD,IAAI,CAACD,GAAA,CAAI;EAChB,OAAOP,cAAA,CAAeS,OAAA,EAASD,IAAA;AACjC;AAuCO,SAASL,qBACdQ,KAAyB;EAEzB,MAAMC,aAAA,GAA6C,CACjD,uBACA,kBACA,gBACA,iBACA,yBACA,iBACA,kCACD;EACD,MAAMC,iBAAA,GAAuC,CAAC;EAE9C,KAAK,MAAMN,GAAA,IAAOK,aAAA,EAAe;IAC/B,IAAIL,GAAA,IAAOI,KAAA,EAAO;MAChB;MACAE,iBAAiB,CAACN,GAAA,CAAI,GAAGI,KAAK,CAACJ,GAAA,CAAI;IACrC;EACF;EAEA,OAAOM,iBAAA;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}