{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  matchHas: null,\n  compileNonPath: null,\n  prepareDestination: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  matchHas: function () {\n    return matchHas;\n  },\n  compileNonPath: function () {\n    return compileNonPath;\n  },\n  prepareDestination: function () {\n    return prepareDestination;\n  }\n});\nconst _pathtoregexp = require(\"next/dist/compiled/path-to-regexp\");\nconst _escaperegexp = require(\"../../escape-regexp\");\nconst _parseurl = require(\"./parse-url\");\nconst _interceptionroutes = require(\"../../../../server/future/helpers/interception-routes\");\nconst _approuterheaders = require(\"../../../../client/components/app-router-headers\");\nconst _getcookieparser = require(\"../../../../server/api-utils/get-cookie-parser\");\n/**\n * Ensure only a-zA-Z are used for param names for proper interpolating\n * with path-to-regexp\n */\nfunction getSafeParamName(paramName) {\n  let newParamName = \"\";\n  for (let i = 0; i < paramName.length; i++) {\n    const charCode = paramName.charCodeAt(i);\n    if (charCode > 64 && charCode < 91 ||\n    // A-Z\n    charCode > 96 && charCode < 123 // a-z\n    ) {\n      newParamName += paramName[i];\n    }\n  }\n  return newParamName;\n}\nfunction escapeSegment(str, segmentName) {\n  return str.replace(new RegExp(\":\" + (0, _escaperegexp.escapeStringRegexp)(segmentName), \"g\"), \"__ESC_COLON_\" + segmentName);\n}\nfunction unescapeSegments(str) {\n  return str.replace(/__ESC_COLON_/gi, \":\");\n}\nfunction matchHas(req, query, has, missing) {\n  if (has === void 0) has = [];\n  if (missing === void 0) missing = [];\n  const params = {};\n  const hasMatch = hasItem => {\n    let value;\n    let key = hasItem.key;\n    switch (hasItem.type) {\n      case \"header\":\n        {\n          key = key.toLowerCase();\n          value = req.headers[key];\n          break;\n        }\n      case \"cookie\":\n        {\n          if (\"cookies\" in req) {\n            value = req.cookies[hasItem.key];\n          } else {\n            const cookies = (0, _getcookieparser.getCookieParser)(req.headers)();\n            value = cookies[hasItem.key];\n          }\n          break;\n        }\n      case \"query\":\n        {\n          value = query[key];\n          break;\n        }\n      case \"host\":\n        {\n          const {\n            host\n          } = (req == null ? void 0 : req.headers) || {};\n          // remove port from host if present\n          const hostname = host == null ? void 0 : host.split(\":\", 1)[0].toLowerCase();\n          value = hostname;\n          break;\n        }\n      default:\n        {\n          break;\n        }\n    }\n    if (!hasItem.value && value) {\n      params[getSafeParamName(key)] = value;\n      return true;\n    } else if (value) {\n      const matcher = new RegExp(\"^\" + hasItem.value + \"$\");\n      const matches = Array.isArray(value) ? value.slice(-1)[0].match(matcher) : value.match(matcher);\n      if (matches) {\n        if (Array.isArray(matches)) {\n          if (matches.groups) {\n            Object.keys(matches.groups).forEach(groupKey => {\n              params[groupKey] = matches.groups[groupKey];\n            });\n          } else if (hasItem.type === \"host\" && matches[0]) {\n            params.host = matches[0];\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  const allMatch = has.every(item => hasMatch(item)) && !missing.some(item => hasMatch(item));\n  if (allMatch) {\n    return params;\n  }\n  return false;\n}\nfunction compileNonPath(value, params) {\n  if (!value.includes(\":\")) {\n    return value;\n  }\n  for (const key of Object.keys(params)) {\n    if (value.includes(\":\" + key)) {\n      value = value.replace(new RegExp(\":\" + key + \"\\\\*\", \"g\"), \":\" + key + \"--ESCAPED_PARAM_ASTERISKS\").replace(new RegExp(\":\" + key + \"\\\\?\", \"g\"), \":\" + key + \"--ESCAPED_PARAM_QUESTION\").replace(new RegExp(\":\" + key + \"\\\\+\", \"g\"), \":\" + key + \"--ESCAPED_PARAM_PLUS\").replace(new RegExp(\":\" + key + \"(?!\\\\w)\", \"g\"), \"--ESCAPED_PARAM_COLON\" + key);\n    }\n  }\n  value = value.replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, \"\\\\$1\").replace(/--ESCAPED_PARAM_PLUS/g, \"+\").replace(/--ESCAPED_PARAM_COLON/g, \":\").replace(/--ESCAPED_PARAM_QUESTION/g, \"?\").replace(/--ESCAPED_PARAM_ASTERISKS/g, \"*\");\n  // the value needs to start with a forward-slash to be compiled\n  // correctly\n  return (0, _pathtoregexp.compile)(\"/\" + value, {\n    validate: false\n  })(params).slice(1);\n}\nfunction prepareDestination(args) {\n  const query = Object.assign({}, args.query);\n  delete query.__nextLocale;\n  delete query.__nextDefaultLocale;\n  delete query.__nextDataReq;\n  delete query.__nextInferredLocaleFromDefault;\n  delete query[_approuterheaders.NEXT_RSC_UNION_QUERY];\n  let escapedDestination = args.destination;\n  for (const param of Object.keys({\n    ...args.params,\n    ...query\n  })) {\n    escapedDestination = escapeSegment(escapedDestination, param);\n  }\n  const parsedDestination = (0, _parseurl.parseUrl)(escapedDestination);\n  const destQuery = parsedDestination.query;\n  const destPath = unescapeSegments(\"\" + parsedDestination.pathname + (parsedDestination.hash || \"\"));\n  const destHostname = unescapeSegments(parsedDestination.hostname || \"\");\n  const destPathParamKeys = [];\n  const destHostnameParamKeys = [];\n  (0, _pathtoregexp.pathToRegexp)(destPath, destPathParamKeys);\n  (0, _pathtoregexp.pathToRegexp)(destHostname, destHostnameParamKeys);\n  const destParams = [];\n  destPathParamKeys.forEach(key => destParams.push(key.name));\n  destHostnameParamKeys.forEach(key => destParams.push(key.name));\n  const destPathCompiler = (0, _pathtoregexp.compile)(destPath,\n  // we don't validate while compiling the destination since we should\n  // have already validated before we got to this point and validating\n  // breaks compiling destinations with named pattern params from the source\n  // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n  // since compile validation is meant for reversing and not for inserting\n  // params from a separate path-regex into another\n  {\n    validate: false\n  });\n  const destHostnameCompiler = (0, _pathtoregexp.compile)(destHostname, {\n    validate: false\n  });\n  // update any params in query values\n  for (const [key, strOrArray] of Object.entries(destQuery)) {\n    // the value needs to start with a forward-slash to be compiled\n    // correctly\n    if (Array.isArray(strOrArray)) {\n      destQuery[key] = strOrArray.map(value => compileNonPath(unescapeSegments(value), args.params));\n    } else if (typeof strOrArray === \"string\") {\n      destQuery[key] = compileNonPath(unescapeSegments(strOrArray), args.params);\n    }\n  }\n  // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n  let paramKeys = Object.keys(args.params).filter(name => name !== \"nextInternalLocale\");\n  if (args.appendParamsToQuery && !paramKeys.some(key => destParams.includes(key))) {\n    for (const key of paramKeys) {\n      if (!(key in destQuery)) {\n        destQuery[key] = args.params[key];\n      }\n    }\n  }\n  let newUrl;\n  // The compiler also that the interception route marker is an unnamed param, hence '0',\n  // so we need to add it to the params object.\n  if ((0, _interceptionroutes.isInterceptionRouteAppPath)(destPath)) {\n    for (const segment of destPath.split(\"/\")) {\n      const marker = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find(m => segment.startsWith(m));\n      if (marker) {\n        args.params[\"0\"] = marker;\n        break;\n      }\n    }\n  }\n  try {\n    newUrl = destPathCompiler(args.params);\n    const [pathname, hash] = newUrl.split(\"#\", 2);\n    parsedDestination.hostname = destHostnameCompiler(args.params);\n    parsedDestination.pathname = pathname;\n    parsedDestination.hash = \"\" + (hash ? \"#\" : \"\") + (hash || \"\");\n    delete parsedDestination.search;\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(\"To use a multi-match in the destination you must add `*` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match\");\n    }\n    throw err;\n  }\n  // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n  parsedDestination.query = {\n    ...query,\n    ...parsedDestination.query\n  };\n  return {\n    newUrl,\n    destQuery,\n    parsedDestination\n  };\n}","map":{"version":3,"names":["matchHas","compileNonPath","prepareDestination","getSafeParamName","paramName","newParamName","i","length","charCode","charCodeAt","escapeSegment","str","segmentName","replace","RegExp","_escaperegexp","escapeStringRegexp","unescapeSegments","req","query","has","missing","params","hasMatch","hasItem","value","key","type","toLowerCase","headers","cookies","_getcookieparser","getCookieParser","host","hostname","split","matcher","matches","Array","isArray","slice","match","groups","Object","keys","forEach","groupKey","allMatch","every","item","some","includes","_pathtoregexp","compile","validate","args","assign","__nextLocale","__nextDefaultLocale","__nextDataReq","__nextInferredLocaleFromDefault","_approuterheaders","NEXT_RSC_UNION_QUERY","escapedDestination","destination","param","parsedDestination","_parseurl","parseUrl","destQuery","destPath","pathname","hash","destHostname","destPathParamKeys","destHostnameParamKeys","pathToRegexp","destParams","push","name","destPathCompiler","destHostnameCompiler","strOrArray","entries","map","paramKeys","filter","appendParamsToQuery","newUrl","_interceptionroutes","isInterceptionRouteAppPath","segment","marker","INTERCEPTION_ROUTE_MARKERS","find","m","startsWith","search","err","message","Error"],"sources":["../../../../../src/shared/lib/router/utils/prepare-destination.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}