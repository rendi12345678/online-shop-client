{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"_postPayload\", {\n  enumerable: true,\n  get: function () {\n    return _postPayload;\n  }\n});\nconst _asyncretry = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/async-retry\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _postPayload(endpoint, body, signal) {\n  if (!signal && \"timeout\" in AbortSignal) {\n    signal = AbortSignal.timeout(5000);\n  }\n  return (0, _asyncretry.default)(() => fetch(endpoint, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    signal\n  }).then(res => {\n    if (!res.ok) {\n      const err = new Error(res.statusText);\n      err.response = res;\n      throw err;\n    }\n  }), {\n    minTimeout: 500,\n    retries: 1,\n    factor: 1\n  }).catch(() => {\n    // We swallow errors when telemetry cannot be sent\n  }) // Ensure promise is voided\n  .then(() => {}, () => {});\n}","map":{"version":3,"names":["_postPayload","endpoint","body","signal","AbortSignal","timeout","_asyncretry","default","fetch","method","JSON","stringify","headers","then","res","ok","err","Error","statusText","response","minTimeout","retries","factor","catch"],"sources":["../../src/telemetry/post-payload.ts"],"sourcesContent":[null],"mappings":";;;;;+BAEgB;;;WAAAA,YAAA;;;kEAFE;;;;;;AAEX,SAASA,aAAaC,QAAgB,EAAEC,IAAY,EAAEC,MAAY;EACvE,IAAI,CAACA,MAAA,IAAU,aAAaC,WAAA,EAAa;IACvCD,MAAA,GAASC,WAAA,CAAYC,OAAO,CAAC;EAC/B;EACA,OACE,IAAAC,WAAA,CAAAC,OAAK,EACH,MACEC,KAAA,CAAMP,QAAA,EAAU;IACdQ,MAAA,EAAQ;IACRP,IAAA,EAAMQ,IAAA,CAAKC,SAAS,CAACT,IAAA;IACrBU,OAAA,EAAS;MAAE,gBAAgB;IAAmB;IAC9CT;EACF,GAAGU,IAAI,CAAEC,GAAA;IACP,IAAI,CAACA,GAAA,CAAIC,EAAE,EAAE;MACX,MAAMC,GAAA,GAAM,IAAIC,KAAA,CAAMH,GAAA,CAAII,UAAU;MAClCF,GAAA,CAAYG,QAAQ,GAAGL,GAAA;MACzB,MAAME,GAAA;IACR;EACF,IACF;IAAEI,UAAA,EAAY;IAAKC,OAAA,EAAS;IAAGC,MAAA,EAAQ;EAAE,GAExCC,KAAK,CAAC;IACL;EAAA,CACF,CACA;EAAA,CACCV,IAAI,CACH,OAAO,GACP,OAAO;AAGf"},"metadata":{},"sourceType":"script","externalDependencies":[]}