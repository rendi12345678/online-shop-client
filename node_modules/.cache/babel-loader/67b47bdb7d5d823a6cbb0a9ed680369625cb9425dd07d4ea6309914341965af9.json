{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\nconst _constant = require(\"../constant\");\nconst _utils = require(\"../utils\");\nconst TYPE_ANOTATION = \": Metadata\";\nconst TYPE_ANOTATION_ASYNC = \": Promise<Metadata>\";\nconst TYPE_IMPORT = `\\n\\nimport type { Metadata } from 'next'`;\n// Find the `export const metadata = ...` node.\nfunction getMetadataExport(fileName, position) {\n  const source = (0, _utils.getSource)(fileName);\n  let metadataExport;\n  if (source) {\n    const ts = (0, _utils.getTs)();\n    ts.forEachChild(source, function visit(node) {\n      if (metadataExport) return;\n      // Covered by this node\n      if ((0, _utils.isPositionInsideNode)(position, node)) {\n        var _node_modifiers;\n        // Export variable\n        if (ts.isVariableStatement(node) && ((_node_modifiers = node.modifiers) == null ? void 0 : _node_modifiers.some(m => m.kind === ts.SyntaxKind.ExportKeyword))) {\n          if (ts.isVariableDeclarationList(node.declarationList)) {\n            for (const declaration of node.declarationList.declarations) {\n              if ((0, _utils.isPositionInsideNode)(position, declaration) && declaration.name.getText() === \"metadata\") {\n                // `export const metadata = ...`\n                metadataExport = declaration;\n                return;\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  return metadataExport;\n}\nlet cachedProxiedLanguageService;\nlet cachedProxiedLanguageServiceHost;\nfunction getProxiedLanguageService() {\n  if (cachedProxiedLanguageService) return {\n    languageService: cachedProxiedLanguageService,\n    languageServiceHost: cachedProxiedLanguageServiceHost\n  };\n  const languageServiceHost = (0, _utils.getInfo)().languageServiceHost;\n  const ts = (0, _utils.getTs)();\n  class ProxiedLanguageServiceHost {\n    getScriptFileNames() {\n      const names = new Set();\n      for (var name in this.files) {\n        if (this.files.hasOwnProperty(name)) {\n          names.add(name);\n        }\n      }\n      const files = languageServiceHost.getScriptFileNames();\n      for (const file of files) {\n        names.add(file);\n      }\n      return [...names];\n    }\n    addFile(fileName, body) {\n      const snap = ts.ScriptSnapshot.fromString(body);\n      snap.getChangeRange = _ => undefined;\n      const existing = this.files[fileName];\n      if (existing) {\n        this.files[fileName].ver++;\n        this.files[fileName].file = snap;\n      } else {\n        this.files[fileName] = {\n          ver: 1,\n          file: snap\n        };\n      }\n    }\n    readFile(fileName) {\n      const file = this.files[fileName];\n      return file ? file.file.getText(0, file.file.getLength()) : languageServiceHost.readFile(fileName);\n    }\n    fileExists(fileName) {\n      return this.files[fileName] !== undefined || languageServiceHost.fileExists(fileName);\n    }\n    constructor() {\n      this.files = {};\n      this.log = () => {};\n      this.trace = () => {};\n      this.error = () => {};\n      this.getCompilationSettings = () => languageServiceHost.getCompilationSettings();\n      this.getScriptIsOpen = () => true;\n      this.getCurrentDirectory = () => languageServiceHost.getCurrentDirectory();\n      this.getDefaultLibFileName = o => languageServiceHost.getDefaultLibFileName(o);\n      this.getScriptVersion = fileName => {\n        const file = this.files[fileName];\n        if (!file) return languageServiceHost.getScriptVersion(fileName);\n        return file.ver.toString();\n      };\n      this.getScriptSnapshot = fileName => {\n        const file = this.files[fileName];\n        if (!file) return languageServiceHost.getScriptSnapshot(fileName);\n        return file.file;\n      };\n    }\n  }\n  cachedProxiedLanguageServiceHost = new ProxiedLanguageServiceHost();\n  cachedProxiedLanguageService = ts.createLanguageService(cachedProxiedLanguageServiceHost, ts.createDocumentRegistry());\n  return {\n    languageService: cachedProxiedLanguageService,\n    languageServiceHost: cachedProxiedLanguageServiceHost\n  };\n}\nfunction updateVirtualFileWithType(fileName, node, isGenerateMetadata) {\n  const source = (0, _utils.getSource)(fileName);\n  if (!source) return;\n  // We annotate with the type in a vritual language service\n  const sourceText = source.getFullText();\n  let nodeEnd;\n  let annotation;\n  const ts = (0, _utils.getTs)();\n  if (ts.isFunctionDeclaration(node)) {\n    if (isGenerateMetadata) {\n      var _node_modifiers;\n      nodeEnd = node.body.getFullStart();\n      const isAsync = (_node_modifiers = node.modifiers) == null ? void 0 : _node_modifiers.some(m => m.kind === ts.SyntaxKind.AsyncKeyword);\n      annotation = isAsync ? TYPE_ANOTATION_ASYNC : TYPE_ANOTATION;\n    } else {\n      return;\n    }\n  } else {\n    nodeEnd = node.name.getFullStart() + node.name.getFullWidth();\n    annotation = TYPE_ANOTATION;\n  }\n  const newSource = sourceText.slice(0, nodeEnd) + annotation + sourceText.slice(nodeEnd) + TYPE_IMPORT;\n  const {\n    languageServiceHost\n  } = getProxiedLanguageService();\n  languageServiceHost.addFile(fileName, newSource);\n  return [nodeEnd, annotation.length];\n}\nfunction isTyped(node) {\n  return node.type !== undefined;\n}\nfunction proxyDiagnostics(fileName, pos, n) {\n  // Get diagnostics\n  const {\n    languageService\n  } = getProxiedLanguageService();\n  const diagnostics = languageService.getSemanticDiagnostics(fileName);\n  const source = (0, _utils.getSource)(fileName);\n  // Filter and map the results\n  return diagnostics.filter(d => {\n    if (d.start === undefined || d.length === undefined) return false;\n    if (d.start < n.getFullStart()) return false;\n    if (d.start + d.length >= n.getFullStart() + n.getFullWidth() + pos[1]) return false;\n    return true;\n  }).map(d => {\n    return {\n      file: source,\n      category: d.category,\n      code: d.code,\n      messageText: d.messageText,\n      start: d.start < pos[0] ? d.start : d.start - pos[1],\n      length: d.length\n    };\n  });\n}\nconst metadata = {\n  filterCompletionsAtPosition(fileName, position, _options, prior) {\n    const node = getMetadataExport(fileName, position);\n    if (!node) return prior;\n    if (isTyped(node)) return prior;\n    const ts = (0, _utils.getTs)();\n    // We annotate with the type in a vritual language service\n    const pos = updateVirtualFileWithType(fileName, node);\n    if (pos === undefined) return prior;\n    // Get completions\n    const {\n      languageService\n    } = getProxiedLanguageService();\n    const newPos = position <= pos[0] ? position : position + pos[1];\n    const completions = languageService.getCompletionsAtPosition(fileName, newPos, undefined);\n    if (completions) {\n      completions.isIncomplete = true;\n      completions.entries = completions.entries.filter(e => {\n        return [ts.ScriptElementKind.memberVariableElement, ts.ScriptElementKind.typeElement, ts.ScriptElementKind.string].includes(e.kind);\n      }).map(e => {\n        const insertText = e.kind === ts.ScriptElementKind.memberVariableElement && /^[a-zA-Z0-9_]+$/.test(e.name) ? e.name + \": \" : e.name;\n        return {\n          name: e.name,\n          insertText,\n          kind: e.kind,\n          kindModifiers: e.kindModifiers,\n          sortText: \"!\" + e.name,\n          labelDetails: {\n            description: `Next.js metadata`\n          },\n          data: e.data\n        };\n      });\n      return completions;\n    }\n    return prior;\n  },\n  getSemanticDiagnosticsForExportVariableStatementInClientEntry(fileName, node) {\n    const source = (0, _utils.getSource)(fileName);\n    const ts = (0, _utils.getTs)();\n    // It is not allowed to export `metadata` or `generateMetadata` in client entry\n    if (ts.isFunctionDeclaration(node)) {\n      var _node_name;\n      if (((_node_name = node.name) == null ? void 0 : _node_name.getText()) === \"generateMetadata\") {\n        return [{\n          file: source,\n          category: ts.DiagnosticCategory.Error,\n          code: _constant.NEXT_TS_ERRORS.INVALID_METADATA_EXPORT,\n          messageText: `The Next.js 'generateMetadata' API is not allowed in a client component.`,\n          start: node.name.getStart(),\n          length: node.name.getWidth()\n        }];\n      }\n    } else {\n      for (const declaration of node.declarationList.declarations) {\n        const name = declaration.name.getText();\n        if (name === \"metadata\") {\n          return [{\n            file: source,\n            category: ts.DiagnosticCategory.Error,\n            code: _constant.NEXT_TS_ERRORS.INVALID_METADATA_EXPORT,\n            messageText: `The Next.js 'metadata' API is not allowed in a client component.`,\n            start: declaration.name.getStart(),\n            length: declaration.name.getWidth()\n          }];\n        }\n      }\n    }\n    return [];\n  },\n  getSemanticDiagnosticsForExportVariableStatement(fileName, node) {\n    const ts = (0, _utils.getTs)();\n    if (ts.isFunctionDeclaration(node)) {\n      var _node_name;\n      if (((_node_name = node.name) == null ? void 0 : _node_name.getText()) === \"generateMetadata\") {\n        if (isTyped(node)) return [];\n        // We annotate with the type in a vritual language service\n        const pos = updateVirtualFileWithType(fileName, node, true);\n        if (!pos) return [];\n        return proxyDiagnostics(fileName, pos, node);\n      }\n    } else {\n      for (const declaration of node.declarationList.declarations) {\n        if (declaration.name.getText() === \"metadata\") {\n          if (isTyped(declaration)) break;\n          // We annotate with the type in a vritual language service\n          const pos = updateVirtualFileWithType(fileName, declaration);\n          if (!pos) break;\n          return proxyDiagnostics(fileName, pos, declaration);\n        }\n      }\n    }\n    return [];\n  },\n  getSemanticDiagnosticsForExportDeclarationInClientEntry(fileName, node) {\n    const ts = (0, _utils.getTs)();\n    const source = (0, _utils.getSource)(fileName);\n    const diagnostics = [];\n    const exportClause = node.exportClause;\n    if (exportClause && ts.isNamedExports(exportClause)) {\n      for (const e of exportClause.elements) {\n        if ([\"generateMetadata\", \"metadata\"].includes(e.name.getText())) {\n          diagnostics.push({\n            file: source,\n            category: ts.DiagnosticCategory.Error,\n            code: _constant.NEXT_TS_ERRORS.INVALID_METADATA_EXPORT,\n            messageText: `The Next.js '${e.name.getText()}' API is not allowed in a client component.`,\n            start: e.name.getStart(),\n            length: e.name.getWidth()\n          });\n        }\n      }\n    }\n    return diagnostics;\n  },\n  getSemanticDiagnosticsForExportDeclaration(fileName, node) {\n    const ts = (0, _utils.getTs)();\n    const exportClause = node.exportClause;\n    if (exportClause && ts.isNamedExports(exportClause)) {\n      for (const e of exportClause.elements) {\n        if (e.name.getText() === \"metadata\") {\n          // Get the original declaration node of element\n          const typeChecker = (0, _utils.getTypeChecker)();\n          if (typeChecker) {\n            const symbol = typeChecker.getSymbolAtLocation(e.name);\n            if (symbol) {\n              const metadataSymbol = typeChecker.getAliasedSymbol(symbol);\n              if (metadataSymbol && metadataSymbol.declarations) {\n                const declaration = metadataSymbol.declarations[0];\n                if (declaration && ts.isVariableDeclaration(declaration)) {\n                  if (isTyped(declaration)) break;\n                  const declarationFileName = declaration.getSourceFile().fileName;\n                  const isSameFile = declarationFileName === fileName;\n                  // We annotate with the type in a vritual language service\n                  const pos = updateVirtualFileWithType(declarationFileName, declaration);\n                  if (!pos) break;\n                  const diagnostics = proxyDiagnostics(declarationFileName, pos, declaration);\n                  if (diagnostics.length) {\n                    if (isSameFile) {\n                      return diagnostics;\n                    } else {\n                      return [{\n                        file: (0, _utils.getSource)(fileName),\n                        category: ts.DiagnosticCategory.Error,\n                        code: _constant.NEXT_TS_ERRORS.INVALID_METADATA_EXPORT,\n                        messageText: `The 'metadata' export value is not typed correctly, please make sure it is typed as 'Metadata':\\nhttps://nextjs.org/docs/app/building-your-application/optimizing/metadata#static-metadata`,\n                        start: e.name.getStart(),\n                        length: e.name.getWidth()\n                      }];\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return [];\n  },\n  getCompletionEntryDetails(fileName, position, entryName, formatOptions, source, preferences, data) {\n    const node = getMetadataExport(fileName, position);\n    if (!node) return;\n    if (isTyped(node)) return;\n    // We annotate with the type in a vritual language service\n    const pos = updateVirtualFileWithType(fileName, node);\n    if (pos === undefined) return;\n    const {\n      languageService\n    } = getProxiedLanguageService();\n    const newPos = position <= pos[0] ? position : position + pos[1];\n    const details = languageService.getCompletionEntryDetails(fileName, newPos, entryName, formatOptions, source, preferences, data);\n    return details;\n  },\n  getQuickInfoAtPosition(fileName, position) {\n    const node = getMetadataExport(fileName, position);\n    if (!node) return;\n    if (isTyped(node)) return;\n    // We annotate with the type in a vritual language service\n    const pos = updateVirtualFileWithType(fileName, node);\n    if (pos === undefined) return;\n    const {\n      languageService\n    } = getProxiedLanguageService();\n    const newPos = position <= pos[0] ? position : position + pos[1];\n    const insight = languageService.getQuickInfoAtPosition(fileName, newPos);\n    return insight;\n  },\n  getDefinitionAndBoundSpan(fileName, position) {\n    const node = getMetadataExport(fileName, position);\n    if (!node) return;\n    if (isTyped(node)) return;\n    if (!(0, _utils.isPositionInsideNode)(position, node)) return;\n    // We annotate with the type in a vritual language service\n    const pos = updateVirtualFileWithType(fileName, node);\n    if (pos === undefined) return;\n    const {\n      languageService\n    } = getProxiedLanguageService();\n    const newPos = position <= pos[0] ? position : position + pos[1];\n    const definitionInfoAndBoundSpan = languageService.getDefinitionAndBoundSpan(fileName, newPos);\n    if (definitionInfoAndBoundSpan) {\n      // Adjust the start position of the text span\n      if (definitionInfoAndBoundSpan.textSpan.start > pos[0]) {\n        definitionInfoAndBoundSpan.textSpan.start -= pos[1];\n      }\n    }\n    return definitionInfoAndBoundSpan;\n  }\n};\nconst _default = metadata;","map":{"version":3,"names":["_default","TYPE_ANOTATION","TYPE_ANOTATION_ASYNC","TYPE_IMPORT","getMetadataExport","fileName","position","source","_utils","getSource","metadataExport","ts","getTs","forEachChild","visit","node","isPositionInsideNode","_node_modifiers","isVariableStatement","modifiers","some","m","kind","SyntaxKind","ExportKeyword","isVariableDeclarationList","declarationList","declaration","declarations","name","getText","cachedProxiedLanguageService","cachedProxiedLanguageServiceHost","getProxiedLanguageService","languageService","languageServiceHost","getInfo","ProxiedLanguageServiceHost","getScriptFileNames","names","Set","files","hasOwnProperty","add","file","addFile","body","snap","ScriptSnapshot","fromString","getChangeRange","_","undefined","existing","ver","readFile","getLength","fileExists","log","trace","error","getCompilationSettings","getScriptIsOpen","getCurrentDirectory","getDefaultLibFileName","o","getScriptVersion","toString","getScriptSnapshot","createLanguageService","createDocumentRegistry","updateVirtualFileWithType","isGenerateMetadata","sourceText","getFullText","nodeEnd","annotation","isFunctionDeclaration","getFullStart","isAsync","AsyncKeyword","getFullWidth","newSource","slice","length","isTyped","type","proxyDiagnostics","pos","n","diagnostics","getSemanticDiagnostics","filter","d","start","map","category","code","messageText","metadata","filterCompletionsAtPosition","_options","prior","newPos","completions","getCompletionsAtPosition","isIncomplete","entries","e","ScriptElementKind","memberVariableElement","typeElement","string","includes","insertText","test","kindModifiers","sortText","labelDetails","description","data","getSemanticDiagnosticsForExportVariableStatementInClientEntry","_node_name","DiagnosticCategory","Error","_constant","NEXT_TS_ERRORS","INVALID_METADATA_EXPORT","getStart","getWidth","getSemanticDiagnosticsForExportVariableStatement","getSemanticDiagnosticsForExportDeclarationInClientEntry","exportClause","isNamedExports","elements","push","getSemanticDiagnosticsForExportDeclaration","typeChecker","getTypeChecker","symbol","getSymbolAtLocation","metadataSymbol","getAliasedSymbol","isVariableDeclaration","declarationFileName","getSourceFile","isSameFile","getCompletionEntryDetails","entryName","formatOptions","preferences","details","getQuickInfoAtPosition","insight","getDefinitionAndBoundSpan","definitionInfoAndBoundSpan","textSpan"],"sources":["../../../../src/server/typescript/rules/metadata.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}