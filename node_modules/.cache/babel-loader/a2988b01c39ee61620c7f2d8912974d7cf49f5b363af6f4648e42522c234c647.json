{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  getRequestHandlers: null,\n  startServer: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  getRequestHandlers: function () {\n    return getRequestHandlers;\n  },\n  startServer: function () {\n    return startServer;\n  }\n});\nrequire(\"../next\");\nrequire(\"../require-hook\");\nconst _fs = /*#__PURE__*/_interop_require_default(require(\"fs\"));\nconst _v8 = /*#__PURE__*/_interop_require_default(require(\"v8\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _http = /*#__PURE__*/_interop_require_default(require(\"http\"));\nconst _https = /*#__PURE__*/_interop_require_default(require(\"https\"));\nconst _watchpack = /*#__PURE__*/_interop_require_default(require(\"watchpack\"));\nconst _log = /*#__PURE__*/_interop_require_wildcard(require(\"../../build/output/log\"));\nconst _debug = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/debug\"));\nconst _utils = require(\"./utils\");\nconst _formathostname = require(\"./format-hostname\");\nconst _routerserver = require(\"./router-server\");\nconst _constants = require(\"../../shared/lib/constants\");\nconst _appinfolog = require(\"./app-info-log\");\nconst _turbopackwarning = require(\"../../lib/turbopack-warning\");\nconst _ispostpone = require(\"./router-utils/is-postpone\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nif (performance.getEntriesByName(\"next-start\").length === 0) {\n  performance.mark(\"next-start\");\n}\nconst debug = (0, _debug.default)(\"next:start-server\");\nasync function getRequestHandlers({\n  dir,\n  port,\n  isDev,\n  server,\n  hostname,\n  minimalMode,\n  isNodeDebugging,\n  keepAliveTimeout,\n  experimentalTestProxy,\n  experimentalHttpsServer\n}) {\n  return (0, _routerserver.initialize)({\n    dir,\n    port,\n    hostname,\n    dev: isDev,\n    minimalMode,\n    server,\n    isNodeDebugging: isNodeDebugging || false,\n    keepAliveTimeout,\n    experimentalTestProxy,\n    experimentalHttpsServer\n  });\n}\nasync function startServer(serverOptions) {\n  const {\n    dir,\n    isDev,\n    hostname,\n    minimalMode,\n    allowRetry,\n    keepAliveTimeout,\n    isExperimentalTestProxy,\n    selfSignedCertificate\n  } = serverOptions;\n  let {\n    port\n  } = serverOptions;\n  process.title = \"next-server\";\n  let handlersReady = () => {};\n  let handlersError = () => {};\n  let handlersPromise = new Promise((resolve, reject) => {\n    handlersReady = resolve;\n    handlersError = reject;\n  });\n  let requestHandler = async (req, res) => {\n    if (handlersPromise) {\n      await handlersPromise;\n      return requestHandler(req, res);\n    }\n    throw new Error(\"Invariant request handler was not setup\");\n  };\n  let upgradeHandler = async (req, socket, head) => {\n    if (handlersPromise) {\n      await handlersPromise;\n      return upgradeHandler(req, socket, head);\n    }\n    throw new Error(\"Invariant upgrade handler was not setup\");\n  };\n  // setup server listener as fast as possible\n  if (selfSignedCertificate && !isDev) {\n    throw new Error(\"Using a self signed certificate is only supported with `next dev`.\");\n  }\n  async function requestListener(req, res) {\n    try {\n      if (handlersPromise) {\n        await handlersPromise;\n        handlersPromise = undefined;\n      }\n      await requestHandler(req, res);\n    } catch (err) {\n      res.statusCode = 500;\n      res.end(\"Internal Server Error\");\n      _log.error(`Failed to handle request for ${req.url}`);\n      console.error(err);\n    } finally {\n      if (isDev) {\n        if (_v8.default.getHeapStatistics().used_heap_size > 0.8 * _v8.default.getHeapStatistics().heap_size_limit) {\n          _log.warn(`Server is approaching the used memory threshold, restarting...`);\n          process.exit(_utils.RESTART_EXIT_CODE);\n        }\n      }\n    }\n  }\n  const server = selfSignedCertificate ? _https.default.createServer({\n    key: _fs.default.readFileSync(selfSignedCertificate.key),\n    cert: _fs.default.readFileSync(selfSignedCertificate.cert)\n  }, requestListener) : _http.default.createServer(requestListener);\n  if (keepAliveTimeout) {\n    server.keepAliveTimeout = keepAliveTimeout;\n  }\n  server.on(\"upgrade\", async (req, socket, head) => {\n    try {\n      await upgradeHandler(req, socket, head);\n    } catch (err) {\n      socket.destroy();\n      _log.error(`Failed to handle request for ${req.url}`);\n      console.error(err);\n    }\n  });\n  let portRetryCount = 0;\n  server.on(\"error\", err => {\n    if (allowRetry && port && isDev && err.code === \"EADDRINUSE\" && portRetryCount < 10) {\n      _log.warn(`Port ${port} is in use, trying ${port + 1} instead.`);\n      port += 1;\n      portRetryCount += 1;\n      server.listen(port, hostname);\n    } else {\n      _log.error(`Failed to start server`);\n      console.error(err);\n      process.exit(1);\n    }\n  });\n  const nodeDebugType = (0, _utils.checkNodeDebugType)();\n  await new Promise(resolve => {\n    server.on(\"listening\", async () => {\n      const addr = server.address();\n      const actualHostname = (0, _formathostname.formatHostname)(typeof addr === \"object\" ? (addr == null ? void 0 : addr.address) || hostname || \"localhost\" : addr);\n      const formattedHostname = !hostname || actualHostname === \"0.0.0.0\" ? \"localhost\" : actualHostname === \"[::]\" ? \"[::1]\" : (0, _formathostname.formatHostname)(hostname);\n      port = typeof addr === \"object\" ? (addr == null ? void 0 : addr.port) || port : port;\n      const networkUrl = hostname ? `http://${actualHostname}:${port}` : null;\n      const appUrl = `${selfSignedCertificate ? \"https\" : \"http\"}://${formattedHostname}:${port}`;\n      if (nodeDebugType) {\n        const debugPort = (0, _utils.getDebugPort)();\n        _log.info(`the --${nodeDebugType} option was detected, the Next.js router server should be inspected at port ${debugPort}.`);\n      }\n      // expose the main port to render workers\n      process.env.PORT = port + \"\";\n      // Only load env and config in dev to for logging purposes\n      let envInfo;\n      let expFeatureInfo;\n      if (isDev) {\n        const startServerInfo = await (0, _appinfolog.getStartServerInfo)(dir);\n        envInfo = startServerInfo.envInfo;\n        expFeatureInfo = startServerInfo.expFeatureInfo;\n      }\n      (0, _appinfolog.logStartInfo)({\n        networkUrl,\n        appUrl,\n        envInfo,\n        expFeatureInfo,\n        maxExperimentalFeatures: 3\n      });\n      try {\n        const cleanup = code => {\n          debug(\"start-server process cleanup\");\n          server.close();\n          process.exit(code ?? 0);\n        };\n        const exception = err => {\n          if ((0, _ispostpone.isPostpone)(err)) {\n            // React postpones that are unhandled might end up logged here but they're\n            // not really errors. They're just part of rendering.\n            return;\n          }\n          // This is the render worker, we keep the process alive\n          console.error(err);\n        };\n        process.on(\"exit\", code => cleanup(code));\n        // callback value is signal string, exit with 0\n        process.on(\"SIGINT\", () => cleanup(0));\n        process.on(\"SIGTERM\", () => cleanup(0));\n        process.on(\"rejectionHandled\", () => {\n          // It is ok to await a Promise late in Next.js as it allows for better\n          // prefetching patterns to avoid waterfalls. We ignore loggining these.\n          // We should've already errored in anyway unhandledRejection.\n        });\n        process.on(\"uncaughtException\", exception);\n        process.on(\"unhandledRejection\", exception);\n        const initResult = await getRequestHandlers({\n          dir,\n          port,\n          isDev,\n          server,\n          hostname,\n          minimalMode,\n          isNodeDebugging: Boolean(nodeDebugType),\n          keepAliveTimeout,\n          experimentalTestProxy: !!isExperimentalTestProxy,\n          experimentalHttpsServer: !!selfSignedCertificate\n        });\n        requestHandler = initResult[0];\n        upgradeHandler = initResult[1];\n        const startServerProcessDuration = performance.mark(\"next-start-end\") && performance.measure(\"next-start-duration\", \"next-start\", \"next-start-end\").duration;\n        handlersReady();\n        const formatDurationText = startServerProcessDuration > 2000 ? `${Math.round(startServerProcessDuration / 100) / 10}s` : `${Math.round(startServerProcessDuration)}ms`;\n        _log.event(`Ready in ${formatDurationText}`);\n        if (process.env.TURBOPACK) {\n          await (0, _turbopackwarning.validateTurboNextConfig)({\n            ...serverOptions,\n            isDev: true\n          });\n        }\n      } catch (err) {\n        // fatal error if we can't setup\n        handlersError();\n        console.error(err);\n        process.exit(1);\n      }\n      resolve();\n    });\n    server.listen(port, hostname);\n  });\n  if (isDev) {\n    function watchConfigFiles(dirToWatch, onChange) {\n      const wp = new _watchpack.default();\n      wp.watch({\n        files: _constants.CONFIG_FILES.map(file => _path.default.join(dirToWatch, file))\n      });\n      wp.on(\"change\", onChange);\n    }\n    watchConfigFiles(dir, async filename => {\n      if (process.env.__NEXT_DISABLE_MEMORY_WATCHER) {\n        _log.info(`Detected change, manual restart required due to '__NEXT_DISABLE_MEMORY_WATCHER' usage`);\n        return;\n      }\n      _log.warn(`Found a change in ${_path.default.basename(filename)}. Restarting the server to apply the changes...`);\n      process.exit(_utils.RESTART_EXIT_CODE);\n    });\n  }\n}\nif (process.env.NEXT_PRIVATE_WORKER && process.send) {\n  process.addListener(\"message\", async msg => {\n    if (msg && typeof msg && msg.nextWorkerOptions && process.send) {\n      await startServer(msg.nextWorkerOptions);\n      process.send({\n        nextServerReady: true\n      });\n    }\n  });\n  process.send({\n    nextWorkerReady: true\n  });\n}","map":{"version":3,"names":["getRequestHandlers","startServer","performance","getEntriesByName","length","mark","debug","_debug","default","dir","port","isDev","server","hostname","minimalMode","isNodeDebugging","keepAliveTimeout","experimentalTestProxy","experimentalHttpsServer","_routerserver","initialize","dev","serverOptions","allowRetry","isExperimentalTestProxy","selfSignedCertificate","process","title","handlersReady","handlersError","handlersPromise","Promise","resolve","reject","requestHandler","req","res","Error","upgradeHandler","socket","head","requestListener","undefined","err","statusCode","end","_log","error","url","console","_v8","getHeapStatistics","used_heap_size","heap_size_limit","warn","exit","_utils","RESTART_EXIT_CODE","_https","createServer","key","_fs","readFileSync","cert","_http","on","destroy","portRetryCount","code","listen","nodeDebugType","checkNodeDebugType","addr","address","actualHostname","_formathostname","formatHostname","formattedHostname","networkUrl","appUrl","debugPort","getDebugPort","info","env","PORT","envInfo","expFeatureInfo","startServerInfo","_appinfolog","getStartServerInfo","logStartInfo","maxExperimentalFeatures","cleanup","close","exception","_ispostpone","isPostpone","initResult","Boolean","startServerProcessDuration","measure","duration","formatDurationText","Math","round","event","TURBOPACK","_turbopackwarning","validateTurboNextConfig","watchConfigFiles","dirToWatch","onChange","wp","_watchpack","watch","files","_constants","CONFIG_FILES","map","file","_path","join","filename","__NEXT_DISABLE_MEMORY_WATCHER","basename","NEXT_PRIVATE_WORKER","send","addListener","msg","nextWorkerOptions","nextServerReady","nextWorkerReady"],"sources":["../../../src/server/lib/start-server.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}