{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  requestToBodyStream: null,\n  getCloneableBody: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  requestToBodyStream: function () {\n    return requestToBodyStream;\n  },\n  getCloneableBody: function () {\n    return getCloneableBody;\n  }\n});\nconst _stream = require(\"stream\");\nfunction requestToBodyStream(context, KUint8Array, stream) {\n  return new context.ReadableStream({\n    start: async controller => {\n      for await (const chunk of stream) {\n        controller.enqueue(new KUint8Array(chunk));\n      }\n      controller.close();\n    }\n  });\n}\nfunction replaceRequestBody(base, stream) {\n  for (const key in stream) {\n    let v = stream[key];\n    if (typeof v === \"function\") {\n      v = v.bind(base);\n    }\n    base[key] = v;\n  }\n  return base;\n}\nfunction getCloneableBody(readable) {\n  let buffered = null;\n  const endPromise = new Promise((resolve, reject) => {\n    readable.on(\"end\", resolve);\n    readable.on(\"error\", reject);\n  }).catch(error => {\n    return {\n      error\n    };\n  });\n  return {\n    /**\n    * Replaces the original request body if necessary.\n    * This is done because once we read the body from the original request,\n    * we can't read it again.\n    */\n    async finalize() {\n      if (buffered) {\n        const res = await endPromise;\n        if (res && typeof res === \"object\" && res.error) {\n          throw res.error;\n        }\n        replaceRequestBody(readable, buffered);\n        buffered = readable;\n      }\n    },\n    /**\n    * Clones the body stream\n    * to pass into a middleware\n    */\n    cloneBodyStream() {\n      const input = buffered ?? readable;\n      const p1 = new _stream.PassThrough();\n      const p2 = new _stream.PassThrough();\n      input.on(\"data\", chunk => {\n        p1.push(chunk);\n        p2.push(chunk);\n      });\n      input.on(\"end\", () => {\n        p1.push(null);\n        p2.push(null);\n      });\n      buffered = p2;\n      return p1;\n    }\n  };\n}","map":{"version":3,"names":["requestToBodyStream","getCloneableBody","context","KUint8Array","stream","ReadableStream","start","controller","chunk","enqueue","close","replaceRequestBody","base","key","v","bind","readable","buffered","endPromise","Promise","resolve","reject","on","catch","error","finalize","res","cloneBodyStream","input","p1","_stream","PassThrough","p2","push"],"sources":["../../src/server/body-streams.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAIgBA,mBAAmB,WAAAA,CAAA;WAAnBA,mBAAA;;EAmCAC,gBAAgB,WAAAA,CAAA;WAAhBA,gBAAA;;;wBArCY;AAErB,SAASD,oBACdE,OAAkD,EAClDC,WAA8B,EAC9BC,MAAgB;EAEhB,OAAO,IAAIF,OAAA,CAAQG,cAAc,CAAC;IAChCC,KAAA,EAAO,MAAOC,UAAA;MACZ,WAAW,MAAMC,KAAA,IAASJ,MAAA,EAAQ;QAChCG,UAAA,CAAWE,OAAO,CAAC,IAAIN,WAAA,CAAYK,KAAA;MACrC;MACAD,UAAA,CAAWG,KAAK;IAClB;EACF;AACF;AAEA,SAASC,mBACPC,IAAO,EACPR,MAAgB;EAEhB,KAAK,MAAMS,GAAA,IAAOT,MAAA,EAAQ;IACxB,IAAIU,CAAA,GAAIV,MAAM,CAACS,GAAA,CAAsB;IACrC,IAAI,OAAOC,CAAA,KAAM,YAAY;MAC3BA,CAAA,GAAIA,CAAA,CAAEC,IAAI,CAACH,IAAA;IACb;IACAA,IAAI,CAACC,GAAA,CAAe,GAAGC,CAAA;EACzB;EAEA,OAAOF,IAAA;AACT;AAOO,SAASX,iBACde,QAAW;EAEX,IAAIC,QAAA,GAA4B;EAEhC,MAAMC,UAAA,GAAa,IAAIC,OAAA,CACrB,CAACC,OAAA,EAASC,MAAA;IACRL,QAAA,CAASM,EAAE,CAAC,OAAOF,OAAA;IACnBJ,QAAA,CAASM,EAAE,CAAC,SAASD,MAAA;EACvB,GACAE,KAAK,CAAEC,KAAA;IACP,OAAO;MAAEA;IAAM;EACjB;EAEA,OAAO;IACL;;;;;IAKA,MAAMC,SAAA;MACJ,IAAIR,QAAA,EAAU;QACZ,MAAMS,GAAA,GAAM,MAAMR,UAAA;QAElB,IAAIQ,GAAA,IAAO,OAAOA,GAAA,KAAQ,YAAYA,GAAA,CAAIF,KAAK,EAAE;UAC/C,MAAME,GAAA,CAAIF,KAAK;QACjB;QACAb,kBAAA,CAAmBK,QAAA,EAAUC,QAAA;QAC7BA,QAAA,GAAWD,QAAA;MACb;IACF;IACA;;;;IAIAW,gBAAA;MACE,MAAMC,KAAA,GAAQX,QAAA,IAAYD,QAAA;MAC1B,MAAMa,EAAA,GAAK,IAAIC,OAAA,CAAAC,WAAW;MAC1B,MAAMC,EAAA,GAAK,IAAIF,OAAA,CAAAC,WAAW;MAC1BH,KAAA,CAAMN,EAAE,CAAC,QAASd,KAAA;QAChBqB,EAAA,CAAGI,IAAI,CAACzB,KAAA;QACRwB,EAAA,CAAGC,IAAI,CAACzB,KAAA;MACV;MACAoB,KAAA,CAAMN,EAAE,CAAC,OAAO;QACdO,EAAA,CAAGI,IAAI,CAAC;QACRD,EAAA,CAAGC,IAAI,CAAC;MACV;MACAhB,QAAA,GAAWe,EAAA;MACX,OAAOH,EAAA;IACT;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}