{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  deserializeErr: null,\n  invokeIpcMethod: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  deserializeErr: function () {\n    return deserializeErr;\n  },\n  invokeIpcMethod: function () {\n    return invokeIpcMethod;\n  }\n});\nconst _utils = require(\"../../../shared/lib/utils\");\nconst _invokerequest = require(\"./invoke-request\");\nconst deserializeErr = serializedErr => {\n  if (!serializedErr || typeof serializedErr !== \"object\" || !serializedErr.stack) {\n    return serializedErr;\n  }\n  let ErrorType = Error;\n  if (serializedErr.name === \"PageNotFoundError\") {\n    ErrorType = _utils.PageNotFoundError;\n  }\n  const err = new ErrorType(serializedErr.message);\n  err.stack = serializedErr.stack;\n  err.name = serializedErr.name;\n  err.digest = serializedErr.digest;\n  if (process.env.NODE_ENV === \"development\" && process.env.NEXT_RUNTIME !== \"edge\") {\n    const {\n      decorateServerError\n    } = require(\"next/dist/compiled/@next/react-dev-overlay/dist/middleware\");\n    decorateServerError(err, serializedErr.source || \"server\");\n  }\n  return err;\n};\nasync function invokeIpcMethod({\n  fetchHostname = \"localhost\",\n  method,\n  args,\n  ipcPort,\n  ipcKey\n}) {\n  if (ipcPort) {\n    const res = await (0, _invokerequest.invokeRequest)(`http://${fetchHostname}:${ipcPort}?key=${ipcKey}&method=${method}&args=${encodeURIComponent(JSON.stringify(args))}`, {\n      method: \"GET\",\n      headers: {}\n    });\n    const body = await res.text();\n    if (body.startsWith(\"{\") && body.endsWith(\"}\")) {\n      const parsedBody = JSON.parse(body);\n      if (parsedBody && typeof parsedBody === \"object\" && \"err\" in parsedBody && \"stack\" in parsedBody.err) {\n        throw deserializeErr(parsedBody.err);\n      }\n      return parsedBody;\n    }\n  }\n}","map":{"version":3,"names":["deserializeErr","invokeIpcMethod","serializedErr","stack","ErrorType","Error","name","_utils","PageNotFoundError","err","message","digest","process","env","NODE_ENV","NEXT_RUNTIME","decorateServerError","require","source","fetchHostname","method","args","ipcPort","ipcKey","res","_invokerequest","invokeRequest","encodeURIComponent","JSON","stringify","headers","body","text","startsWith","endsWith","parsedBody","parse"],"sources":["../../../../src/server/lib/server-ipc/request-utils.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAGaA,cAAc,WAAAA,CAAA;WAAdA,cAAA;;EA8BSC,eAAe,WAAAA,CAAA;WAAfA,eAAA;;;uBAjCY;+BACJ;AAEvB,MAAMD,cAAA,GAAkBE,aAAA;EAC7B,IACE,CAACA,aAAA,IACD,OAAOA,aAAA,KAAkB,YACzB,CAACA,aAAA,CAAcC,KAAK,EACpB;IACA,OAAOD,aAAA;EACT;EACA,IAAIE,SAAA,GAAiBC,KAAA;EAErB,IAAIH,aAAA,CAAcI,IAAI,KAAK,qBAAqB;IAC9CF,SAAA,GAAYG,MAAA,CAAAC,iBAAiB;EAC/B;EAEA,MAAMC,GAAA,GAAM,IAAIL,SAAA,CAAUF,aAAA,CAAcQ,OAAO;EAC/CD,GAAA,CAAIN,KAAK,GAAGD,aAAA,CAAcC,KAAK;EAC/BM,GAAA,CAAIH,IAAI,GAAGJ,aAAA,CAAcI,IAAI;EAC3BG,GAAA,CAAYE,MAAM,GAAGT,aAAA,CAAcS,MAAM;EAE3C,IACEC,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,iBACzBF,OAAA,CAAQC,GAAG,CAACE,YAAY,KAAK,QAC7B;IACA,MAAM;MAAEC;IAAmB,CAAE,GAC3BC,OAAA,CAAQ;IACVD,mBAAA,CAAoBP,GAAA,EAAKP,aAAA,CAAcgB,MAAM,IAAI;EACnD;EACA,OAAOT,GAAA;AACT;AAEO,eAAeR,gBAAgB;EACpCkB,aAAA,GAAgB,WAAW;EAC3BC,MAAM;EACNC,IAAI;EACJC,OAAO;EACPC;AAAM,CAOP;EACC,IAAID,OAAA,EAAS;IACX,MAAME,GAAA,GAAM,MAAM,IAAAC,cAAA,CAAAC,aAAa,EAC5B,UAASP,aAAc,IAAGG,OAAQ,QAAOC,MAAO,WAC/CH,MACD,SAAQO,kBAAA,CAAmBC,IAAA,CAAKC,SAAS,CAACR,IAAA,EAAO,EAAC,EACnD;MACED,MAAA,EAAQ;MACRU,OAAA,EAAS,CAAC;IACZ;IAEF,MAAMC,IAAA,GAAO,MAAMP,GAAA,CAAIQ,IAAI;IAE3B,IAAID,IAAA,CAAKE,UAAU,CAAC,QAAQF,IAAA,CAAKG,QAAQ,CAAC,MAAM;MAC9C,MAAMC,UAAA,GAAaP,IAAA,CAAKQ,KAAK,CAACL,IAAA;MAE9B,IACEI,UAAA,IACA,OAAOA,UAAA,KAAe,YACtB,SAASA,UAAA,IACT,WAAWA,UAAA,CAAW1B,GAAG,EACzB;QACA,MAAMT,cAAA,CAAemC,UAAA,CAAW1B,GAAG;MACrC;MACA,OAAO0B,UAAA;IACT;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}