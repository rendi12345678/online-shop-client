{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  normalizeVercelUrl: null,\n  interpolateDynamicPath: null,\n  getUtils: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  normalizeVercelUrl: function () {\n    return normalizeVercelUrl;\n  },\n  interpolateDynamicPath: function () {\n    return interpolateDynamicPath;\n  },\n  getUtils: function () {\n    return getUtils;\n  }\n});\nconst _url = require(\"url\");\nconst _normalizelocalepath = require(\"../shared/lib/i18n/normalize-locale-path\");\nconst _pathmatch = require(\"../shared/lib/router/utils/path-match\");\nconst _routeregex = require(\"../shared/lib/router/utils/route-regex\");\nconst _routematcher = require(\"../shared/lib/router/utils/route-matcher\");\nconst _preparedestination = require(\"../shared/lib/router/utils/prepare-destination\");\nconst _removetrailingslash = require(\"../shared/lib/router/utils/remove-trailing-slash\");\nconst _apppaths = require(\"../shared/lib/router/utils/app-paths\");\nconst _constants = require(\"../lib/constants\");\nfunction normalizeVercelUrl(req, trustQuery, paramKeys, pageIsDynamic, defaultRouteRegex) {\n  // make sure to normalize req.url on Vercel to strip dynamic params\n  // from the query which are added during routing\n  if (pageIsDynamic && trustQuery && defaultRouteRegex) {\n    const _parsedUrl = (0, _url.parse)(req.url, true);\n    delete _parsedUrl.search;\n    for (const key of Object.keys(_parsedUrl.query)) {\n      if (key !== _constants.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_constants.NEXT_QUERY_PARAM_PREFIX) || (paramKeys || Object.keys(defaultRouteRegex.groups)).includes(key)) {\n        delete _parsedUrl.query[key];\n      }\n    }\n    req.url = (0, _url.format)(_parsedUrl);\n  }\n}\nfunction interpolateDynamicPath(pathname, params, defaultRouteRegex) {\n  if (!defaultRouteRegex) return pathname;\n  for (const param of Object.keys(defaultRouteRegex.groups)) {\n    const {\n      optional,\n      repeat\n    } = defaultRouteRegex.groups[param];\n    let builtParam = `[${repeat ? \"...\" : \"\"}${param}]`;\n    if (optional) {\n      builtParam = `[${builtParam}]`;\n    }\n    const paramIdx = pathname.indexOf(builtParam);\n    if (paramIdx > -1) {\n      let paramValue;\n      const value = params[param];\n      if (Array.isArray(value)) {\n        paramValue = value.map(v => v && encodeURIComponent(v)).join(\"/\");\n      } else if (value) {\n        paramValue = encodeURIComponent(value);\n      } else {\n        paramValue = \"\";\n      }\n      pathname = pathname.slice(0, paramIdx) + paramValue + pathname.slice(paramIdx + builtParam.length);\n    }\n  }\n  return pathname;\n}\nfunction getUtils({\n  page,\n  i18n,\n  basePath,\n  rewrites,\n  pageIsDynamic,\n  trailingSlash,\n  caseSensitive\n}) {\n  let defaultRouteRegex;\n  let dynamicRouteMatcher;\n  let defaultRouteMatches;\n  if (pageIsDynamic) {\n    defaultRouteRegex = (0, _routeregex.getNamedRouteRegex)(page, false);\n    dynamicRouteMatcher = (0, _routematcher.getRouteMatcher)(defaultRouteRegex);\n    defaultRouteMatches = dynamicRouteMatcher(page);\n  }\n  function handleRewrites(req, parsedUrl) {\n    const rewriteParams = {};\n    let fsPathname = parsedUrl.pathname;\n    const matchesPage = () => {\n      const fsPathnameNoSlash = (0, _removetrailingslash.removeTrailingSlash)(fsPathname || \"\");\n      return fsPathnameNoSlash === (0, _removetrailingslash.removeTrailingSlash)(page) || (dynamicRouteMatcher == null ? void 0 : dynamicRouteMatcher(fsPathnameNoSlash));\n    };\n    const checkRewrite = rewrite => {\n      const matcher = (0, _pathmatch.getPathMatch)(rewrite.source + (trailingSlash ? \"(/)?\" : \"\"), {\n        removeUnnamedParams: true,\n        strict: true,\n        sensitive: !!caseSensitive\n      });\n      let params = matcher(parsedUrl.pathname);\n      if ((rewrite.has || rewrite.missing) && params) {\n        const hasParams = (0, _preparedestination.matchHas)(req, parsedUrl.query, rewrite.has, rewrite.missing);\n        if (hasParams) {\n          Object.assign(params, hasParams);\n        } else {\n          params = false;\n        }\n      }\n      if (params) {\n        const {\n          parsedDestination,\n          destQuery\n        } = (0, _preparedestination.prepareDestination)({\n          appendParamsToQuery: true,\n          destination: rewrite.destination,\n          params: params,\n          query: parsedUrl.query\n        });\n        // if the rewrite destination is external break rewrite chain\n        if (parsedDestination.protocol) {\n          return true;\n        }\n        Object.assign(rewriteParams, destQuery, params);\n        Object.assign(parsedUrl.query, parsedDestination.query);\n        delete parsedDestination.query;\n        Object.assign(parsedUrl, parsedDestination);\n        fsPathname = parsedUrl.pathname;\n        if (basePath) {\n          fsPathname = fsPathname.replace(new RegExp(`^${basePath}`), \"\") || \"/\";\n        }\n        if (i18n) {\n          const destLocalePathResult = (0, _normalizelocalepath.normalizeLocalePath)(fsPathname, i18n.locales);\n          fsPathname = destLocalePathResult.pathname;\n          parsedUrl.query.nextInternalLocale = destLocalePathResult.detectedLocale || params.nextInternalLocale;\n        }\n        if (fsPathname === page) {\n          return true;\n        }\n        if (pageIsDynamic && dynamicRouteMatcher) {\n          const dynamicParams = dynamicRouteMatcher(fsPathname);\n          if (dynamicParams) {\n            parsedUrl.query = {\n              ...parsedUrl.query,\n              ...dynamicParams\n            };\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    for (const rewrite of rewrites.beforeFiles || []) {\n      checkRewrite(rewrite);\n    }\n    if (fsPathname !== page) {\n      let finished = false;\n      for (const rewrite of rewrites.afterFiles || []) {\n        finished = checkRewrite(rewrite);\n        if (finished) break;\n      }\n      if (!finished && !matchesPage()) {\n        for (const rewrite of rewrites.fallback || []) {\n          finished = checkRewrite(rewrite);\n          if (finished) break;\n        }\n      }\n    }\n    return rewriteParams;\n  }\n  function getParamsFromRouteMatches(req, renderOpts, detectedLocale) {\n    return (0, _routematcher.getRouteMatcher)(function () {\n      const {\n        groups,\n        routeKeys\n      } = defaultRouteRegex;\n      return {\n        re: {\n          // Simulate a RegExp match from the \\`req.url\\` input\n          exec: str => {\n            const obj = Object.fromEntries(new URLSearchParams(str));\n            const matchesHasLocale = i18n && detectedLocale && obj[\"1\"] === detectedLocale;\n            for (const key of Object.keys(obj)) {\n              const value = obj[key];\n              if (key !== _constants.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_constants.NEXT_QUERY_PARAM_PREFIX)) {\n                const normalizedKey = key.substring(_constants.NEXT_QUERY_PARAM_PREFIX.length);\n                obj[normalizedKey] = value;\n                delete obj[key];\n              }\n            }\n            // favor named matches if available\n            const routeKeyNames = Object.keys(routeKeys || {});\n            const filterLocaleItem = val => {\n              if (i18n) {\n                // locale items can be included in route-matches\n                // for fallback SSG pages so ensure they are\n                // filtered\n                const isCatchAll = Array.isArray(val);\n                const _val = isCatchAll ? val[0] : val;\n                if (typeof _val === \"string\" && i18n.locales.some(item => {\n                  if (item.toLowerCase() === _val.toLowerCase()) {\n                    detectedLocale = item;\n                    renderOpts.locale = detectedLocale;\n                    return true;\n                  }\n                  return false;\n                })) {\n                  // remove the locale item from the match\n                  if (isCatchAll) {\n                    val.splice(0, 1);\n                  }\n                  // the value is only a locale item and\n                  // shouldn't be added\n                  return isCatchAll ? val.length === 0 : true;\n                }\n              }\n              return false;\n            };\n            if (routeKeyNames.every(name => obj[name])) {\n              return routeKeyNames.reduce((prev, keyName) => {\n                const paramName = routeKeys == null ? void 0 : routeKeys[keyName];\n                if (paramName && !filterLocaleItem(obj[keyName])) {\n                  prev[groups[paramName].pos] = obj[keyName];\n                }\n                return prev;\n              }, {});\n            }\n            return Object.keys(obj).reduce((prev, key) => {\n              if (!filterLocaleItem(obj[key])) {\n                let normalizedKey = key;\n                if (matchesHasLocale) {\n                  normalizedKey = parseInt(key, 10) - 1 + \"\";\n                }\n                return Object.assign(prev, {\n                  [normalizedKey]: obj[key]\n                });\n              }\n              return prev;\n            }, {});\n          }\n        },\n        groups\n      };\n    }())(req.headers[\"x-now-route-matches\"]);\n  }\n  function normalizeDynamicRouteParams(params, ignoreOptional) {\n    let hasValidParams = true;\n    if (!defaultRouteRegex) return {\n      params,\n      hasValidParams: false\n    };\n    params = Object.keys(defaultRouteRegex.groups).reduce((prev, key) => {\n      let value = params[key];\n      if (typeof value === \"string\") {\n        value = (0, _apppaths.normalizeRscURL)(value);\n      }\n      if (Array.isArray(value)) {\n        value = value.map(val => {\n          if (typeof val === \"string\") {\n            val = (0, _apppaths.normalizeRscURL)(val);\n          }\n          return val;\n        });\n      }\n      // if the value matches the default value we can't rely\n      // on the parsed params, this is used to signal if we need\n      // to parse x-now-route-matches or not\n      const defaultValue = defaultRouteMatches[key];\n      const isOptional = defaultRouteRegex.groups[key].optional;\n      const isDefaultValue = Array.isArray(defaultValue) ? defaultValue.some(defaultVal => {\n        return Array.isArray(value) ? value.some(val => val.includes(defaultVal)) : value == null ? void 0 : value.includes(defaultVal);\n      }) : value == null ? void 0 : value.includes(defaultValue);\n      if (isDefaultValue || typeof value === \"undefined\" && !(isOptional && ignoreOptional)) {\n        hasValidParams = false;\n      }\n      // non-provided optional values should be undefined so normalize\n      // them to undefined\n      if (isOptional && (!value || Array.isArray(value) && value.length === 1 && (\n      // fallback optional catch-all SSG pages have\n      // [[...paramName]] for the root path on Vercel\n      value[0] === \"index\" || value[0] === `[[...${key}]]`))) {\n        value = undefined;\n        delete params[key];\n      }\n      // query values from the proxy aren't already split into arrays\n      // so make sure to normalize catch-all values\n      if (value && typeof value === \"string\" && defaultRouteRegex.groups[key].repeat) {\n        value = value.split(\"/\");\n      }\n      if (value) {\n        prev[key] = value;\n      }\n      return prev;\n    }, {});\n    return {\n      params,\n      hasValidParams\n    };\n  }\n  return {\n    handleRewrites,\n    defaultRouteRegex,\n    dynamicRouteMatcher,\n    defaultRouteMatches,\n    getParamsFromRouteMatches,\n    normalizeDynamicRouteParams,\n    normalizeVercelUrl: (req, trustQuery, paramKeys) => normalizeVercelUrl(req, trustQuery, paramKeys, pageIsDynamic, defaultRouteRegex),\n    interpolateDynamicPath: (pathname, params) => interpolateDynamicPath(pathname, params, defaultRouteRegex)\n  };\n}","map":{"version":3,"names":["normalizeVercelUrl","interpolateDynamicPath","getUtils","req","trustQuery","paramKeys","pageIsDynamic","defaultRouteRegex","_parsedUrl","_url","parse","url","search","key","Object","keys","query","_constants","NEXT_QUERY_PARAM_PREFIX","startsWith","groups","includes","format","pathname","params","param","optional","repeat","builtParam","paramIdx","indexOf","paramValue","value","Array","isArray","map","v","encodeURIComponent","join","slice","length","page","i18n","basePath","rewrites","trailingSlash","caseSensitive","dynamicRouteMatcher","defaultRouteMatches","_routeregex","getNamedRouteRegex","_routematcher","getRouteMatcher","handleRewrites","parsedUrl","rewriteParams","fsPathname","matchesPage","fsPathnameNoSlash","_removetrailingslash","removeTrailingSlash","checkRewrite","rewrite","matcher","_pathmatch","getPathMatch","source","removeUnnamedParams","strict","sensitive","has","missing","hasParams","_preparedestination","matchHas","assign","parsedDestination","destQuery","prepareDestination","appendParamsToQuery","destination","protocol","replace","RegExp","destLocalePathResult","_normalizelocalepath","normalizeLocalePath","locales","nextInternalLocale","detectedLocale","dynamicParams","beforeFiles","finished","afterFiles","fallback","getParamsFromRouteMatches","renderOpts","routeKeys","re","exec","str","obj","fromEntries","URLSearchParams","matchesHasLocale","normalizedKey","substring","routeKeyNames","filterLocaleItem","val","isCatchAll","_val","some","item","toLowerCase","locale","splice","every","name","reduce","prev","keyName","paramName","pos","parseInt","headers","normalizeDynamicRouteParams","ignoreOptional","hasValidParams","_apppaths","normalizeRscURL","defaultValue","isOptional","isDefaultValue","defaultVal","undefined","split"],"sources":["../../src/server/server-utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}