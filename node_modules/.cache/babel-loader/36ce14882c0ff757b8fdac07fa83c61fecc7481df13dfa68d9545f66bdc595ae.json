{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst _fs = /*#__PURE__*/_interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _storage = require(\"./storage\");\nconst _config = /*#__PURE__*/_interop_require_default(require(\"../server/config\"));\nconst _getprojectdir = require(\"../lib/get-project-dir\");\nconst _constants = require(\"../shared/lib/constants\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n(async () => {\n  const args = [...process.argv];\n  let dir = args.pop();\n  const mode = args.pop();\n  if (!dir || mode !== \"dev\") {\n    throw new Error(`Invalid flags should be run as node detached-flush dev ./path-to/project`);\n  }\n  dir = (0, _getprojectdir.getProjectDir)(dir);\n  const config = await (0, _config.default)(_constants.PHASE_DEVELOPMENT_SERVER, dir);\n  const distDir = _path.default.join(dir, config.distDir || \".next\");\n  const eventsPath = _path.default.join(distDir, \"_events.json\");\n  let events;\n  try {\n    events = JSON.parse(_fs.default.readFileSync(eventsPath, \"utf8\"));\n  } catch (err) {\n    if (err.code === \"ENOENT\") {\n      // no events to process we can exit now\n      process.exit(0);\n    }\n    throw err;\n  }\n  const telemetry = new _storage.Telemetry({\n    distDir\n  });\n  await telemetry.record(events);\n  await telemetry.flush();\n  // finished flushing events clean-up/exit\n  _fs.default.unlinkSync(eventsPath);\n  process.exit(0);\n})();","map":{"version":3,"names":["args","process","argv","dir","pop","mode","Error","_getprojectdir","getProjectDir","config","_config","default","_constants","PHASE_DEVELOPMENT_SERVER","distDir","_path","join","eventsPath","events","JSON","parse","_fs","readFileSync","err","code","exit","telemetry","_storage","Telemetry","record","flush","unlinkSync"],"sources":["../../src/telemetry/detached-flush.ts"],"sourcesContent":[null],"mappings":";;;;;0DAAe;4DACE;yBAES;8DACH;+BACO;2BACW;;;;;;AAKvC;EACA,MAAMA,IAAA,GAAO,C,GAAIC,OAAA,CAAQC,IAAI,CAAC;EAC9B,IAAIC,GAAA,GAAMH,IAAA,CAAKI,GAAG;EAClB,MAAMC,IAAA,GAAOL,IAAA,CAAKI,GAAG;EAErB,IAAI,CAACD,GAAA,IAAOE,IAAA,KAAS,OAAO;IAC1B,MAAM,IAAIC,KAAA,CACP,0EAAyE;EAE9E;EACAH,GAAA,GAAM,IAAAI,cAAA,CAAAC,aAAa,EAACL,GAAA;EAEpB,MAAMM,MAAA,GAAS,MAAM,IAAAC,OAAA,CAAAC,OAAU,EAACC,UAAA,CAAAC,wBAAwB,EAAEV,GAAA;EAC1D,MAAMW,OAAA,GAAUC,KAAA,CAAAJ,OAAI,CAACK,IAAI,CAACb,GAAA,EAAKM,MAAA,CAAOK,OAAO,IAAI;EACjD,MAAMG,UAAA,GAAaF,KAAA,CAAAJ,OAAI,CAACK,IAAI,CAACF,OAAA,EAAS;EAEtC,IAAII,MAAA;EACJ,IAAI;IACFA,MAAA,GAASC,IAAA,CAAKC,KAAK,CAACC,GAAA,CAAAV,OAAE,CAACW,YAAY,CAACL,UAAA,EAAY;EAClD,EAAE,OAAOM,GAAA,EAAU;IACjB,IAAIA,GAAA,CAAIC,IAAI,KAAK,UAAU;MACzB;MACAvB,OAAA,CAAQwB,IAAI,CAAC;IACf;IACA,MAAMF,GAAA;EACR;EAEA,MAAMG,SAAA,GAAY,IAAIC,QAAA,CAAAC,SAAS,CAAC;IAAEd;EAAQ;EAC1C,MAAMY,SAAA,CAAUG,MAAM,CAACX,MAAA;EACvB,MAAMQ,SAAA,CAAUI,KAAK;EAErB;EACAT,GAAA,CAAAV,OAAE,CAACoB,UAAU,CAACd,UAAA;EACdhB,OAAA,CAAQwB,IAAI,CAAC;AACf"},"metadata":{},"sourceType":"script","externalDependencies":[]}