{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  fromNodeOutgoingHttpHeaders: null,\n  splitCookiesString: null,\n  toNodeOutgoingHttpHeaders: null,\n  validateURL: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  fromNodeOutgoingHttpHeaders: function () {\n    return fromNodeOutgoingHttpHeaders;\n  },\n  splitCookiesString: function () {\n    return splitCookiesString;\n  },\n  toNodeOutgoingHttpHeaders: function () {\n    return toNodeOutgoingHttpHeaders;\n  },\n  validateURL: function () {\n    return validateURL;\n  }\n});\nfunction fromNodeOutgoingHttpHeaders(nodeHeaders) {\n  const headers = new Headers();\n  for (let [key, value] of Object.entries(nodeHeaders)) {\n    const values = Array.isArray(value) ? value : [value];\n    for (let v of values) {\n      if (typeof v === \"undefined\") continue;\n      if (typeof v === \"number\") {\n        v = v.toString();\n      }\n      headers.append(key, v);\n    }\n  }\n  return headers;\n}\nfunction splitCookiesString(cookiesString) {\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n  return cookiesStrings;\n}\nfunction toNodeOutgoingHttpHeaders(headers) {\n  const nodeHeaders = {};\n  const cookies = [];\n  if (headers) {\n    for (const [key, value] of headers.entries()) {\n      if (key.toLowerCase() === \"set-cookie\") {\n        // We may have gotten a comma joined string of cookies, or multiple\n        // set-cookie headers. We need to merge them into one header array\n        // to represent all the cookies.\n        cookies.push(...splitCookiesString(value));\n        nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;\n      } else {\n        nodeHeaders[key] = value;\n      }\n    }\n  }\n  return nodeHeaders;\n}\nfunction validateURL(url) {\n  try {\n    return String(new URL(String(url)));\n  } catch (error) {\n    throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n      cause: error\n    });\n  }\n}","map":{"version":3,"names":["fromNodeOutgoingHttpHeaders","splitCookiesString","toNodeOutgoingHttpHeaders","validateURL","nodeHeaders","headers","Headers","key","value","Object","entries","values","Array","isArray","v","toString","append","cookiesString","cookiesStrings","pos","start","ch","lastComma","nextStart","cookiesSeparatorFound","skipWhitespace","length","test","charAt","notSpecialChar","push","substring","cookies","toLowerCase","url","String","URL","error","Error","cause"],"sources":["../../../src/server/web/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}