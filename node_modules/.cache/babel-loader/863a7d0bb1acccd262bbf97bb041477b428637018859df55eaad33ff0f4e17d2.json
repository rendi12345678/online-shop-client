{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  printAndExit: null,\n  getDebugPort: null,\n  getNodeOptionsWithoutInspect: null,\n  getPort: null,\n  RESTART_EXIT_CODE: null,\n  checkNodeDebugType: null,\n  getMaxOldSpaceSize: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  printAndExit: function () {\n    return printAndExit;\n  },\n  getDebugPort: function () {\n    return getDebugPort;\n  },\n  getNodeOptionsWithoutInspect: function () {\n    return getNodeOptionsWithoutInspect;\n  },\n  getPort: function () {\n    return getPort;\n  },\n  RESTART_EXIT_CODE: function () {\n    return RESTART_EXIT_CODE;\n  },\n  checkNodeDebugType: function () {\n    return checkNodeDebugType;\n  },\n  getMaxOldSpaceSize: function () {\n    return getMaxOldSpaceSize;\n  }\n});\nfunction printAndExit(message, code = 1) {\n  if (code === 0) {\n    console.log(message);\n  } else {\n    console.error(message);\n  }\n  process.exit(code);\n}\nconst getDebugPort = () => {\n  var _process_execArgv_find, _process_env_NODE_OPTIONS_match, _process_env_NODE_OPTIONS_match1, _process_env_NODE_OPTIONS;\n  const debugPortStr = ((_process_execArgv_find = process.execArgv.find(localArg => localArg.startsWith(\"--inspect\") || localArg.startsWith(\"--inspect-brk\"))) == null ? void 0 : _process_execArgv_find.split(\"=\", 2)[1]) ?? ((_process_env_NODE_OPTIONS = process.env.NODE_OPTIONS) == null ? void 0 : (_process_env_NODE_OPTIONS_match1 = _process_env_NODE_OPTIONS.match) == null ? void 0 : (_process_env_NODE_OPTIONS_match = _process_env_NODE_OPTIONS_match1.call(_process_env_NODE_OPTIONS, /--inspect(-brk)?(=(\\S+))?( |$)/)) == null ? void 0 : _process_env_NODE_OPTIONS_match[3]);\n  return debugPortStr ? parseInt(debugPortStr, 10) : 9229;\n};\nconst NODE_INSPECT_RE = /--inspect(-brk)?(=\\S+)?( |$)/;\nfunction getNodeOptionsWithoutInspect() {\n  return (process.env.NODE_OPTIONS || \"\").replace(NODE_INSPECT_RE, \"\");\n}\nfunction getPort(args) {\n  if (typeof args[\"--port\"] === \"number\") {\n    return args[\"--port\"];\n  }\n  const parsed = process.env.PORT && parseInt(process.env.PORT, 10);\n  if (typeof parsed === \"number\" && !Number.isNaN(parsed)) {\n    return parsed;\n  }\n  return 3000;\n}\nconst RESTART_EXIT_CODE = 77;\nfunction checkNodeDebugType() {\n  var _process_env_NODE_OPTIONS_match, _process_env_NODE_OPTIONS, _process_env_NODE_OPTIONS_match1, _process_env_NODE_OPTIONS1;\n  let nodeDebugType = undefined;\n  if (process.execArgv.some(localArg => localArg.startsWith(\"--inspect\")) || ((_process_env_NODE_OPTIONS = process.env.NODE_OPTIONS) == null ? void 0 : (_process_env_NODE_OPTIONS_match = _process_env_NODE_OPTIONS.match) == null ? void 0 : _process_env_NODE_OPTIONS_match.call(_process_env_NODE_OPTIONS, /--inspect(=\\S+)?( |$)/))) {\n    nodeDebugType = \"inspect\";\n  }\n  if (process.execArgv.some(localArg => localArg.startsWith(\"--inspect-brk\")) || ((_process_env_NODE_OPTIONS1 = process.env.NODE_OPTIONS) == null ? void 0 : (_process_env_NODE_OPTIONS_match1 = _process_env_NODE_OPTIONS1.match) == null ? void 0 : _process_env_NODE_OPTIONS_match1.call(_process_env_NODE_OPTIONS1, /--inspect-brk(=\\S+)?( |$)/))) {\n    nodeDebugType = \"inspect-brk\";\n  }\n  return nodeDebugType;\n}\nfunction getMaxOldSpaceSize() {\n  var _process_env_NODE_OPTIONS_match, _process_env_NODE_OPTIONS;\n  const maxOldSpaceSize = (_process_env_NODE_OPTIONS = process.env.NODE_OPTIONS) == null ? void 0 : (_process_env_NODE_OPTIONS_match = _process_env_NODE_OPTIONS.match(/--max-old-space-size=(\\d+)/)) == null ? void 0 : _process_env_NODE_OPTIONS_match[1];\n  return maxOldSpaceSize ? parseInt(maxOldSpaceSize, 10) : undefined;\n}","map":{"version":3,"names":["printAndExit","getDebugPort","getNodeOptionsWithoutInspect","getPort","RESTART_EXIT_CODE","checkNodeDebugType","getMaxOldSpaceSize","message","code","console","log","error","process","exit","_process_execArgv_find","_process_env_NODE_OPTIONS_match","_process_env_NODE_OPTIONS_match1","_process_env_NODE_OPTIONS","debugPortStr","execArgv","find","localArg","startsWith","split","env","NODE_OPTIONS","match","call","parseInt","NODE_INSPECT_RE","replace","args","parsed","PORT","Number","isNaN","_process_env_NODE_OPTIONS1","nodeDebugType","undefined","some","maxOldSpaceSize"],"sources":["../../../src/server/lib/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}