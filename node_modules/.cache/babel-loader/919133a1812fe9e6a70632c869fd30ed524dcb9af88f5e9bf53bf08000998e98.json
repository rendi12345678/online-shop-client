{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  NoFallbackError: null,\n  WrappedBuildError: null,\n  default: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  NoFallbackError: function () {\n    return NoFallbackError;\n  },\n  WrappedBuildError: function () {\n    return WrappedBuildError;\n  },\n  default: function () {\n    return Server;\n  }\n});\nconst _utils = require(\"../shared/lib/utils\");\nconst _url = require(\"url\");\nconst _formathostname = require(\"./lib/format-hostname\");\nconst _redirectstatus = require(\"../lib/redirect-status\");\nconst _isedgeruntime = require(\"../lib/is-edge-runtime\");\nconst _constants = require(\"../shared/lib/constants\");\nconst _utils1 = require(\"../shared/lib/router/utils\");\nconst _apiutils = require(\"./api-utils\");\nconst _runtimeconfigexternal = require(\"../shared/lib/runtime-config.external\");\nconst _revalidate = require(\"./lib/revalidate\");\nconst _utils2 = require(\"./utils\");\nconst _isbot = require(\"../shared/lib/router/utils/is-bot\");\nconst _renderresult = /*#__PURE__*/_interop_require_default(require(\"./render-result\"));\nconst _removetrailingslash = require(\"../shared/lib/router/utils/remove-trailing-slash\");\nconst _denormalizepagepath = require(\"../shared/lib/page-path/denormalize-page-path\");\nconst _log = /*#__PURE__*/_interop_require_wildcard(require(\"../build/output/log\"));\nconst _escapepathdelimiters = /*#__PURE__*/_interop_require_default(require(\"../shared/lib/router/utils/escape-path-delimiters\"));\nconst _serverutils = require(\"./server-utils\");\nconst _iserror = /*#__PURE__*/_interop_require_wildcard(require(\"../lib/is-error\"));\nconst _requestmeta = require(\"./request-meta\");\nconst _removepathprefix = require(\"../shared/lib/router/utils/remove-path-prefix\");\nconst _apppaths = require(\"../shared/lib/router/utils/app-paths\");\nconst _gethostname = require(\"../shared/lib/get-hostname\");\nconst _parseurl = require(\"../shared/lib/router/utils/parse-url\");\nconst _getnextpathnameinfo = require(\"../shared/lib/router/utils/get-next-pathname-info\");\nconst _approuterheaders = require(\"../client/components/app-router-headers\");\nconst _localeroutenormalizer = require(\"./future/normalizers/locale-route-normalizer\");\nconst _defaultroutematchermanager = require(\"./future/route-matcher-managers/default-route-matcher-manager\");\nconst _apppageroutematcherprovider = require(\"./future/route-matcher-providers/app-page-route-matcher-provider\");\nconst _approuteroutematcherprovider = require(\"./future/route-matcher-providers/app-route-route-matcher-provider\");\nconst _pagesapiroutematcherprovider = require(\"./future/route-matcher-providers/pages-api-route-matcher-provider\");\nconst _pagesroutematcherprovider = require(\"./future/route-matcher-providers/pages-route-matcher-provider\");\nconst _servermanifestloader = require(\"./future/route-matcher-providers/helpers/manifest-loaders/server-manifest-loader\");\nconst _tracer = require(\"./lib/trace/tracer\");\nconst _constants1 = require(\"./lib/trace/constants\");\nconst _i18nprovider = require(\"./future/helpers/i18n-provider\");\nconst _sendresponse = require(\"./send-response\");\nconst _routekind = require(\"./future/route-kind\");\nconst _responsehandlers = require(\"./future/route-modules/helpers/response-handlers\");\nconst _utils3 = require(\"./web/utils\");\nconst _constants2 = require(\"../lib/constants\");\nconst _normalizelocalepath = require(\"../shared/lib/i18n/normalize-locale-path\");\nconst _nextrequest = require(\"./web/spec-extension/adapters/next-request\");\nconst _matchnextdatapathname = require(\"./lib/match-next-data-pathname\");\nconst _getroutefromassetpath = /*#__PURE__*/_interop_require_default(require(\"../shared/lib/router/utils/get-route-from-asset-path\"));\nconst _internalutils = require(\"./internal-utils\");\nconst _rsc = require(\"./future/normalizers/request/rsc\");\nconst _postponed = require(\"./future/normalizers/request/postponed\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nclass NoFallbackError extends Error {}\nclass WrappedBuildError extends Error {\n  constructor(innerError) {\n    super();\n    this.innerError = innerError;\n  }\n}\nclass Server {\n  constructor(options) {\n    var _this_nextConfig_i18n, _this_nextConfig_experimental_amp, _this_nextConfig_i18n1;\n    this.handleRSCRequest = (req, _res, parsedUrl) => {\n      if (!parsedUrl.pathname || !this.normalizers.rsc.match(parsedUrl.pathname)) {\n        return;\n      }\n      parsedUrl.query.__nextDataReq = \"1\";\n      parsedUrl.pathname = this.normalizers.rsc.normalize(parsedUrl.pathname, true);\n      if (req.url) {\n        const parsed = (0, _url.parse)(req.url);\n        parsed.pathname = parsedUrl.pathname;\n        req.url = (0, _url.format)(parsed);\n      }\n    };\n    this.handleNextPostponedRequest = async (req, _res, parsedUrl) => {\n      if (!parsedUrl.pathname || req.method !== \"POST\" || !this.normalizers.postponed.match(parsedUrl.pathname)) {\n        return;\n      }\n      parsedUrl.pathname = this.normalizers.postponed.normalize(parsedUrl.pathname, true);\n      if (req.url) {\n        const parsed = (0, _url.parse)(req.url);\n        parsed.pathname = parsedUrl.pathname;\n        req.url = (0, _url.format)(parsed);\n      }\n      // Read the body in chunks. If it errors here it's because the chunks\n      // being decoded are not strings.\n      let postponed = \"\";\n      for await (const chunk of req.body) {\n        postponed += chunk;\n      }\n      (0, _requestmeta.addRequestMeta)(req, \"postponed\", postponed);\n    };\n    this.handleNextDataRequest = async (req, res, parsedUrl) => {\n      const middleware = this.getMiddleware();\n      const params = (0, _matchnextdatapathname.matchNextDataPathname)(parsedUrl.pathname);\n      // ignore for non-next data URLs\n      if (!params || !params.path) {\n        return false;\n      }\n      if (params.path[0] !== this.buildId) {\n        // Ignore if its a middleware request when we aren't on edge.\n        if (process.env.NEXT_RUNTIME !== \"edge\" && req.headers[\"x-middleware-invoke\"]) {\n          return false;\n        }\n        // Make sure to 404 if the buildId isn't correct\n        await this.render404(req, res, parsedUrl);\n        return true;\n      }\n      // remove buildId from URL\n      params.path.shift();\n      const lastParam = params.path[params.path.length - 1];\n      // show 404 if it doesn't end with .json\n      if (typeof lastParam !== \"string\" || !lastParam.endsWith(\".json\")) {\n        await this.render404(req, res, parsedUrl);\n        return true;\n      }\n      // re-create page's pathname\n      let pathname = `/${params.path.join(\"/\")}`;\n      pathname = (0, _getroutefromassetpath.default)(pathname, \".json\");\n      // ensure trailing slash is normalized per config\n      if (middleware) {\n        if (this.nextConfig.trailingSlash && !pathname.endsWith(\"/\")) {\n          pathname += \"/\";\n        }\n        if (!this.nextConfig.trailingSlash && pathname.length > 1 && pathname.endsWith(\"/\")) {\n          pathname = pathname.substring(0, pathname.length - 1);\n        }\n      }\n      if (this.i18nProvider) {\n        var _req_headers_host;\n        // Remove the port from the hostname if present.\n        const hostname = req == null ? void 0 : (_req_headers_host = req.headers.host) == null ? void 0 : _req_headers_host.split(\":\", 1)[0].toLowerCase();\n        const domainLocale = this.i18nProvider.detectDomainLocale(hostname);\n        const defaultLocale = (domainLocale == null ? void 0 : domainLocale.defaultLocale) ?? this.i18nProvider.config.defaultLocale;\n        const localePathResult = this.i18nProvider.analyze(pathname);\n        // If the locale is detected from the path, we need to remove it\n        // from the pathname.\n        if (localePathResult.detectedLocale) {\n          pathname = localePathResult.pathname;\n        }\n        // Update the query with the detected locale and default locale.\n        parsedUrl.query.__nextLocale = localePathResult.detectedLocale;\n        parsedUrl.query.__nextDefaultLocale = defaultLocale;\n        // If the locale is not detected from the path, we need to mark that\n        // it was not inferred from default.\n        if (!localePathResult.detectedLocale) {\n          delete parsedUrl.query.__nextInferredLocaleFromDefault;\n        }\n        // If no locale was detected and we don't have middleware, we need\n        // to render a 404 page.\n        if (!localePathResult.detectedLocale && !middleware) {\n          parsedUrl.query.__nextLocale = defaultLocale;\n          await this.render404(req, res, parsedUrl);\n          return true;\n        }\n      }\n      parsedUrl.pathname = pathname;\n      parsedUrl.query.__nextDataReq = \"1\";\n      return false;\n    };\n    this.handleNextImageRequest = () => {};\n    this.handleCatchallRenderRequest = () => {};\n    this.handleCatchallMiddlewareRequest = () => {};\n    this.handle = async (req, res, url) => {\n      let finished = await this.handleNextImageRequest(req, res, url);\n      if (finished) return true;\n      finished = await this.handleNextDataRequest(req, res, url);\n      if (finished) return true;\n      if (this.minimalMode && this.hasAppDir) {\n        finished = await this.handleRSCRequest(req, res, url);\n        if (finished) return true;\n        if (this.nextConfig.experimental.ppr) {\n          finished = await this.handleNextPostponedRequest(req, res, url);\n          if (finished) return true;\n        }\n      }\n    };\n    this.prepared = false;\n    this.preparedPromise = null;\n    this.customErrorNo404Warn = (0, _utils.execOnce)(() => {\n      _log.warn(`You have added a custom /_error page without a custom /404 page. This prevents the 404 page from being auto statically optimized.\\nSee here for info: https://nextjs.org/docs/messages/custom-error-no-custom-404`);\n    });\n    const {\n      dir = \".\",\n      quiet = false,\n      conf,\n      dev = false,\n      minimalMode = false,\n      customServer = true,\n      hostname,\n      port\n    } = options;\n    this.serverOptions = options;\n    this.dir = process.env.NEXT_RUNTIME === \"edge\" ? dir : require(\"path\").resolve(dir);\n    this.quiet = quiet;\n    this.loadEnvConfig({\n      dev\n    });\n    // TODO: should conf be normalized to prevent missing\n    // values from causing issues as this can be user provided\n    this.nextConfig = conf;\n    this.hostname = hostname;\n    if (this.hostname) {\n      // we format the hostname so that it can be fetched\n      this.fetchHostname = (0, _formathostname.formatHostname)(this.hostname);\n    }\n    this.port = port;\n    this.distDir = process.env.NEXT_RUNTIME === \"edge\" ? this.nextConfig.distDir : require(\"path\").join(this.dir, this.nextConfig.distDir);\n    this.publicDir = this.getPublicDir();\n    this.hasStaticDir = !minimalMode && this.getHasStaticDir();\n    this.i18nProvider = ((_this_nextConfig_i18n = this.nextConfig.i18n) == null ? void 0 : _this_nextConfig_i18n.locales) ? new _i18nprovider.I18NProvider(this.nextConfig.i18n) : undefined;\n    // Configure the locale normalizer, it's used for routes inside `pages/`.\n    this.localeNormalizer = this.i18nProvider ? new _localeroutenormalizer.LocaleRouteNormalizer(this.i18nProvider) : undefined;\n    // Only serverRuntimeConfig needs the default\n    // publicRuntimeConfig gets it's default in client/index.js\n    const {\n      serverRuntimeConfig = {},\n      publicRuntimeConfig,\n      assetPrefix,\n      generateEtags\n    } = this.nextConfig;\n    this.buildId = this.getBuildId();\n    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode\n    // because we replace this.minimalMode to true in production bundles.\n    const minimalModeKey = \"minimalMode\";\n    this[minimalModeKey] = minimalMode || !!process.env.NEXT_PRIVATE_MINIMAL_MODE;\n    this.hasAppDir = this.getHasAppDir(dev);\n    this.normalizers = {\n      postponed: new _postponed.PostponedPathnameNormalizer(this.hasAppDir && this.nextConfig.experimental.ppr),\n      rsc: new _rsc.RSCPathnameNormalizer(this.hasAppDir)\n    };\n    const serverComponents = this.hasAppDir;\n    this.nextFontManifest = this.getNextFontManifest();\n    if (process.env.NEXT_RUNTIME !== \"edge\") {\n      process.env.NEXT_DEPLOYMENT_ID = this.nextConfig.experimental.deploymentId || \"\";\n    }\n    this.renderOpts = {\n      deploymentId: this.nextConfig.experimental.deploymentId,\n      strictNextHead: !!this.nextConfig.experimental.strictNextHead,\n      poweredByHeader: this.nextConfig.poweredByHeader,\n      canonicalBase: this.nextConfig.amp.canonicalBase || \"\",\n      buildId: this.buildId,\n      generateEtags,\n      previewProps: this.getPrerenderManifest().preview,\n      customServer: customServer === true ? true : undefined,\n      ampOptimizerConfig: (_this_nextConfig_experimental_amp = this.nextConfig.experimental.amp) == null ? void 0 : _this_nextConfig_experimental_amp.optimizer,\n      basePath: this.nextConfig.basePath,\n      images: this.nextConfig.images,\n      optimizeFonts: this.nextConfig.optimizeFonts,\n      fontManifest: this.nextConfig.optimizeFonts && !dev ? this.getFontManifest() : undefined,\n      optimizeCss: this.nextConfig.experimental.optimizeCss,\n      nextConfigOutput: this.nextConfig.output,\n      nextScriptWorkers: this.nextConfig.experimental.nextScriptWorkers,\n      disableOptimizedLoading: this.nextConfig.experimental.disableOptimizedLoading,\n      domainLocales: (_this_nextConfig_i18n1 = this.nextConfig.i18n) == null ? void 0 : _this_nextConfig_i18n1.domains,\n      distDir: this.distDir,\n      serverComponents,\n      enableTainting: this.nextConfig.experimental.taint,\n      crossOrigin: this.nextConfig.crossOrigin ? this.nextConfig.crossOrigin : undefined,\n      largePageDataBytes: this.nextConfig.experimental.largePageDataBytes,\n      // Only the `publicRuntimeConfig` key is exposed to the client side\n      // It'll be rendered as part of __NEXT_DATA__ on the client side\n      runtimeConfig: Object.keys(publicRuntimeConfig).length > 0 ? publicRuntimeConfig : undefined,\n      // @ts-expect-error internal field not publicly exposed\n      isExperimentalCompile: this.nextConfig.experimental.isExperimentalCompile,\n      ppr: this.nextConfig.experimental.ppr === true\n    };\n    // Initialize next/config with the environment configuration\n    (0, _runtimeconfigexternal.setConfig)({\n      serverRuntimeConfig,\n      publicRuntimeConfig\n    });\n    this.pagesManifest = this.getPagesManifest();\n    this.appPathsManifest = this.getAppPathsManifest();\n    this.appPathRoutes = this.getAppPathRoutes();\n    // Configure the routes.\n    this.matchers = this.getRouteMatchers();\n    // Start route compilation. We don't wait for the routes to finish loading\n    // because we use the `waitTillReady` promise below in `handleRequest` to\n    // wait. Also we can't `await` in the constructor.\n    void this.matchers.reload();\n    this.setAssetPrefix(assetPrefix);\n    this.responseCache = this.getResponseCache({\n      dev\n    });\n  }\n  reloadMatchers() {\n    return this.matchers.reload();\n  }\n  getRouteMatchers() {\n    // Create a new manifest loader that get's the manifests from the server.\n    const manifestLoader = new _servermanifestloader.ServerManifestLoader(name => {\n      switch (name) {\n        case _constants.PAGES_MANIFEST:\n          return this.getPagesManifest() ?? null;\n        case _constants.APP_PATHS_MANIFEST:\n          return this.getAppPathsManifest() ?? null;\n        default:\n          return null;\n      }\n    });\n    // Configure the matchers and handlers.\n    const matchers = new _defaultroutematchermanager.DefaultRouteMatcherManager();\n    // Match pages under `pages/`.\n    matchers.push(new _pagesroutematcherprovider.PagesRouteMatcherProvider(this.distDir, manifestLoader, this.i18nProvider));\n    // Match api routes under `pages/api/`.\n    matchers.push(new _pagesapiroutematcherprovider.PagesAPIRouteMatcherProvider(this.distDir, manifestLoader, this.i18nProvider));\n    // If the app directory is enabled, then add the app matchers and handlers.\n    if (this.hasAppDir) {\n      // Match app pages under `app/`.\n      matchers.push(new _apppageroutematcherprovider.AppPageRouteMatcherProvider(this.distDir, manifestLoader));\n      matchers.push(new _approuteroutematcherprovider.AppRouteRouteMatcherProvider(this.distDir, manifestLoader));\n    }\n    return matchers;\n  }\n  logError(err) {\n    if (this.quiet) return;\n    _log.error(err);\n  }\n  async handleRequest(req, res, parsedUrl) {\n    await this.prepare();\n    const method = req.method.toUpperCase();\n    const tracer = (0, _tracer.getTracer)();\n    return tracer.withPropagatedContext(req, () => {\n      return tracer.trace(_constants1.BaseServerSpan.handleRequest, {\n        spanName: `${method} ${req.url}`,\n        kind: _tracer.SpanKind.SERVER,\n        attributes: {\n          \"http.method\": method,\n          \"http.target\": req.url\n        }\n      }, async span => this.handleRequestImpl(req, res, parsedUrl).finally(() => {\n        if (!span) return;\n        span.setAttributes({\n          \"http.status_code\": res.statusCode\n        });\n        const rootSpanAttributes = tracer.getRootSpanAttributes();\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) return;\n        if (rootSpanAttributes.get(\"next.span_type\") !== _constants1.BaseServerSpan.handleRequest) {\n          console.warn(`Unexpected root span type '${rootSpanAttributes.get(\"next.span_type\")}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n          return;\n        }\n        const route = rootSpanAttributes.get(\"next.route\");\n        if (route) {\n          const newName = `${method} ${route}`;\n          span.setAttributes({\n            \"next.route\": route,\n            \"http.route\": route,\n            \"next.span_name\": newName\n          });\n          span.updateName(newName);\n        }\n      }));\n    });\n  }\n  async handleRequestImpl(req, res, parsedUrl) {\n    try {\n      var _this_i18nProvider, _this_nextConfig_i18n;\n      // Wait for the matchers to be ready.\n      await this.matchers.waitTillReady();\n      // ensure cookies set in middleware are merged and\n      // not overridden by API routes/getServerSideProps\n      const _res = res.originalResponse || res;\n      const origSetHeader = _res.setHeader.bind(_res);\n      _res.setHeader = (name, val) => {\n        // When renders /_error after page is failed,\n        // it could attempt to set headers after headers\n        if (_res.headersSent) {\n          return;\n        }\n        if (name.toLowerCase() === \"set-cookie\") {\n          const middlewareValue = (0, _requestmeta.getRequestMeta)(req, \"middlewareCookie\");\n          if (!middlewareValue || !Array.isArray(val) || !val.every((item, idx) => item === middlewareValue[idx])) {\n            val = [\n            // TODO: (wyattjoh) find out why this is called multiple times resulting in duplicate cookies being added\n            ...new Set([...(middlewareValue || []), ...(typeof val === \"string\" ? [val] : Array.isArray(val) ? val : [])])];\n          }\n        }\n        return origSetHeader(name, val);\n      };\n      const urlParts = (req.url || \"\").split(\"?\", 1);\n      const urlNoQuery = urlParts[0];\n      // this normalizes repeated slashes in the path e.g. hello//world ->\n      // hello/world or backslashes to forward slashes, this does not\n      // handle trailing slash as that is handled the same as a next.config.js\n      // redirect\n      if (urlNoQuery == null ? void 0 : urlNoQuery.match(/(\\\\|\\/\\/)/)) {\n        const cleanUrl = (0, _utils.normalizeRepeatedSlashes)(req.url);\n        res.redirect(cleanUrl, 308).body(cleanUrl).send();\n        return;\n      }\n      // Parse url if parsedUrl not provided\n      if (!parsedUrl || typeof parsedUrl !== \"object\") {\n        if (!req.url) {\n          throw new Error(\"Invariant: url can not be undefined\");\n        }\n        parsedUrl = (0, _url.parse)(req.url, true);\n      }\n      if (!parsedUrl.pathname) {\n        throw new Error(\"Invariant: pathname can't be empty\");\n      }\n      // Parse the querystring ourselves if the user doesn't handle querystring parsing\n      if (typeof parsedUrl.query === \"string\") {\n        parsedUrl.query = Object.fromEntries(new URLSearchParams(parsedUrl.query));\n      }\n      let finished = await this.handleRSCRequest(req, res, parsedUrl);\n      if (finished) return;\n      finished = await this.handleNextPostponedRequest(req, res, parsedUrl);\n      if (finished) return;\n      if (this.minimalMode && req.headers[\"x-now-route-matches\"]) {\n        for (const param of _approuterheaders.FLIGHT_PARAMETERS) {\n          delete req.headers[param.toString().toLowerCase()];\n        }\n      }\n      this.attachRequestMeta(req, parsedUrl);\n      const domainLocale = (_this_i18nProvider = this.i18nProvider) == null ? void 0 : _this_i18nProvider.detectDomainLocale((0, _gethostname.getHostname)(parsedUrl, req.headers));\n      const defaultLocale = (domainLocale == null ? void 0 : domainLocale.defaultLocale) || ((_this_nextConfig_i18n = this.nextConfig.i18n) == null ? void 0 : _this_nextConfig_i18n.defaultLocale);\n      parsedUrl.query.__nextDefaultLocale = defaultLocale;\n      const url = (0, _parseurl.parseUrl)(req.url.replace(/^\\/+/, \"/\"));\n      const pathnameInfo = (0, _getnextpathnameinfo.getNextPathnameInfo)(url.pathname, {\n        nextConfig: this.nextConfig,\n        i18nProvider: this.i18nProvider\n      });\n      url.pathname = pathnameInfo.pathname;\n      if (pathnameInfo.basePath) {\n        req.url = (0, _removepathprefix.removePathPrefix)(req.url, this.nextConfig.basePath);\n      }\n      const useMatchedPathHeader = this.minimalMode && typeof req.headers[\"x-matched-path\"] === \"string\";\n      // TODO: merge handling with x-invoke-path\n      if (useMatchedPathHeader) {\n        try {\n          var _this_i18nProvider1, _this_getRoutesManifest;\n          if (this.hasAppDir) {\n            // ensure /index path is normalized for prerender\n            // in minimal mode\n            if (req.url.match(/^\\/index($|\\?)/)) {\n              req.url = req.url.replace(/^\\/index/, \"/\");\n            }\n            parsedUrl.pathname = parsedUrl.pathname === \"/index\" ? \"/\" : parsedUrl.pathname;\n          }\n          // x-matched-path is the source of truth, it tells what page\n          // should be rendered because we don't process rewrites in minimalMode\n          let {\n            pathname: matchedPath\n          } = new URL(req.headers[\"x-matched-path\"], \"http://localhost\");\n          if (this.normalizers.rsc.match(matchedPath)) {\n            matchedPath = this.normalizers.rsc.normalize(matchedPath, true);\n          } else if (this.normalizers.postponed.match(matchedPath)) {\n            matchedPath = this.normalizers.postponed.normalize(matchedPath, true);\n          }\n          let urlPathname = new URL(req.url, \"http://localhost\").pathname;\n          // For ISR  the URL is normalized to the prerenderPath so if\n          // it's a data request the URL path will be the data URL,\n          // basePath is already stripped by this point\n          if (urlPathname.startsWith(`/_next/data/`)) {\n            parsedUrl.query.__nextDataReq = \"1\";\n          }\n          const normalizedUrlPath = this.stripNextDataPath(urlPathname);\n          matchedPath = this.stripNextDataPath(matchedPath, false);\n          // Perform locale detection and normalization.\n          const localeAnalysisResult = (_this_i18nProvider1 = this.i18nProvider) == null ? void 0 : _this_i18nProvider1.analyze(matchedPath, {\n            defaultLocale\n          });\n          // The locale result will be defined even if the locale was not\n          // detected for the request because it will be inferred from the\n          // default locale.\n          if (localeAnalysisResult) {\n            parsedUrl.query.__nextLocale = localeAnalysisResult.detectedLocale;\n            // If the detected locale was inferred from the default locale, we\n            // need to modify the metadata on the request to indicate that.\n            if (localeAnalysisResult.inferredFromDefault) {\n              parsedUrl.query.__nextInferredLocaleFromDefault = \"1\";\n            } else {\n              delete parsedUrl.query.__nextInferredLocaleFromDefault;\n            }\n          }\n          // TODO: check if this is needed any more?\n          matchedPath = (0, _denormalizepagepath.denormalizePagePath)(matchedPath);\n          let srcPathname = matchedPath;\n          const match = await this.matchers.match(matchedPath, {\n            i18n: localeAnalysisResult\n          });\n          // Update the source pathname to the matched page's pathname.\n          if (match) srcPathname = match.definition.pathname;\n          // The page is dynamic if the params are defined.\n          const pageIsDynamic = typeof (match == null ? void 0 : match.params) !== \"undefined\";\n          // The rest of this function can't handle i18n properly, so ensure we\n          // restore the pathname with the locale information stripped from it\n          // now that we're done matching if we're using i18n.\n          if (localeAnalysisResult) {\n            matchedPath = localeAnalysisResult.pathname;\n          }\n          const utils = (0, _serverutils.getUtils)({\n            pageIsDynamic,\n            page: srcPathname,\n            i18n: this.nextConfig.i18n,\n            basePath: this.nextConfig.basePath,\n            rewrites: ((_this_getRoutesManifest = this.getRoutesManifest()) == null ? void 0 : _this_getRoutesManifest.rewrites) || {\n              beforeFiles: [],\n              afterFiles: [],\n              fallback: []\n            },\n            caseSensitive: !!this.nextConfig.experimental.caseSensitiveRoutes\n          });\n          // Ensure parsedUrl.pathname includes locale before processing\n          // rewrites or they won't match correctly.\n          if (defaultLocale && !pathnameInfo.locale) {\n            parsedUrl.pathname = `/${defaultLocale}${parsedUrl.pathname}`;\n          }\n          const pathnameBeforeRewrite = parsedUrl.pathname;\n          const rewriteParams = utils.handleRewrites(req, parsedUrl);\n          const rewriteParamKeys = Object.keys(rewriteParams);\n          const didRewrite = pathnameBeforeRewrite !== parsedUrl.pathname;\n          if (didRewrite && parsedUrl.pathname) {\n            (0, _requestmeta.addRequestMeta)(req, \"rewroteURL\", parsedUrl.pathname);\n          }\n          const routeParamKeys = new Set();\n          for (const key of Object.keys(parsedUrl.query)) {\n            const value = parsedUrl.query[key];\n            if (key !== _constants2.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_constants2.NEXT_QUERY_PARAM_PREFIX)) {\n              const normalizedKey = key.substring(_constants2.NEXT_QUERY_PARAM_PREFIX.length);\n              parsedUrl.query[normalizedKey] = value;\n              routeParamKeys.add(normalizedKey);\n              delete parsedUrl.query[key];\n            }\n          }\n          // interpolate dynamic params and normalize URL if needed\n          if (pageIsDynamic) {\n            let params = {};\n            let paramsResult = utils.normalizeDynamicRouteParams(parsedUrl.query);\n            // for prerendered ISR paths we attempt parsing the route\n            // params from the URL directly as route-matches may not\n            // contain the correct values due to the filesystem path\n            // matching before the dynamic route has been matched\n            if (!paramsResult.hasValidParams && pageIsDynamic && !(0, _utils1.isDynamicRoute)(normalizedUrlPath)) {\n              let matcherParams = utils.dynamicRouteMatcher == null ? void 0 : utils.dynamicRouteMatcher.call(utils, normalizedUrlPath);\n              if (matcherParams) {\n                utils.normalizeDynamicRouteParams(matcherParams);\n                Object.assign(paramsResult.params, matcherParams);\n                paramsResult.hasValidParams = true;\n              }\n            }\n            if (paramsResult.hasValidParams) {\n              params = paramsResult.params;\n            }\n            if (req.headers[\"x-now-route-matches\"] && (0, _utils1.isDynamicRoute)(matchedPath) && !paramsResult.hasValidParams) {\n              const opts = {};\n              const routeParams = utils.getParamsFromRouteMatches(req, opts, parsedUrl.query.__nextLocale || \"\");\n              // If this returns a locale, it means that the locale was detected\n              // from the pathname.\n              if (opts.locale) {\n                parsedUrl.query.__nextLocale = opts.locale;\n                // As the locale was parsed from the pathname, we should mark\n                // that the locale was not inferred as the default.\n                delete parsedUrl.query.__nextInferredLocaleFromDefault;\n              }\n              paramsResult = utils.normalizeDynamicRouteParams(routeParams, true);\n              if (paramsResult.hasValidParams) {\n                params = paramsResult.params;\n              }\n            }\n            // handle the actual dynamic route name being requested\n            if (pageIsDynamic && utils.defaultRouteMatches && normalizedUrlPath === srcPathname && !paramsResult.hasValidParams && !utils.normalizeDynamicRouteParams({\n              ...params\n            }, true).hasValidParams) {\n              params = utils.defaultRouteMatches;\n            }\n            if (params) {\n              matchedPath = utils.interpolateDynamicPath(srcPathname, params);\n              req.url = utils.interpolateDynamicPath(req.url, params);\n            }\n          }\n          if (pageIsDynamic || didRewrite) {\n            var _utils_defaultRouteRegex;\n            utils.normalizeVercelUrl(req, true, [...rewriteParamKeys, ...Object.keys(((_utils_defaultRouteRegex = utils.defaultRouteRegex) == null ? void 0 : _utils_defaultRouteRegex.groups) || {})]);\n          }\n          for (const key of routeParamKeys) {\n            delete parsedUrl.query[key];\n          }\n          parsedUrl.pathname = matchedPath;\n          url.pathname = parsedUrl.pathname;\n          finished = await this.handle(req, res, parsedUrl);\n          if (finished) return;\n        } catch (err) {\n          if (err instanceof _utils.DecodeError || err instanceof _utils.NormalizeError) {\n            res.statusCode = 400;\n            return this.renderError(null, req, res, \"/_error\", {});\n          }\n          throw err;\n        }\n      }\n      if (\n      // Edge runtime always has minimal mode enabled.\n      process.env.NEXT_RUNTIME !== \"edge\" && !this.minimalMode && defaultLocale) {\n        const {\n          getLocaleRedirect\n        } = require(\"../shared/lib/i18n/get-locale-redirect\");\n        const redirect = getLocaleRedirect({\n          defaultLocale,\n          domainLocale,\n          headers: req.headers,\n          nextConfig: this.nextConfig,\n          pathLocale: pathnameInfo.locale,\n          urlParsed: {\n            ...url,\n            pathname: pathnameInfo.locale ? `/${pathnameInfo.locale}${url.pathname}` : url.pathname\n          }\n        });\n        if (redirect) {\n          return res.redirect(redirect, _constants.TEMPORARY_REDIRECT_STATUS).body(redirect).send();\n        }\n      }\n      (0, _requestmeta.addRequestMeta)(req, \"isLocaleDomain\", Boolean(domainLocale));\n      if (pathnameInfo.locale) {\n        req.url = (0, _url.format)(url);\n        (0, _requestmeta.addRequestMeta)(req, \"didStripLocale\", true);\n      }\n      // If we aren't in minimal mode or there is no locale in the query\n      // string, add the locale to the query string.\n      if (!this.minimalMode || !parsedUrl.query.__nextLocale) {\n        // If the locale is in the pathname, add it to the query string.\n        if (pathnameInfo.locale) {\n          parsedUrl.query.__nextLocale = pathnameInfo.locale;\n        } else if (defaultLocale) {\n          parsedUrl.query.__nextLocale = defaultLocale;\n          parsedUrl.query.__nextInferredLocaleFromDefault = \"1\";\n        }\n      }\n      // set incremental cache to request meta so it can\n      // be passed down for edge functions and the fetch disk\n      // cache can be leveraged locally\n      if (!this.serverOptions.webServerConfig && !(0, _requestmeta.getRequestMeta)(req, \"incrementalCache\")) {\n        let protocol = \"https:\";\n        try {\n          const parsedFullUrl = new URL((0, _requestmeta.getRequestMeta)(req, \"initURL\") || \"/\", \"http://n\");\n          protocol = parsedFullUrl.protocol;\n        } catch {}\n        const incrementalCache = this.getIncrementalCache({\n          requestHeaders: Object.assign({}, req.headers),\n          requestProtocol: protocol.substring(0, protocol.length - 1)\n        });\n        (0, _requestmeta.addRequestMeta)(req, \"incrementalCache\", incrementalCache);\n        globalThis.__incrementalCache = incrementalCache;\n      }\n      // when x-invoke-path is specified we can short short circuit resolving\n      // we only honor this header if we are inside of a render worker to\n      // prevent external users coercing the routing path\n      const invokePath = req.headers[\"x-invoke-path\"];\n      const useInvokePath = !useMatchedPathHeader && process.env.NEXT_RUNTIME !== \"edge\" && invokePath;\n      if (useInvokePath) {\n        var _this_nextConfig_i18n1;\n        if (req.headers[\"x-invoke-status\"]) {\n          const invokeQuery = req.headers[\"x-invoke-query\"];\n          if (typeof invokeQuery === \"string\") {\n            Object.assign(parsedUrl.query, JSON.parse(decodeURIComponent(invokeQuery)));\n          }\n          res.statusCode = Number(req.headers[\"x-invoke-status\"]);\n          let err = null;\n          if (typeof req.headers[\"x-invoke-error\"] === \"string\") {\n            const invokeError = JSON.parse(req.headers[\"x-invoke-error\"] || \"{}\");\n            err = new Error(invokeError.message);\n          }\n          return this.renderError(err, req, res, \"/_error\", parsedUrl.query);\n        }\n        const parsedMatchedPath = new URL(invokePath || \"/\", \"http://n\");\n        const invokePathnameInfo = (0, _getnextpathnameinfo.getNextPathnameInfo)(parsedMatchedPath.pathname, {\n          nextConfig: this.nextConfig,\n          parseData: false\n        });\n        if (invokePathnameInfo.locale) {\n          parsedUrl.query.__nextLocale = invokePathnameInfo.locale;\n        }\n        if (parsedUrl.pathname !== parsedMatchedPath.pathname) {\n          parsedUrl.pathname = parsedMatchedPath.pathname;\n          (0, _requestmeta.addRequestMeta)(req, \"rewroteURL\", invokePathnameInfo.pathname);\n        }\n        const normalizeResult = (0, _normalizelocalepath.normalizeLocalePath)((0, _removepathprefix.removePathPrefix)(parsedUrl.pathname, this.nextConfig.basePath || \"\"), ((_this_nextConfig_i18n1 = this.nextConfig.i18n) == null ? void 0 : _this_nextConfig_i18n1.locales) || []);\n        if (normalizeResult.detectedLocale) {\n          parsedUrl.query.__nextLocale = normalizeResult.detectedLocale;\n        }\n        parsedUrl.pathname = normalizeResult.pathname;\n        for (const key of Object.keys(parsedUrl.query)) {\n          if (!key.startsWith(\"__next\") && !key.startsWith(\"_next\")) {\n            delete parsedUrl.query[key];\n          }\n        }\n        const invokeQuery = req.headers[\"x-invoke-query\"];\n        if (typeof invokeQuery === \"string\") {\n          Object.assign(parsedUrl.query, JSON.parse(decodeURIComponent(invokeQuery)));\n        }\n        finished = await this.handle(req, res, parsedUrl);\n        if (finished) return;\n        await this.handleCatchallRenderRequest(req, res, parsedUrl);\n        return;\n      }\n      if (process.env.NEXT_RUNTIME !== \"edge\" && req.headers[\"x-middleware-invoke\"]) {\n        finished = await this.handle(req, res, parsedUrl);\n        if (finished) return;\n        finished = await this.handleCatchallMiddlewareRequest(req, res, parsedUrl);\n        if (finished) return;\n        const err = new Error();\n        err.result = {\n          response: new Response(null, {\n            headers: {\n              \"x-middleware-next\": \"1\"\n            }\n          })\n        };\n        err.bubble = true;\n        throw err;\n      }\n      // This wasn't a request via the matched path or the invoke path, so\n      // prepare for a legacy run by removing the base path.\n      // ensure we strip the basePath when not using an invoke header\n      if (!useMatchedPathHeader && pathnameInfo.basePath) {\n        parsedUrl.pathname = (0, _removepathprefix.removePathPrefix)(parsedUrl.pathname, pathnameInfo.basePath);\n      }\n      res.statusCode = 200;\n      return await this.run(req, res, parsedUrl);\n    } catch (err) {\n      if (err instanceof NoFallbackError) {\n        throw err;\n      }\n      if (err && typeof err === \"object\" && err.code === \"ERR_INVALID_URL\" || err instanceof _utils.DecodeError || err instanceof _utils.NormalizeError) {\n        res.statusCode = 400;\n        return this.renderError(null, req, res, \"/_error\", {});\n      }\n      if (this.minimalMode || this.renderOpts.dev || err.bubble) {\n        throw err;\n      }\n      this.logError((0, _iserror.getProperError)(err));\n      res.statusCode = 500;\n      res.body(\"Internal Server Error\").send();\n    }\n  }\n  /**\n  * @internal - this method is internal to Next.js and should not be used directly by end-users\n  */\n  getRequestHandlerWithMetadata(meta) {\n    return (req, res, parsedUrl) => {\n      (0, _requestmeta.setRequestMeta)(req, meta);\n      return this.handleRequest(req, res, parsedUrl);\n    };\n  }\n  getRequestHandler() {\n    return this.handleRequest.bind(this);\n  }\n  setAssetPrefix(prefix) {\n    this.renderOpts.assetPrefix = prefix ? prefix.replace(/\\/$/, \"\") : \"\";\n  }\n  /**\n  * Runs async initialization of server.\n  * It is idempotent, won't fire underlying initialization more than once.\n  */\n  async prepare() {\n    if (this.prepared) return;\n    if (this.preparedPromise === null) {\n      this.preparedPromise = this.prepareImpl().then(() => {\n        this.prepared = true;\n        this.preparedPromise = null;\n      });\n    }\n    return this.preparedPromise;\n  }\n  async prepareImpl() {}\n  // Backwards compatibility\n  async close() {}\n  getAppPathRoutes() {\n    const appPathRoutes = {};\n    Object.keys(this.appPathsManifest || {}).forEach(entry => {\n      const normalizedPath = (0, _apppaths.normalizeAppPath)(entry);\n      if (!appPathRoutes[normalizedPath]) {\n        appPathRoutes[normalizedPath] = [];\n      }\n      appPathRoutes[normalizedPath].push(entry);\n    });\n    return appPathRoutes;\n  }\n  async run(req, res, parsedUrl) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.run, async () => this.runImpl(req, res, parsedUrl));\n  }\n  async runImpl(req, res, parsedUrl) {\n    await this.handleCatchallRenderRequest(req, res, parsedUrl);\n  }\n  async pipe(fn, partialContext) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.pipe, async () => this.pipeImpl(fn, partialContext));\n  }\n  async pipeImpl(fn, partialContext) {\n    const isBotRequest = (0, _isbot.isBot)(partialContext.req.headers[\"user-agent\"] || \"\");\n    const ctx = {\n      ...partialContext,\n      renderOpts: {\n        ...this.renderOpts,\n        supportsDynamicHTML: !isBotRequest,\n        isBot: !!isBotRequest\n      }\n    };\n    const payload = await fn(ctx);\n    if (payload === null) {\n      return;\n    }\n    const {\n      req,\n      res\n    } = ctx;\n    const {\n      body,\n      type\n    } = payload;\n    let {\n      revalidate\n    } = payload;\n    if (!res.sent) {\n      const {\n        generateEtags,\n        poweredByHeader,\n        dev\n      } = this.renderOpts;\n      // In dev, we should not cache pages for any reason.\n      if (dev) {\n        res.setHeader(\"Cache-Control\", \"no-store, must-revalidate\");\n        revalidate = undefined;\n      }\n      return this.sendRenderResult(req, res, {\n        result: body,\n        type,\n        generateEtags,\n        poweredByHeader,\n        revalidate\n      });\n    }\n  }\n  async getStaticHTML(fn, partialContext) {\n    const ctx = {\n      ...partialContext,\n      renderOpts: {\n        ...this.renderOpts,\n        supportsDynamicHTML: false\n      }\n    };\n    const payload = await fn(ctx);\n    if (payload === null) {\n      return null;\n    }\n    return payload.body.toUnchunkedString();\n  }\n  async render(req, res, pathname, query = {}, parsedUrl, internalRender = false) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.render, async () => this.renderImpl(req, res, pathname, query, parsedUrl, internalRender));\n  }\n  async renderImpl(req, res, pathname, query = {}, parsedUrl, internalRender = false) {\n    var _req_url;\n    if (!pathname.startsWith(\"/\")) {\n      console.warn(`Cannot render page with path \"${pathname}\", did you mean \"/${pathname}\"?. See more info here: https://nextjs.org/docs/messages/render-no-starting-slash`);\n    }\n    if (this.renderOpts.customServer && pathname === \"/index\" && !(await this.hasPage(\"/index\"))) {\n      // maintain backwards compatibility for custom server\n      // (see custom-server integration tests)\n      pathname = \"/\";\n    }\n    // we allow custom servers to call render for all URLs\n    // so check if we need to serve a static _next file or not.\n    // we don't modify the URL for _next/data request but still\n    // call render so we special case this to prevent an infinite loop\n    if (!internalRender && !this.minimalMode && !query.__nextDataReq && (((_req_url = req.url) == null ? void 0 : _req_url.match(/^\\/_next\\//)) || this.hasStaticDir && req.url.match(/^\\/static\\//))) {\n      return this.handleRequest(req, res, parsedUrl);\n    }\n    if ((0, _utils2.isBlockedPage)(pathname)) {\n      return this.render404(req, res, parsedUrl);\n    }\n    return this.pipe(ctx => this.renderToResponse(ctx), {\n      req,\n      res,\n      pathname,\n      query\n    });\n  }\n  async getStaticPaths({\n    pathname\n  }) {\n    var _this_getPrerenderManifest_dynamicRoutes_pathname;\n    // Read whether or not fallback should exist from the manifest.\n    const fallbackField = (_this_getPrerenderManifest_dynamicRoutes_pathname = this.getPrerenderManifest().dynamicRoutes[pathname]) == null ? void 0 : _this_getPrerenderManifest_dynamicRoutes_pathname.fallback;\n    return {\n      // `staticPaths` is intentionally set to `undefined` as it should've\n      // been caught when checking disk data.\n      staticPaths: undefined,\n      fallbackMode: typeof fallbackField === \"string\" ? \"static\" : fallbackField === null ? \"blocking\" : fallbackField\n    };\n  }\n  async renderToResponseWithComponents(requestContext, findComponentsResult) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.renderToResponseWithComponents, async () => this.renderToResponseWithComponentsImpl(requestContext, findComponentsResult));\n  }\n  stripInternalHeaders(req) {\n    // Skip stripping internal headers in test mode while the header stripping\n    // has been explicitly disabled. This allows tests to verify internal\n    // routing behavior.\n    if (process.env.__NEXT_TEST_MODE && process.env.__NEXT_NO_STRIP_INTERNAL_HEADERS === \"1\") {\n      return;\n    }\n    // Strip the internal headers from both the request and the original\n    // request.\n    (0, _internalutils.stripInternalHeaders)(req.headers);\n    if (\"originalRequest\" in req && \"headers\" in req.originalRequest) {\n      (0, _internalutils.stripInternalHeaders)(req.originalRequest.headers);\n    }\n  }\n  async renderToResponseWithComponentsImpl({\n    req,\n    res,\n    pathname,\n    renderOpts: opts\n  }, {\n    components,\n    query\n  }) {\n    var _components_Component, _this_nextConfig_i18n, _this_nextConfig_i18n1;\n    const is404Page =\n    // For edge runtime 404 page, /_not-found needs to be treated as 404 page\n    process.env.NEXT_RUNTIME === \"edge\" && pathname === \"/_not-found\" || pathname === \"/404\";\n    // Strip the internal headers.\n    this.stripInternalHeaders(req);\n    const is500Page = pathname === \"/500\";\n    const isAppPath = components.isAppPath === true;\n    const hasServerProps = !!components.getServerSideProps;\n    let hasStaticPaths = !!components.getStaticPaths;\n    const actionId = req.headers[_approuterheaders.ACTION.toLowerCase()];\n    const contentType = req.headers[\"content-type\"];\n    const isMultipartAction = req.method === \"POST\" && (contentType == null ? void 0 : contentType.startsWith(\"multipart/form-data\"));\n    const isFetchAction = actionId !== undefined && typeof actionId === \"string\" && req.method === \"POST\";\n    const isServerAction = isFetchAction || isMultipartAction;\n    const hasGetInitialProps = !!((_components_Component = components.Component) == null ? void 0 : _components_Component.getInitialProps);\n    let isSSG = !!components.getStaticProps;\n    // Compute the iSSG cache key. We use the rewroteUrl since\n    // pages with fallback: false are allowed to be rewritten to\n    // and we need to look up the path by the rewritten path\n    let urlPathname = (0, _url.parse)(req.url || \"\").pathname || \"/\";\n    let resolvedUrlPathname = (0, _requestmeta.getRequestMeta)(req, \"rewroteURL\") || urlPathname;\n    let staticPaths;\n    let fallbackMode;\n    let hasFallback = false;\n    const isDynamic = (0, _utils1.isDynamicRoute)(components.page);\n    const prerenderManifest = this.getPrerenderManifest();\n    if (isAppPath && isDynamic) {\n      const pathsResult = await this.getStaticPaths({\n        pathname,\n        page: components.page,\n        isAppPath,\n        requestHeaders: req.headers\n      });\n      staticPaths = pathsResult.staticPaths;\n      fallbackMode = pathsResult.fallbackMode;\n      hasFallback = typeof fallbackMode !== \"undefined\";\n      if (this.nextConfig.output === \"export\") {\n        const page = components.page;\n        if (fallbackMode !== \"static\") {\n          throw new Error(`Page \"${page}\" is missing exported function \"generateStaticParams()\", which is required with \"output: export\" config.`);\n        }\n        const resolvedWithoutSlash = (0, _removetrailingslash.removeTrailingSlash)(resolvedUrlPathname);\n        if (!(staticPaths == null ? void 0 : staticPaths.includes(resolvedWithoutSlash))) {\n          throw new Error(`Page \"${page}\" is missing param \"${resolvedWithoutSlash}\" in \"generateStaticParams()\", which is required with \"output: export\" config.`);\n        }\n      }\n      if (hasFallback) {\n        hasStaticPaths = true;\n      }\n    }\n    if (hasFallback || (staticPaths == null ? void 0 : staticPaths.includes(resolvedUrlPathname)) ||\n    // this signals revalidation in deploy environments\n    // TODO: make this more generic\n    req.headers[\"x-now-route-matches\"]) {\n      isSSG = true;\n    } else if (!this.renderOpts.dev) {\n      isSSG ||= !!prerenderManifest.routes[pathname === \"/index\" ? \"/\" : pathname];\n    }\n    // Toggle whether or not this is a Data request\n    let isDataReq = !!(query.__nextDataReq || req.headers[\"x-nextjs-data\"] && this.serverOptions.webServerConfig) && (isSSG || hasServerProps);\n    /**\n    * If true, this indicates that the request being made is for an app\n    * prefetch request.\n    */\n    const isAppPrefetch = req.headers[_approuterheaders.NEXT_ROUTER_PREFETCH.toLowerCase()] === \"1\";\n    // when we are handling a middleware prefetch and it doesn't\n    // resolve to a static data route we bail early to avoid\n    // unexpected SSR invocations\n    if (!isSSG && req.headers[\"x-middleware-prefetch\"] && !(is404Page || pathname === \"/_error\")) {\n      res.setHeader(\"x-middleware-skip\", \"1\");\n      res.setHeader(\"cache-control\", \"private, no-cache, no-store, max-age=0, must-revalidate\");\n      res.body(\"{}\").send();\n      return null;\n    }\n    delete query.__nextDataReq;\n    // normalize req.url for SSG paths as it is not exposed\n    // to getStaticProps and the asPath should not expose /_next/data\n    if (isSSG && this.minimalMode && req.headers[\"x-matched-path\"] && req.url.startsWith(\"/_next/data\")) {\n      req.url = this.stripNextDataPath(req.url);\n    }\n    if (!!req.headers[\"x-nextjs-data\"] && (!res.statusCode || res.statusCode === 200)) {\n      res.setHeader(\"x-nextjs-matched-path\", `${query.__nextLocale ? `/${query.__nextLocale}` : \"\"}${pathname}`);\n    }\n    // Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n    const isFlightRequest = Boolean(req.headers[_approuterheaders.RSC.toLowerCase()]);\n    // If we're in minimal mode, then try to get the postponed information from\n    // the request metadata. If available, use it for resuming the postponed\n    // render.\n    let resumed = null;\n    if (this.minimalMode) {\n      const postponed = (0, _requestmeta.getRequestMeta)(req, \"postponed\");\n      if (postponed) {\n        resumed = {\n          postponed\n        };\n      }\n    }\n    // For pages we need to ensure the correct Vary header is set too, to avoid\n    // caching issues when navigating between pages and app\n    if (!isAppPath && isFlightRequest) {\n      res.setHeader(\"vary\", _approuterheaders.RSC_VARY_HEADER);\n    }\n    // we need to ensure the status code if /404 is visited directly\n    if (is404Page && !isDataReq && !isFlightRequest) {\n      res.statusCode = 404;\n    }\n    // ensure correct status is set when visiting a status page\n    // directly e.g. /500\n    if (_constants.STATIC_STATUS_PAGES.includes(pathname)) {\n      res.statusCode = parseInt(pathname.slice(1), 10);\n    }\n    if (\n    // Server actions can use non-GET/HEAD methods.\n    !isServerAction &&\n    // Resume can use non-GET/HEAD methods.\n    !resumed && !is404Page && !is500Page && pathname !== \"/_error\" && req.method !== \"HEAD\" && req.method !== \"GET\" && (typeof components.Component === \"string\" || isSSG)) {\n      res.statusCode = 405;\n      res.setHeader(\"Allow\", [\"GET\", \"HEAD\"]);\n      await this.renderError(null, req, res, pathname);\n      return null;\n    }\n    // handle static page\n    if (typeof components.Component === \"string\") {\n      return {\n        type: \"html\",\n        // TODO: Static pages should be serialized as RenderResult\n        body: _renderresult.default.fromStatic(components.Component)\n      };\n    }\n    if (!query.amp) {\n      delete query.amp;\n    }\n    if (opts.supportsDynamicHTML === true) {\n      var _components_Document;\n      const isBotRequest = (0, _isbot.isBot)(req.headers[\"user-agent\"] || \"\");\n      const isSupportedDocument = typeof ((_components_Document = components.Document) == null ? void 0 : _components_Document.getInitialProps) !== \"function\" ||\n      // The built-in `Document` component also supports dynamic HTML for concurrent mode.\n      _constants.NEXT_BUILTIN_DOCUMENT in components.Document;\n      // Disable dynamic HTML in cases that we know it won't be generated,\n      // so that we can continue generating a cache key when possible.\n      // TODO-APP: should the first render for a dynamic app path\n      // be static so we can collect revalidate and populate the\n      // cache if there are no dynamic data requirements\n      opts.supportsDynamicHTML = !isSSG && !isBotRequest && !query.amp && isSupportedDocument;\n      opts.isBot = isBotRequest;\n    }\n    // In development, we always want to generate dynamic HTML.\n    if (!isDataReq && isAppPath && opts.dev && opts.supportsDynamicHTML === false) {\n      opts.supportsDynamicHTML = true;\n    }\n    const defaultLocale = isSSG ? (_this_nextConfig_i18n = this.nextConfig.i18n) == null ? void 0 : _this_nextConfig_i18n.defaultLocale : query.__nextDefaultLocale;\n    const locale = query.__nextLocale;\n    const locales = (_this_nextConfig_i18n1 = this.nextConfig.i18n) == null ? void 0 : _this_nextConfig_i18n1.locales;\n    let previewData;\n    let isPreviewMode = false;\n    if (hasServerProps || isSSG) {\n      // For the edge runtime, we don't support preview mode in SSG.\n      if (process.env.NEXT_RUNTIME !== \"edge\") {\n        const {\n          tryGetPreviewData\n        } = require(\"./api-utils/node/try-get-preview-data\");\n        previewData = tryGetPreviewData(req, res, this.renderOpts.previewProps);\n        isPreviewMode = previewData !== false;\n      }\n    }\n    if (isAppPath) {\n      res.setHeader(\"vary\", _approuterheaders.RSC_VARY_HEADER);\n      // We don't clear RSC headers in development since SSG doesn't apply\n      // These headers are cleared for SSG as we need to always generate the\n      // full RSC response for ISR\n      if (!this.renderOpts.dev && !isPreviewMode && isSSG && req.headers[_approuterheaders.RSC.toLowerCase()]) {\n        if (!this.minimalMode) {\n          isDataReq = true;\n        }\n        // strip header so we generate HTML still\n        if (!(0, _isedgeruntime.isEdgeRuntime)(opts.runtime) || this.serverOptions.webServerConfig) {\n          for (const param of _approuterheaders.FLIGHT_PARAMETERS) {\n            delete req.headers[param.toString().toLowerCase()];\n          }\n        }\n      }\n    }\n    let isOnDemandRevalidate = false;\n    let revalidateOnlyGenerated = false;\n    if (isSSG) {\n      ({\n        isOnDemandRevalidate,\n        revalidateOnlyGenerated\n      } = (0, _apiutils.checkIsOnDemandRevalidate)(req, this.renderOpts.previewProps));\n    }\n    if (isSSG && this.minimalMode && req.headers[\"x-matched-path\"]) {\n      // the url value is already correct when the matched-path header is set\n      resolvedUrlPathname = urlPathname;\n    }\n    urlPathname = (0, _removetrailingslash.removeTrailingSlash)(urlPathname);\n    resolvedUrlPathname = (0, _removetrailingslash.removeTrailingSlash)(resolvedUrlPathname);\n    if (this.localeNormalizer) {\n      resolvedUrlPathname = this.localeNormalizer.normalize(resolvedUrlPathname);\n    }\n    const handleRedirect = pageData => {\n      const redirect = {\n        destination: pageData.pageProps.__N_REDIRECT,\n        statusCode: pageData.pageProps.__N_REDIRECT_STATUS,\n        basePath: pageData.pageProps.__N_REDIRECT_BASE_PATH\n      };\n      const statusCode = (0, _redirectstatus.getRedirectStatus)(redirect);\n      const {\n        basePath\n      } = this.nextConfig;\n      if (basePath && redirect.basePath !== false && redirect.destination.startsWith(\"/\")) {\n        redirect.destination = `${basePath}${redirect.destination}`;\n      }\n      if (redirect.destination.startsWith(\"/\")) {\n        redirect.destination = (0, _utils.normalizeRepeatedSlashes)(redirect.destination);\n      }\n      res.redirect(redirect.destination, statusCode).body(redirect.destination).send();\n    };\n    // remove /_next/data prefix from urlPathname so it matches\n    // for direct page visit and /_next/data visit\n    if (isDataReq) {\n      resolvedUrlPathname = this.stripNextDataPath(resolvedUrlPathname);\n      urlPathname = this.stripNextDataPath(urlPathname);\n    }\n    let ssgCacheKey = null;\n    if (!isPreviewMode && isSSG && !opts.supportsDynamicHTML && !isServerAction && !resumed) {\n      ssgCacheKey = `${locale ? `/${locale}` : \"\"}${(pathname === \"/\" || resolvedUrlPathname === \"/\") && locale ? \"\" : resolvedUrlPathname}${query.amp ? \".amp\" : \"\"}`;\n    }\n    if ((is404Page || is500Page) && isSSG) {\n      ssgCacheKey = `${locale ? `/${locale}` : \"\"}${pathname}${query.amp ? \".amp\" : \"\"}`;\n    }\n    if (ssgCacheKey) {\n      // we only encode path delimiters for path segments from\n      // getStaticPaths so we need to attempt decoding the URL\n      // to match against and only escape the path delimiters\n      // this allows non-ascii values to be handled e.g. Japanese characters\n      // TODO: investigate adding this handling for non-SSG pages so\n      // non-ascii names work there also\n      ssgCacheKey = ssgCacheKey.split(\"/\").map(seg => {\n        try {\n          seg = (0, _escapepathdelimiters.default)(decodeURIComponent(seg), true);\n        } catch (_) {\n          // An improperly encoded URL was provided\n          throw new _utils.DecodeError(\"failed to decode param\");\n        }\n        return seg;\n      }).join(\"/\");\n      // ensure /index and / is normalized to one key\n      ssgCacheKey = ssgCacheKey === \"/index\" && pathname === \"/\" ? \"/\" : ssgCacheKey;\n    }\n    let protocol = \"https:\";\n    try {\n      const parsedFullUrl = new URL((0, _requestmeta.getRequestMeta)(req, \"initURL\") || \"/\", \"http://n\");\n      protocol = parsedFullUrl.protocol;\n    } catch {}\n    // use existing incrementalCache instance if available\n    const incrementalCache = globalThis.__incrementalCache || this.getIncrementalCache({\n      requestHeaders: Object.assign({}, req.headers),\n      requestProtocol: protocol.substring(0, protocol.length - 1)\n    });\n    const doRender = async postponed => {\n      var _this_nextConfig_experimental_serverActions, _components_routeModule, _components_routeModule1, _components_routeModule2;\n      // In development, we always want to generate dynamic HTML.\n      const supportsDynamicHTML = !isDataReq && opts.dev || !(isSSG || hasStaticPaths) || !!postponed;\n      let headers;\n      const origQuery = (0, _url.parse)(req.url || \"\", true).query;\n      // clear any dynamic route params so they aren't in\n      // the resolvedUrl\n      if (opts.params) {\n        Object.keys(opts.params).forEach(key => {\n          delete origQuery[key];\n        });\n      }\n      const hadTrailingSlash = urlPathname !== \"/\" && this.nextConfig.trailingSlash;\n      const resolvedUrl = (0, _url.format)({\n        pathname: `${resolvedUrlPathname}${hadTrailingSlash ? \"/\" : \"\"}`,\n        // make sure to only add query values from original URL\n        query: origQuery\n      });\n      const renderOpts = {\n        ...components,\n        ...opts,\n        ...(isAppPath ? {\n          incrementalCache,\n          isRevalidate: isSSG,\n          originalPathname: components.ComponentMod.originalPathname,\n          serverActionsBodySizeLimit: (_this_nextConfig_experimental_serverActions = this.nextConfig.experimental.serverActions) == null ? void 0 : _this_nextConfig_experimental_serverActions.bodySizeLimit\n        } : {}),\n        isDataReq,\n        resolvedUrl,\n        locale,\n        locales,\n        defaultLocale,\n        // For getServerSideProps and getInitialProps we need to ensure we use the original URL\n        // and not the resolved URL to prevent a hydration mismatch on\n        // asPath\n        resolvedAsPath: hasServerProps || hasGetInitialProps ? (0, _url.format)({\n          // we use the original URL pathname less the _next/data prefix if\n          // present\n          pathname: `${urlPathname}${hadTrailingSlash ? \"/\" : \"\"}`,\n          query: origQuery\n        }) : resolvedUrl,\n        supportsDynamicHTML,\n        isOnDemandRevalidate,\n        isDraftMode: isPreviewMode,\n        isServerAction,\n        postponed\n      };\n      // Legacy render methods will return a render result that needs to be\n      // served by the server.\n      let result;\n      if (((_components_routeModule = components.routeModule) == null ? void 0 : _components_routeModule.definition.kind) === _routekind.RouteKind.APP_ROUTE) {\n        const routeModule = components.routeModule;\n        const context = {\n          params: opts.params,\n          prerenderManifest,\n          renderOpts: {\n            // App Route's cannot postpone, so don't enable it.\n            ppr: false,\n            originalPathname: components.ComponentMod.originalPathname,\n            supportsDynamicHTML,\n            incrementalCache,\n            isRevalidate: isSSG\n          }\n        };\n        try {\n          const request = _nextrequest.NextRequestAdapter.fromBaseNextRequest(req, (0, _nextrequest.signalFromNodeResponse)(res.originalResponse));\n          const response = await routeModule.handle(request, context);\n          req.fetchMetrics = context.renderOpts.fetchMetrics;\n          const cacheTags = context.renderOpts.fetchTags;\n          // If the request is for a static response, we can cache it so long\n          // as it's not edge.\n          if (isSSG && process.env.NEXT_RUNTIME !== \"edge\") {\n            var _context_renderOpts_store;\n            const blob = await response.blob();\n            // Copy the headers from the response.\n            headers = (0, _utils3.toNodeOutgoingHttpHeaders)(response.headers);\n            if (cacheTags) {\n              headers[_constants2.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n            }\n            if (!headers[\"content-type\"] && blob.type) {\n              headers[\"content-type\"] = blob.type;\n            }\n            const revalidate = ((_context_renderOpts_store = context.renderOpts.store) == null ? void 0 : _context_renderOpts_store.revalidate) ?? false;\n            // Create the cache entry for the response.\n            const cacheEntry = {\n              value: {\n                kind: \"ROUTE\",\n                status: response.status,\n                body: Buffer.from(await blob.arrayBuffer()),\n                headers\n              },\n              revalidate\n            };\n            return cacheEntry;\n          }\n          // Send the response now that we have copied it into the cache.\n          await (0, _sendresponse.sendResponse)(req, res, response, context.renderOpts.waitUntil);\n          return null;\n        } catch (err) {\n          // If this is during static generation, throw the error again.\n          if (isSSG) throw err;\n          _log.error(err);\n          // Otherwise, send a 500 response.\n          await (0, _sendresponse.sendResponse)(req, res, (0, _responsehandlers.handleInternalServerErrorResponse)());\n          return null;\n        }\n      } else if (((_components_routeModule1 = components.routeModule) == null ? void 0 : _components_routeModule1.definition.kind) === _routekind.RouteKind.PAGES) {\n        const module1 = components.routeModule;\n        // Due to the way we pass data by mutating `renderOpts`, we can't extend\n        // the object here but only updating its `clientReferenceManifest` and\n        // `nextFontManifest` properties.\n        // https://github.com/vercel/next.js/blob/df7cbd904c3bd85f399d1ce90680c0ecf92d2752/packages/next/server/render.tsx#L947-L952\n        renderOpts.nextFontManifest = this.nextFontManifest;\n        renderOpts.clientReferenceManifest = components.clientReferenceManifest;\n        // Call the built-in render method on the module.\n        result = await module1.render(req.originalRequest ?? req, res.originalResponse ?? res, {\n          page: pathname,\n          params: opts.params,\n          query,\n          renderOpts\n        });\n      } else if (((_components_routeModule2 = components.routeModule) == null ? void 0 : _components_routeModule2.definition.kind) === _routekind.RouteKind.APP_PAGE) {\n        if (isAppPrefetch && process.env.NODE_ENV === \"production\") {\n          try {\n            const prefetchRsc = await this.getPrefetchRsc(resolvedUrlPathname);\n            if (prefetchRsc) {\n              res.setHeader(\"cache-control\", \"private, no-cache, no-store, max-age=0, must-revalidate\");\n              res.setHeader(\"content-type\", _approuterheaders.RSC_CONTENT_TYPE_HEADER);\n              res.body(prefetchRsc).send();\n              return null;\n            }\n          } catch {\n            // We fallback to invoking the function if prefetch data is not\n            // available.\n          }\n        }\n        const module1 = components.routeModule;\n        // Due to the way we pass data by mutating `renderOpts`, we can't extend the\n        // object here but only updating its `nextFontManifest` field.\n        // https://github.com/vercel/next.js/blob/df7cbd904c3bd85f399d1ce90680c0ecf92d2752/packages/next/server/render.tsx#L947-L952\n        renderOpts.nextFontManifest = this.nextFontManifest;\n        // Call the built-in render method on the module.\n        result = await module1.render(req.originalRequest ?? req, res.originalResponse ?? res, {\n          page: is404Page ? \"/404\" : pathname,\n          params: opts.params,\n          query,\n          renderOpts\n        });\n      } else {\n        // If we didn't match a page, we should fallback to using the legacy\n        // render method.\n        result = await this.renderHTML(req, res, pathname, query, renderOpts);\n      }\n      const {\n        metadata\n      } = result;\n      // Add any fetch tags that were on the page to the response headers.\n      const cacheTags = metadata.fetchTags;\n      if (cacheTags) {\n        headers = {\n          [_constants2.NEXT_CACHE_TAGS_HEADER]: cacheTags\n        };\n      }\n      req.fetchMetrics = metadata.fetchMetrics;\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (isAppPath && isSSG && metadata.revalidate === 0 && !this.renderOpts.dev) {\n        const staticBailoutInfo = metadata.staticBailoutInfo || {};\n        const err = new Error(`Page changed from static to dynamic at runtime ${urlPathname}${staticBailoutInfo.description ? `, reason: ${staticBailoutInfo.description}` : ``}` + `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`);\n        if (staticBailoutInfo.stack) {\n          const stack = staticBailoutInfo.stack;\n          err.stack = err.message + stack.substring(stack.indexOf(\"\\n\"));\n        }\n        throw err;\n      }\n      // Based on the metadata, we can determine what kind of cache result we\n      // should return.\n      // Handle `isNotFound`.\n      if (metadata.isNotFound) {\n        return {\n          value: null,\n          revalidate: metadata.revalidate\n        };\n      }\n      // Handle `isRedirect`.\n      if (metadata.isRedirect) {\n        return {\n          value: {\n            kind: \"REDIRECT\",\n            props: metadata.pageData\n          },\n          revalidate: metadata.revalidate\n        };\n      }\n      // Handle `isNull`.\n      if (result.isNull) {\n        return null;\n      }\n      // We now have a valid HTML result that we can return to the user.\n      return {\n        value: {\n          kind: \"PAGE\",\n          html: result,\n          pageData: metadata.pageData,\n          postponed: metadata.postponed,\n          headers,\n          status: isAppPath ? res.statusCode : undefined\n        },\n        revalidate: metadata.revalidate\n      };\n    };\n    const cacheEntry = await this.responseCache.get(ssgCacheKey, async (hasResolved, previousCacheEntry) => {\n      // If this is a resume request, get the postponed.\n      const postponed = resumed ? resumed.postponed : undefined;\n      const isProduction = !this.renderOpts.dev;\n      const didRespond = hasResolved || res.sent;\n      if (!staticPaths) {\n        ({\n          staticPaths,\n          fallbackMode\n        } = hasStaticPaths ? await this.getStaticPaths({\n          pathname,\n          requestHeaders: req.headers,\n          isAppPath,\n          page: components.page\n        }) : {\n          staticPaths: undefined,\n          fallbackMode: false\n        });\n      }\n      if (fallbackMode === \"static\" && (0, _isbot.isBot)(req.headers[\"user-agent\"] || \"\")) {\n        fallbackMode = \"blocking\";\n      }\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry && !this.minimalMode) {\n        await this.render404(req, res);\n        return null;\n      }\n      if ((previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) === -1) {\n        isOnDemandRevalidate = true;\n      }\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (isOnDemandRevalidate && (fallbackMode !== false || previousCacheEntry)) {\n        fallbackMode = \"blocking\";\n      }\n      // We use `ssgCacheKey` here as it is normalized to match the encoding\n      // from getStaticPaths along with including the locale.\n      //\n      // We use the `resolvedUrlPathname` for the development case when this\n      // is an app path since it doesn't include locale information.\n      let staticPathKey = ssgCacheKey ?? (opts.dev && isAppPath ? resolvedUrlPathname : null);\n      if (staticPathKey && query.amp) {\n        staticPathKey = staticPathKey.replace(/\\.amp$/, \"\");\n      }\n      const isPageIncludedInStaticPaths = staticPathKey && (staticPaths == null ? void 0 : staticPaths.includes(staticPathKey));\n      if (this.nextConfig.experimental.isExperimentalCompile) {\n        fallbackMode = \"blocking\";\n      }\n      // When we did not respond from cache, we need to choose to block on\n      // rendering or return a skeleton.\n      //\n      // - Data requests always block.\n      // - Blocking mode fallback always blocks.\n      // - Preview mode toggles all pages to be resolved in a blocking manner.\n      // - Non-dynamic pages should block (though this is an impossible\n      //   case in production).\n      // - Dynamic pages should return their skeleton if not defined in\n      //   getStaticPaths, then finish the data request on the client-side.\n      //\n      if (process.env.NEXT_RUNTIME !== \"edge\" && !this.minimalMode && fallbackMode !== \"blocking\" && staticPathKey && !didRespond && !isPreviewMode && isDynamic && (isProduction || !staticPaths || !isPageIncludedInStaticPaths)) {\n        if (\n        // In development, fall through to render to handle missing\n        // getStaticPaths.\n        (isProduction || staticPaths && (staticPaths == null ? void 0 : staticPaths.length) > 0) &&\n        // When fallback isn't present, abort this render so we 404\n        fallbackMode !== \"static\") {\n          throw new NoFallbackError();\n        }\n        if (!isDataReq) {\n          // Production already emitted the fallback as static HTML.\n          if (isProduction) {\n            const html = await this.getFallback(locale ? `/${locale}${pathname}` : pathname);\n            return {\n              value: {\n                kind: \"PAGE\",\n                html: _renderresult.default.fromStatic(html),\n                postponed: undefined,\n                status: undefined,\n                headers: undefined,\n                pageData: {}\n              }\n            };\n          } else {\n            query.__nextFallback = \"true\";\n            // We pass `undefined` as there cannot be a postponed state in\n            // development.\n            const result = await doRender(undefined);\n            if (!result) {\n              return null;\n            }\n            // Prevent caching this result\n            delete result.revalidate;\n            return result;\n          }\n        }\n      }\n      const result = await doRender(postponed);\n      if (!result) {\n        return null;\n      }\n      return {\n        ...result,\n        revalidate: result.revalidate !== undefined ? result.revalidate : /* default to minimum revalidate (this should be an invariant) */1\n      };\n    }, {\n      incrementalCache,\n      isOnDemandRevalidate: isOnDemandRevalidate,\n      isPrefetch: req.headers.purpose === \"prefetch\"\n    });\n    if (!cacheEntry) {\n      if (ssgCacheKey && !(isOnDemandRevalidate && revalidateOnlyGenerated)) {\n        // A cache entry might not be generated if a response is written\n        // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n        // have a cache key. If we do have a cache key but we don't end up\n        // with a cache entry, then either Next.js or the application has a\n        // bug that needs fixing.\n        throw new Error(\"invariant: cache entry required but not generated\");\n      }\n      return null;\n    }\n    if (isSSG && !this.minimalMode) {\n      // set x-nextjs-cache header to match the header\n      // we set for the image-optimizer\n      res.setHeader(\"x-nextjs-cache\", isOnDemandRevalidate ? \"REVALIDATED\" : cacheEntry.isMiss ? \"MISS\" : cacheEntry.isStale ? \"STALE\" : \"HIT\");\n    }\n    const {\n      value: cachedData\n    } = cacheEntry;\n    // If the cache value is an image, we should error early.\n    if ((cachedData == null ? void 0 : cachedData.kind) === \"IMAGE\") {\n      throw new Error(\"invariant SSG should not return an image cache value\");\n    }\n    // Coerce the revalidate parameter from the render.\n    let revalidate;\n    if (typeof cacheEntry.revalidate !== \"undefined\" && (!this.renderOpts.dev || hasServerProps && !isDataReq)) {\n      if (isPreviewMode || is404Page && !isDataReq) {\n        revalidate = 0;\n      } else if (!isSSG) {\n        if (!res.getHeader(\"Cache-Control\")) {\n          revalidate = 0;\n        }\n      } else if (typeof cacheEntry.revalidate === \"number\") {\n        if (cacheEntry.revalidate < 1) {\n          throw new Error(`Invariant: invalid Cache-Control duration provided: ${cacheEntry.revalidate} < 1`);\n        }\n        revalidate = cacheEntry.revalidate;\n      } else if (typeof cacheEntry.revalidate === \"boolean\") {\n        revalidate = _constants2.CACHE_ONE_YEAR;\n      }\n    }\n    cacheEntry.revalidate = revalidate;\n    // If there's a callback for `onCacheEntry`, call it with the cache entry\n    // and the revalidate options.\n    const onCacheEntry = (0, _requestmeta.getRequestMeta)(req, \"onCacheEntry\");\n    if (onCacheEntry) {\n      const finished = await onCacheEntry(cacheEntry);\n      if (finished) {\n        // TODO: maybe we have to end the request?\n        return null;\n      }\n    }\n    if (!cachedData) {\n      if (cacheEntry.revalidate) {\n        res.setHeader(\"Cache-Control\", (0, _revalidate.formatRevalidate)(cacheEntry.revalidate));\n      }\n      if (isDataReq) {\n        res.statusCode = 404;\n        res.body('{\"notFound\":true}').send();\n        return null;\n      }\n      if (this.renderOpts.dev) {\n        query.__nextNotFoundSrcPage = pathname;\n      }\n      await this.render404(req, res, {\n        pathname,\n        query\n      }, false);\n      return null;\n    } else if (cachedData.kind === \"REDIRECT\") {\n      if (cacheEntry.revalidate) {\n        res.setHeader(\"Cache-Control\", (0, _revalidate.formatRevalidate)(cacheEntry.revalidate));\n      }\n      if (isDataReq) {\n        return {\n          type: \"json\",\n          body: _renderresult.default.fromStatic(\n          // @TODO: Handle flight data.\n          JSON.stringify(cachedData.props)),\n          revalidate: cacheEntry.revalidate\n        };\n      } else {\n        await handleRedirect(cachedData.props);\n        return null;\n      }\n    } else if (cachedData.kind === \"ROUTE\") {\n      const headers = {\n        ...cachedData.headers\n      };\n      if (!(this.minimalMode && isSSG)) {\n        delete headers[_constants2.NEXT_CACHE_TAGS_HEADER];\n      }\n      await (0, _sendresponse.sendResponse)(req, res, new Response(cachedData.body, {\n        headers: (0, _utils3.fromNodeOutgoingHttpHeaders)(headers),\n        status: cachedData.status || 200\n      }));\n      return null;\n    } else if (isAppPath) {\n      var _cachedData_headers;\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (cachedData.postponed && resumed) {\n        throw new Error(\"Invariant: postponed state should not be present on a resume request\");\n      }\n      if (this.minimalMode && isSSG && ((_cachedData_headers = cachedData.headers) == null ? void 0 : _cachedData_headers[_constants2.NEXT_CACHE_TAGS_HEADER])) {\n        res.setHeader(_constants2.NEXT_CACHE_TAGS_HEADER, cachedData.headers[_constants2.NEXT_CACHE_TAGS_HEADER]);\n      }\n      if (isDataReq && typeof cachedData.pageData !== \"string\") {\n        throw new Error(\"invariant: Expected pageData to be a string for app data request but received \" + typeof cachedData.pageData + \". This is a bug in Next.js.\");\n      }\n      if (cachedData.status) {\n        res.statusCode = cachedData.status;\n      }\n      // Mark that the request did postpone if this is a data request or we're\n      // testing. It's used to verify that we're actually serving a postponed\n      // request so we can trust the cache headers.\n      if (cachedData.postponed && (isDataReq || process.env.__NEXT_TEST_MODE)) {\n        res.setHeader(_constants2.NEXT_DID_POSTPONE_HEADER, \"1\");\n      }\n      if (isDataReq) {\n        // If this isn't a prefetch and this isn't a resume request, we  want to\n        // respond with the dynamic flight data. In the case that this is a\n        // resume request the page data will already be dynamic.\n        if (!isAppPrefetch && !resumed) {\n          var _result_value;\n          const result = await doRender(cachedData.postponed);\n          if (!result) {\n            return null;\n          }\n          if (((_result_value = result.value) == null ? void 0 : _result_value.kind) !== \"PAGE\") {\n            throw new Error(\"Invariant: Expected a page response\");\n          }\n          if (!result.value.pageData) {\n            throw new Error(\"Invariant: Expected pageData to be present\");\n          }\n          return {\n            type: \"rsc\",\n            body: _renderresult.default.fromStatic(result.value.pageData),\n            revalidate: cacheEntry.revalidate\n          };\n        }\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return {\n          type: \"rsc\",\n          body: _renderresult.default.fromStatic(cachedData.pageData),\n          revalidate: cacheEntry.revalidate\n        };\n      }\n      // This is a request for HTML data.\n      let body = cachedData.html;\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!cachedData.postponed) {\n        return {\n          type: \"html\",\n          body,\n          revalidate: cacheEntry.revalidate\n        };\n      }\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream();\n      body.chain(transformer.readable);\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender(cachedData.postponed).then(async result => {\n        var _result_value;\n        if (!result) {\n          throw new Error(\"Invariant: expected a result to be returned\");\n        }\n        if (((_result_value = result.value) == null ? void 0 : _result_value.kind) !== \"PAGE\") {\n          var _result_value1;\n          throw new Error(`Invariant: expected a page response, got ${(_result_value1 = result.value) == null ? void 0 : _result_value1.kind}`);\n        }\n        // Pipe the resume result to the transformer.\n        await result.value.html.pipeTo(transformer.writable);\n      }).catch(err => {\n        // An error occurred during piping or preparing the render, abort\n        // the transformers writer so we can terminate the stream.\n        transformer.writable.abort(err).catch(e => {\n          console.error(\"couldn't abort transformer\", e);\n        });\n      });\n      return {\n        type: \"html\",\n        body,\n        revalidate: cacheEntry.revalidate\n      };\n    } else if (isDataReq) {\n      return {\n        type: \"json\",\n        body: _renderresult.default.fromStatic(JSON.stringify(cachedData.pageData)),\n        revalidate: cacheEntry.revalidate\n      };\n    } else {\n      return {\n        type: \"html\",\n        body: cachedData.html,\n        revalidate: cacheEntry.revalidate\n      };\n    }\n  }\n  stripNextDataPath(path, stripLocale = true) {\n    if (path.includes(this.buildId)) {\n      const splitPath = path.substring(path.indexOf(this.buildId) + this.buildId.length);\n      path = (0, _denormalizepagepath.denormalizePagePath)(splitPath.replace(/\\.json$/, \"\"));\n    }\n    if (this.localeNormalizer && stripLocale) {\n      return this.localeNormalizer.normalize(path);\n    }\n    return path;\n  }\n  // map the route to the actual bundle name\n  getOriginalAppPaths(route) {\n    if (this.hasAppDir) {\n      var _this_appPathRoutes;\n      const originalAppPath = (_this_appPathRoutes = this.appPathRoutes) == null ? void 0 : _this_appPathRoutes[route];\n      if (!originalAppPath) {\n        return null;\n      }\n      return originalAppPath;\n    }\n    return null;\n  }\n  async renderPageComponent(ctx, bubbleNoFallback) {\n    var _this_nextConfig_experimental_sri;\n    const {\n      query,\n      pathname\n    } = ctx;\n    const appPaths = this.getOriginalAppPaths(pathname);\n    const isAppPath = Array.isArray(appPaths);\n    let page = pathname;\n    if (isAppPath) {\n      // the last item in the array is the root page, if there are parallel routes\n      page = appPaths[appPaths.length - 1];\n    }\n    const result = await this.findPageComponents({\n      page,\n      query,\n      params: ctx.renderOpts.params || {},\n      isAppPath,\n      sriEnabled: !!((_this_nextConfig_experimental_sri = this.nextConfig.experimental.sri) == null ? void 0 : _this_nextConfig_experimental_sri.algorithm),\n      appPaths,\n      // Ensuring for loading page component routes is done via the matcher.\n      shouldEnsure: false\n    });\n    if (result) {\n      try {\n        return await this.renderToResponseWithComponents(ctx, result);\n      } catch (err) {\n        const isNoFallbackError = err instanceof NoFallbackError;\n        if (!isNoFallbackError || isNoFallbackError && bubbleNoFallback) {\n          throw err;\n        }\n      }\n    }\n    return false;\n  }\n  async renderToResponse(ctx) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.renderToResponse, {\n      spanName: `rendering page`,\n      attributes: {\n        \"next.route\": ctx.pathname\n      }\n    }, async () => {\n      return this.renderToResponseImpl(ctx);\n    });\n  }\n  async renderToResponseImpl(ctx) {\n    var _this_i18nProvider;\n    const {\n      res,\n      query,\n      pathname\n    } = ctx;\n    let page = pathname;\n    const bubbleNoFallback = !!query._nextBubbleNoFallback;\n    delete query[_approuterheaders.NEXT_RSC_UNION_QUERY];\n    delete query._nextBubbleNoFallback;\n    const options = {\n      i18n: (_this_i18nProvider = this.i18nProvider) == null ? void 0 : _this_i18nProvider.fromQuery(pathname, query)\n    };\n    try {\n      for await (const match of this.matchers.matchAll(pathname, options)) {\n        // when a specific invoke-output is meant to be matched\n        // ensure a prior dynamic route/page doesn't take priority\n        const invokeOutput = ctx.req.headers[\"x-invoke-output\"];\n        if (!this.minimalMode && typeof invokeOutput === \"string\" && (0, _utils1.isDynamicRoute)(invokeOutput || \"\") && invokeOutput !== match.definition.pathname) {\n          continue;\n        }\n        const result = await this.renderPageComponent({\n          ...ctx,\n          pathname: match.definition.pathname,\n          renderOpts: {\n            ...ctx.renderOpts,\n            params: match.params\n          }\n        }, bubbleNoFallback);\n        if (result !== false) return result;\n      }\n      // currently edge functions aren't receiving the x-matched-path\n      // header so we need to fallback to matching the current page\n      // when we weren't able to match via dynamic route to handle\n      // the rewrite case\n      // @ts-expect-error extended in child class web-server\n      if (this.serverOptions.webServerConfig) {\n        // @ts-expect-error extended in child class web-server\n        ctx.pathname = this.serverOptions.webServerConfig.page;\n        const result = await this.renderPageComponent(ctx, bubbleNoFallback);\n        if (result !== false) return result;\n      }\n    } catch (error) {\n      const err = (0, _iserror.getProperError)(error);\n      if (error instanceof _utils.MissingStaticPage) {\n        console.error(\"Invariant: failed to load static page\", JSON.stringify({\n          page,\n          url: ctx.req.url,\n          matchedPath: ctx.req.headers[\"x-matched-path\"],\n          initUrl: (0, _requestmeta.getRequestMeta)(ctx.req, \"initURL\"),\n          didRewrite: !!(0, _requestmeta.getRequestMeta)(ctx.req, \"rewroteURL\"),\n          rewroteUrl: (0, _requestmeta.getRequestMeta)(ctx.req, \"rewroteURL\")\n        }, null, 2));\n        throw err;\n      }\n      if (err instanceof NoFallbackError && bubbleNoFallback) {\n        throw err;\n      }\n      if (err instanceof _utils.DecodeError || err instanceof _utils.NormalizeError) {\n        res.statusCode = 400;\n        return await this.renderErrorToResponse(ctx, err);\n      }\n      res.statusCode = 500;\n      // if pages/500 is present we still need to trigger\n      // /_error `getInitialProps` to allow reporting error\n      if (await this.hasPage(\"/500\")) {\n        ctx.query.__nextCustomErrorRender = \"1\";\n        await this.renderErrorToResponse(ctx, err);\n        delete ctx.query.__nextCustomErrorRender;\n      }\n      const isWrappedError = err instanceof WrappedBuildError;\n      if (!isWrappedError) {\n        if (this.minimalMode && process.env.NEXT_RUNTIME !== \"edge\" || this.renderOpts.dev) {\n          if ((0, _iserror.default)(err)) err.page = page;\n          throw err;\n        }\n        this.logError((0, _iserror.getProperError)(err));\n      }\n      const response = await this.renderErrorToResponse(ctx, isWrappedError ? err.innerError : err);\n      return response;\n    }\n    if (this.getMiddleware() && !!ctx.req.headers[\"x-nextjs-data\"] && (!res.statusCode || res.statusCode === 200 || res.statusCode === 404)) {\n      res.setHeader(\"x-nextjs-matched-path\", `${query.__nextLocale ? `/${query.__nextLocale}` : \"\"}${pathname}`);\n      res.statusCode = 200;\n      res.setHeader(\"content-type\", \"application/json\");\n      res.body(\"{}\");\n      res.send();\n      return null;\n    }\n    res.statusCode = 404;\n    return this.renderErrorToResponse(ctx, null);\n  }\n  async renderToHTML(req, res, pathname, query = {}) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.renderToHTML, async () => {\n      return this.renderToHTMLImpl(req, res, pathname, query);\n    });\n  }\n  async renderToHTMLImpl(req, res, pathname, query = {}) {\n    return this.getStaticHTML(ctx => this.renderToResponse(ctx), {\n      req,\n      res,\n      pathname,\n      query\n    });\n  }\n  async renderError(err, req, res, pathname, query = {}, setHeaders = true) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.renderError, async () => {\n      return this.renderErrorImpl(err, req, res, pathname, query, setHeaders);\n    });\n  }\n  async renderErrorImpl(err, req, res, pathname, query = {}, setHeaders = true) {\n    if (setHeaders) {\n      res.setHeader(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate\");\n    }\n    return this.pipe(async ctx => {\n      const response = await this.renderErrorToResponse(ctx, err);\n      if (this.minimalMode && res.statusCode === 500) {\n        throw err;\n      }\n      return response;\n    }, {\n      req,\n      res,\n      pathname,\n      query\n    });\n  }\n  async renderErrorToResponse(ctx, err) {\n    return (0, _tracer.getTracer)().trace(_constants1.BaseServerSpan.renderErrorToResponse, async () => {\n      return this.renderErrorToResponseImpl(ctx, err);\n    });\n  }\n  async renderErrorToResponseImpl(ctx, err) {\n    // Short-circuit favicon.ico in development to avoid compiling 404 page when the app has no favicon.ico.\n    // Since favicon.ico is automatically requested by the browser.\n    if (this.renderOpts.dev && ctx.pathname === \"/favicon.ico\") {\n      return {\n        type: \"html\",\n        body: new _renderresult.default(\"\")\n      };\n    }\n    const {\n      res,\n      query\n    } = ctx;\n    try {\n      let result = null;\n      const is404 = res.statusCode === 404;\n      let using404Page = false;\n      if (is404) {\n        if (this.hasAppDir) {\n          // Use the not-found entry in app directory\n          result = await this.findPageComponents({\n            page: this.renderOpts.dev ? \"/not-found\" : \"/_not-found\",\n            query,\n            params: {},\n            isAppPath: true,\n            shouldEnsure: true\n          });\n          using404Page = result !== null;\n        }\n        if (!result && (await this.hasPage(\"/404\"))) {\n          result = await this.findPageComponents({\n            page: \"/404\",\n            query,\n            params: {},\n            isAppPath: false,\n            // Ensuring can't be done here because you never \"match\" a 404 route.\n            shouldEnsure: true\n          });\n          using404Page = result !== null;\n        }\n      }\n      let statusPage = `/${res.statusCode}`;\n      if (!ctx.query.__nextCustomErrorRender && !result && _constants.STATIC_STATUS_PAGES.includes(statusPage)) {\n        // skip ensuring /500 in dev mode as it isn't used and the\n        // dev overlay is used instead\n        if (statusPage !== \"/500\" || !this.renderOpts.dev) {\n          result = await this.findPageComponents({\n            page: statusPage,\n            query,\n            params: {},\n            isAppPath: false,\n            // Ensuring can't be done here because you never \"match\" a 500\n            // route.\n            shouldEnsure: true\n          });\n        }\n      }\n      if (!result) {\n        result = await this.findPageComponents({\n          page: \"/_error\",\n          query,\n          params: {},\n          isAppPath: false,\n          // Ensuring can't be done here because you never \"match\" an error\n          // route.\n          shouldEnsure: true\n        });\n        statusPage = \"/_error\";\n      }\n      if (process.env.NODE_ENV !== \"production\" && !using404Page && (await this.hasPage(\"/_error\")) && !(await this.hasPage(\"/404\"))) {\n        this.customErrorNo404Warn();\n      }\n      if (!result) {\n        // this can occur when a project directory has been moved/deleted\n        // which is handled in the parent process in development\n        if (this.renderOpts.dev) {\n          return {\n            type: \"html\",\n            // wait for dev-server to restart before refreshing\n            body: _renderresult.default.fromStatic(`\n              <pre>missing required error components, refreshing...</pre>\n              <script>\n                async function check() {\n                  const res = await fetch(location.href).catch(() => ({}))\n\n                  if (res.status === 200) {\n                    location.reload()\n                  } else {\n                    setTimeout(check, 1000)\n                  }\n                }\n                check()\n              </script>`)\n          };\n        }\n        throw new WrappedBuildError(new Error(\"missing required error components\"));\n      }\n      // If the page has a route module, use it for the new match. If it doesn't\n      // have a route module, remove the match.\n      if (result.components.routeModule) {\n        (0, _requestmeta.addRequestMeta)(ctx.req, \"match\", {\n          definition: result.components.routeModule.definition,\n          params: undefined\n        });\n      } else {\n        (0, _requestmeta.removeRequestMeta)(ctx.req, \"match\");\n      }\n      try {\n        return await this.renderToResponseWithComponents({\n          ...ctx,\n          pathname: statusPage,\n          renderOpts: {\n            ...ctx.renderOpts,\n            err\n          }\n        }, result);\n      } catch (maybeFallbackError) {\n        if (maybeFallbackError instanceof NoFallbackError) {\n          throw new Error(\"invariant: failed to render error page\");\n        }\n        throw maybeFallbackError;\n      }\n    } catch (error) {\n      const renderToHtmlError = (0, _iserror.getProperError)(error);\n      const isWrappedError = renderToHtmlError instanceof WrappedBuildError;\n      if (!isWrappedError) {\n        this.logError(renderToHtmlError);\n      }\n      res.statusCode = 500;\n      const fallbackComponents = await this.getFallbackErrorComponents();\n      if (fallbackComponents) {\n        // There was an error, so use it's definition from the route module\n        // to add the match to the request.\n        (0, _requestmeta.addRequestMeta)(ctx.req, \"match\", {\n          definition: fallbackComponents.routeModule.definition,\n          params: undefined\n        });\n        return this.renderToResponseWithComponents({\n          ...ctx,\n          pathname: \"/_error\",\n          renderOpts: {\n            ...ctx.renderOpts,\n            // We render `renderToHtmlError` here because `err` is\n            // already captured in the stacktrace.\n            err: isWrappedError ? renderToHtmlError.innerError : renderToHtmlError\n          }\n        }, {\n          query,\n          components: fallbackComponents\n        });\n      }\n      return {\n        type: \"html\",\n        body: _renderresult.default.fromStatic(\"Internal Server Error\")\n      };\n    }\n  }\n  async renderErrorToHTML(err, req, res, pathname, query = {}) {\n    return this.getStaticHTML(ctx => this.renderErrorToResponse(ctx, err), {\n      req,\n      res,\n      pathname,\n      query\n    });\n  }\n  async render404(req, res, parsedUrl, setHeaders = true) {\n    const {\n      pathname,\n      query\n    } = parsedUrl ? parsedUrl : (0, _url.parse)(req.url, true);\n    if (this.nextConfig.i18n) {\n      query.__nextLocale ||= this.nextConfig.i18n.defaultLocale;\n      query.__nextDefaultLocale ||= this.nextConfig.i18n.defaultLocale;\n    }\n    res.statusCode = 404;\n    return this.renderError(null, req, res, pathname, query, setHeaders);\n  }\n}","map":{"version":3,"names":["NoFallbackError","WrappedBuildError","default","Server","Error","constructor","innerError","options","_this_nextConfig_i18n","_this_nextConfig_experimental_amp","_this_nextConfig_i18n1","handleRSCRequest","req","_res","parsedUrl","pathname","normalizers","rsc","match","query","__nextDataReq","normalize","url","parsed","_url","parse","format","handleNextPostponedRequest","method","postponed","chunk","body","_requestmeta","addRequestMeta","handleNextDataRequest","res","middleware","getMiddleware","params","_matchnextdatapathname","matchNextDataPathname","path","buildId","process","env","NEXT_RUNTIME","headers","render404","shift","lastParam","length","endsWith","join","_getroutefromassetpath","nextConfig","trailingSlash","substring","i18nProvider","_req_headers_host","hostname","host","split","toLowerCase","domainLocale","detectDomainLocale","defaultLocale","config","localePathResult","analyze","detectedLocale","__nextLocale","__nextDefaultLocale","__nextInferredLocaleFromDefault","handleNextImageRequest","handleCatchallRenderRequest","handleCatchallMiddlewareRequest","handle","finished","minimalMode","hasAppDir","experimental","ppr","prepared","preparedPromise","customErrorNo404Warn","_utils","execOnce","_log","warn","dir","quiet","conf","dev","customServer","port","serverOptions","require","resolve","loadEnvConfig","fetchHostname","_formathostname","formatHostname","distDir","publicDir","getPublicDir","hasStaticDir","getHasStaticDir","i18n","locales","_i18nprovider","I18NProvider","undefined","localeNormalizer","_localeroutenormalizer","LocaleRouteNormalizer","serverRuntimeConfig","publicRuntimeConfig","assetPrefix","generateEtags","getBuildId","minimalModeKey","NEXT_PRIVATE_MINIMAL_MODE","getHasAppDir","_postponed","PostponedPathnameNormalizer","_rsc","RSCPathnameNormalizer","serverComponents","nextFontManifest","getNextFontManifest","NEXT_DEPLOYMENT_ID","deploymentId","renderOpts","strictNextHead","poweredByHeader","canonicalBase","amp","previewProps","getPrerenderManifest","preview","ampOptimizerConfig","optimizer","basePath","images","optimizeFonts","fontManifest","getFontManifest","optimizeCss","nextConfigOutput","output","nextScriptWorkers","disableOptimizedLoading","domainLocales","domains","enableTainting","taint","crossOrigin","largePageDataBytes","runtimeConfig","Object","keys","isExperimentalCompile","_runtimeconfigexternal","setConfig","pagesManifest","getPagesManifest","appPathsManifest","getAppPathsManifest","appPathRoutes","getAppPathRoutes","matchers","getRouteMatchers","reload","setAssetPrefix","responseCache","getResponseCache","reloadMatchers","manifestLoader","_servermanifestloader","ServerManifestLoader","name","_constants","PAGES_MANIFEST","APP_PATHS_MANIFEST","_defaultroutematchermanager","DefaultRouteMatcherManager","push","_pagesroutematcherprovider","PagesRouteMatcherProvider","_pagesapiroutematcherprovider","PagesAPIRouteMatcherProvider","_apppageroutematcherprovider","AppPageRouteMatcherProvider","_approuteroutematcherprovider","AppRouteRouteMatcherProvider","logError","err","error","handleRequest","prepare","toUpperCase","tracer","_tracer","getTracer","withPropagatedContext","trace","_constants1","BaseServerSpan","spanName","kind","SpanKind","SERVER","attributes","span","handleRequestImpl","finally","setAttributes","statusCode","rootSpanAttributes","getRootSpanAttributes","get","console","route","newName","updateName","_this_i18nProvider","waitTillReady","originalResponse","origSetHeader","setHeader","bind","val","headersSent","middlewareValue","getRequestMeta","Array","isArray","every","item","idx","Set","urlParts","urlNoQuery","cleanUrl","normalizeRepeatedSlashes","redirect","send","fromEntries","URLSearchParams","param","_approuterheaders","FLIGHT_PARAMETERS","toString","attachRequestMeta","_gethostname","getHostname","_parseurl","parseUrl","replace","pathnameInfo","_getnextpathnameinfo","getNextPathnameInfo","_removepathprefix","removePathPrefix","useMatchedPathHeader","_this_i18nProvider1","_this_getRoutesManifest","matchedPath","URL","urlPathname","startsWith","normalizedUrlPath","stripNextDataPath","localeAnalysisResult","inferredFromDefault","_denormalizepagepath","denormalizePagePath","srcPathname","definition","pageIsDynamic","utils","_serverutils","getUtils","page","rewrites","getRoutesManifest","beforeFiles","afterFiles","fallback","caseSensitive","caseSensitiveRoutes","locale","pathnameBeforeRewrite","rewriteParams","handleRewrites","rewriteParamKeys","didRewrite","routeParamKeys","key","value","_constants2","NEXT_QUERY_PARAM_PREFIX","normalizedKey","add","paramsResult","normalizeDynamicRouteParams","hasValidParams","_utils1","isDynamicRoute","matcherParams","dynamicRouteMatcher","call","assign","opts","routeParams","getParamsFromRouteMatches","defaultRouteMatches","interpolateDynamicPath","_utils_defaultRouteRegex","normalizeVercelUrl","defaultRouteRegex","groups","DecodeError","NormalizeError","renderError","getLocaleRedirect","pathLocale","urlParsed","TEMPORARY_REDIRECT_STATUS","Boolean","webServerConfig","protocol","parsedFullUrl","incrementalCache","getIncrementalCache","requestHeaders","requestProtocol","globalThis","__incrementalCache","invokePath","useInvokePath","invokeQuery","JSON","decodeURIComponent","Number","invokeError","message","parsedMatchedPath","invokePathnameInfo","parseData","normalizeResult","_normalizelocalepath","normalizeLocalePath","result","response","Response","bubble","run","code","_iserror","getProperError","getRequestHandlerWithMetadata","meta","setRequestMeta","getRequestHandler","prefix","prepareImpl","then","close","forEach","entry","normalizedPath","_apppaths","normalizeAppPath","runImpl","pipe","fn","partialContext","pipeImpl","isBotRequest","_isbot","isBot","ctx","supportsDynamicHTML","payload","type","revalidate","sent","sendRenderResult","getStaticHTML","toUnchunkedString","render","internalRender","renderImpl","_req_url","hasPage","_utils2","isBlockedPage","renderToResponse","getStaticPaths","_this_getPrerenderManifest_dynamicRoutes_pathname","fallbackField","dynamicRoutes","staticPaths","fallbackMode","renderToResponseWithComponents","requestContext","findComponentsResult","renderToResponseWithComponentsImpl","stripInternalHeaders","__NEXT_TEST_MODE","__NEXT_NO_STRIP_INTERNAL_HEADERS","_internalutils","originalRequest","components","_components_Component","is404Page","is500Page","isAppPath","hasServerProps","getServerSideProps","hasStaticPaths","actionId","ACTION","contentType","isMultipartAction","isFetchAction","isServerAction","hasGetInitialProps","Component","getInitialProps","isSSG","getStaticProps","resolvedUrlPathname","hasFallback","isDynamic","prerenderManifest","pathsResult","resolvedWithoutSlash","_removetrailingslash","removeTrailingSlash","includes","routes","isDataReq","isAppPrefetch","NEXT_ROUTER_PREFETCH","isFlightRequest","RSC","resumed","RSC_VARY_HEADER","STATIC_STATUS_PAGES","parseInt","slice","_renderresult","fromStatic","_components_Document","isSupportedDocument","Document","NEXT_BUILTIN_DOCUMENT","previewData","isPreviewMode","tryGetPreviewData","_isedgeruntime","isEdgeRuntime","runtime","isOnDemandRevalidate","revalidateOnlyGenerated","_apiutils","checkIsOnDemandRevalidate","handleRedirect","pageData","destination","pageProps","__N_REDIRECT","__N_REDIRECT_STATUS","__N_REDIRECT_BASE_PATH","_redirectstatus","getRedirectStatus","ssgCacheKey","map","seg","_escapepathdelimiters","_","doRender","_this_nextConfig_experimental_serverActions","_components_routeModule","_components_routeModule1","_components_routeModule2","origQuery","hadTrailingSlash","resolvedUrl","isRevalidate","originalPathname","ComponentMod","serverActionsBodySizeLimit","serverActions","bodySizeLimit","resolvedAsPath","isDraftMode","routeModule","_routekind","RouteKind","APP_ROUTE","context","request","_nextrequest","NextRequestAdapter","fromBaseNextRequest","signalFromNodeResponse","fetchMetrics","cacheTags","fetchTags","_context_renderOpts_store","blob","_utils3","toNodeOutgoingHttpHeaders","NEXT_CACHE_TAGS_HEADER","store","cacheEntry","status","Buffer","from","arrayBuffer","_sendresponse","sendResponse","waitUntil","_responsehandlers","handleInternalServerErrorResponse","PAGES","module1","clientReferenceManifest","APP_PAGE","NODE_ENV","prefetchRsc","getPrefetchRsc","RSC_CONTENT_TYPE_HEADER","renderHTML","metadata","staticBailoutInfo","description","stack","indexOf","isNotFound","isRedirect","props","isNull","html","hasResolved","previousCacheEntry","isProduction","didRespond","isStale","staticPathKey","isPageIncludedInStaticPaths","getFallback","__nextFallback","isPrefetch","purpose","isMiss","cachedData","getHeader","CACHE_ONE_YEAR","onCacheEntry","_revalidate","formatRevalidate","__nextNotFoundSrcPage","stringify","fromNodeOutgoingHttpHeaders","_cachedData_headers","NEXT_DID_POSTPONE_HEADER","_result_value","transformer","TransformStream","chain","readable","_result_value1","pipeTo","writable","catch","abort","e","stripLocale","splitPath","getOriginalAppPaths","_this_appPathRoutes","originalAppPath","renderPageComponent","bubbleNoFallback","_this_nextConfig_experimental_sri","appPaths","findPageComponents","sriEnabled","sri","algorithm","shouldEnsure","isNoFallbackError","renderToResponseImpl","_nextBubbleNoFallback","NEXT_RSC_UNION_QUERY","fromQuery","matchAll","invokeOutput","MissingStaticPage","initUrl","rewroteUrl","renderErrorToResponse","__nextCustomErrorRender","isWrappedError","renderToHTML","renderToHTMLImpl","setHeaders","renderErrorImpl","renderErrorToResponseImpl","is404","using404Page","statusPage","removeRequestMeta","maybeFallbackError","renderToHtmlError","fallbackComponents","getFallbackErrorComponents","renderErrorToHTML"],"sources":["../../src/server/base-server.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}