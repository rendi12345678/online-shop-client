{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  SpanStatus: null,\n  Span: null,\n  trace: null,\n  flushAllTraces: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  SpanStatus: function () {\n    return SpanStatus;\n  },\n  Span: function () {\n    return Span;\n  },\n  trace: function () {\n    return trace;\n  },\n  flushAllTraces: function () {\n    return flushAllTraces;\n  }\n});\nconst _report = require(\"./report\");\nconst NUM_OF_MICROSEC_IN_NANOSEC = BigInt(\"1000\");\nlet count = 0;\nconst getId = () => {\n  count++;\n  return count;\n};\nvar SpanStatus;\n(function (SpanStatus) {\n  SpanStatus[SpanStatus[\"Started\"] = 0] = \"Started\";\n  SpanStatus[SpanStatus[\"Stopped\"] = 1] = \"Stopped\";\n})(SpanStatus || (SpanStatus = {}));\nclass Span {\n  constructor({\n    name,\n    parentId,\n    attrs,\n    startTime\n  }) {\n    this.name = name;\n    this.parentId = parentId;\n    this.duration = null;\n    this.attrs = attrs ? {\n      ...attrs\n    } : {};\n    this.status = 0;\n    this.id = getId();\n    this._start = startTime || process.hrtime.bigint();\n    // hrtime cannot be used to reconstruct tracing span's actual start time\n    // since it does not have relation to clock time:\n    // `These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift`\n    // https://nodejs.org/api/process.html#processhrtimetime\n    // Capturing current datetime as additional metadata for external reconstruction.\n    this.now = Date.now();\n  }\n  // Durations are reported as microseconds. This gives 1000x the precision\n  // of something like Date.now(), which reports in milliseconds.\n  // Additionally, ~285 years can be safely represented as microseconds as\n  // a float64 in both JSON and JavaScript.\n  stop(stopTime) {\n    const end = stopTime || process.hrtime.bigint();\n    const duration = (end - this._start) / NUM_OF_MICROSEC_IN_NANOSEC;\n    this.status = 1;\n    if (duration > Number.MAX_SAFE_INTEGER) {\n      throw new Error(`Duration is too long to express as float64: ${duration}`);\n    }\n    const timestamp = this._start / NUM_OF_MICROSEC_IN_NANOSEC;\n    _report.reporter.report(this.name, Number(duration), Number(timestamp), this.id, this.parentId, this.attrs, this.now);\n  }\n  traceChild(name, attrs) {\n    return new Span({\n      name,\n      parentId: this.id,\n      attrs\n    });\n  }\n  manualTraceChild(name,\n  // Start time in nanoseconds since epoch.\n  startTime,\n  // Stop time in nanoseconds since epoch.\n  stopTime, attrs) {\n    const span = new Span({\n      name,\n      parentId: this.id,\n      attrs,\n      startTime\n    });\n    span.stop(stopTime);\n  }\n  setAttribute(key, value) {\n    this.attrs[key] = String(value);\n  }\n  traceFn(fn) {\n    try {\n      return fn(this);\n    } finally {\n      this.stop();\n    }\n  }\n  async traceAsyncFn(fn) {\n    try {\n      return await fn(this);\n    } finally {\n      this.stop();\n    }\n  }\n}\nconst trace = (name, parentId, attrs) => {\n  return new Span({\n    name,\n    parentId,\n    attrs\n  });\n};\nconst flushAllTraces = () => _report.reporter.flushAll();","map":{"version":3,"names":["Span","trace","flushAllTraces","NUM_OF_MICROSEC_IN_NANOSEC","BigInt","count","getId","SpanStatus","constructor","name","parentId","attrs","startTime","duration","status","id","_start","process","hrtime","bigint","now","Date","stop","stopTime","end","Number","MAX_SAFE_INTEGER","Error","timestamp","_report","reporter","report","traceChild","manualTraceChild","span","setAttribute","key","value","String","traceFn","fn","traceAsyncFn","flushAll"],"sources":["../../src/trace/trace.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}