{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"DevPagesRouteMatcherProvider\", {\n  enumerable: true,\n  get: function () {\n    return DevPagesRouteMatcherProvider;\n  }\n});\nconst _pagesroutematcher = require(\"../../route-matchers/pages-route-matcher\");\nconst _routekind = require(\"../../route-kind\");\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _filecacheroutematcherprovider = require(\"./file-cache-route-matcher-provider\");\nconst _pages = require(\"../../normalizers/built/pages\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass DevPagesRouteMatcherProvider extends _filecacheroutematcherprovider.FileCacheRouteMatcherProvider {\n  constructor(pagesDir, extensions, reader, localeNormalizer) {\n    super(pagesDir, reader);\n    this.pagesDir = pagesDir;\n    this.extensions = extensions;\n    this.localeNormalizer = localeNormalizer;\n    // Match any route file that ends with `/${filename}.${extension}` under the\n    // pages directory.\n    this.expression = new RegExp(`\\\\.(?:${extensions.join(\"|\")})$`);\n    this.normalizers = new _pages.DevPagesNormalizers(pagesDir, extensions);\n  }\n  test(filename) {\n    // If the file does not end in the correct extension it's not a match.\n    if (!this.expression.test(filename)) return false;\n    // Pages routes must exist in the pages directory without the `/api/`\n    // prefix. The pathnames being tested here though are the full filenames,\n    // so we need to include the pages directory.\n    // TODO: could path separator normalization be needed here?\n    if (filename.startsWith(_path.default.join(this.pagesDir, \"/api/\"))) return false;\n    for (const extension of this.extensions) {\n      // We can also match if we have `pages/api.${extension}`, so check to\n      // see if it's a match.\n      if (filename === _path.default.join(this.pagesDir, `api.${extension}`)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  async transform(files) {\n    const matchers = [];\n    for (const filename of files) {\n      // If the file isn't a match for this matcher, then skip it.\n      if (!this.test(filename)) continue;\n      const pathname = this.normalizers.pathname.normalize(filename);\n      const page = this.normalizers.page.normalize(filename);\n      const bundlePath = this.normalizers.bundlePath.normalize(filename);\n      if (this.localeNormalizer) {\n        matchers.push(new _pagesroutematcher.PagesLocaleRouteMatcher({\n          kind: _routekind.RouteKind.PAGES,\n          pathname,\n          page,\n          bundlePath,\n          filename,\n          i18n: {}\n        }));\n      } else {\n        matchers.push(new _pagesroutematcher.PagesRouteMatcher({\n          kind: _routekind.RouteKind.PAGES,\n          pathname,\n          page,\n          bundlePath,\n          filename\n        }));\n      }\n    }\n    return matchers;\n  }\n}","map":{"version":3,"names":["DevPagesRouteMatcherProvider","_filecacheroutematcherprovider","FileCacheRouteMatcherProvider","constructor","pagesDir","extensions","reader","localeNormalizer","expression","RegExp","join","normalizers","_pages","DevPagesNormalizers","test","filename","startsWith","_path","default","extension","transform","files","matchers","pathname","normalize","page","bundlePath","push","_pagesroutematcher","PagesLocaleRouteMatcher","kind","_routekind","RouteKind","PAGES","i18n","PagesRouteMatcher"],"sources":["../../../../../src/server/future/route-matcher-providers/dev/dev-pages-route-matcher-provider.ts"],"sourcesContent":[null],"mappings":";;;;;+BAWa;;;WAAAA,4BAAA;;;mCAPN;2BACmB;4DACT;+CAE6B;uBACV;;;;;;AAE7B,MAAMA,4BAAA,SAAqCC,8BAAA,CAAAC,6BAA6B;EAI7EC,YACmBC,QAAA,EACAC,UAAA,EACjBC,MAAkB,EACDC,gBAAA,EACjB;IACA,KAAK,CAACH,QAAA,EAAUE,MAAA;oBALCF,QAAA;sBACAC,UAAA;4BAEAE,gBAAA;IAIjB;IACA;IACA,IAAI,CAACC,UAAU,GAAG,IAAIC,MAAA,CAAQ,SAAQJ,UAAA,CAAWK,IAAI,CAAC,IAAK,IAAG;IAE9D,IAAI,CAACC,WAAW,GAAG,IAAIC,MAAA,CAAAC,mBAAmB,CAACT,QAAA,EAAUC,UAAA;EACvD;EAEQS,KAAKC,QAAgB,EAAW;IACtC;IACA,IAAI,CAAC,IAAI,CAACP,UAAU,CAACM,IAAI,CAACC,QAAA,GAAW,OAAO;IAE5C;IACA;IACA;IAEA;IACA,IAAIA,QAAA,CAASC,UAAU,CAACC,KAAA,CAAAC,OAAI,CAACR,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE,WAAW,OAAO;IAEnE,KAAK,MAAMe,SAAA,IAAa,IAAI,CAACd,UAAU,EAAE;MACvC;MACA;MACA,IAAIU,QAAA,KAAaE,KAAA,CAAAC,OAAI,CAACR,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAG,OAAMe,SAAU,EAAC,GAAG;QAC7D,OAAO;MACT;IACF;IAEA,OAAO;EACT;EAEA,MAAgBC,UACdC,KAA4B,EACe;IAC3C,MAAMC,QAAA,GAAqC,EAAE;IAC7C,KAAK,MAAMP,QAAA,IAAYM,KAAA,EAAO;MAC5B;MACA,IAAI,CAAC,IAAI,CAACP,IAAI,CAACC,QAAA,GAAW;MAE1B,MAAMQ,QAAA,GAAW,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAACC,SAAS,CAACT,QAAA;MACrD,MAAMU,IAAA,GAAO,IAAI,CAACd,WAAW,CAACc,IAAI,CAACD,SAAS,CAACT,QAAA;MAC7C,MAAMW,UAAA,GAAa,IAAI,CAACf,WAAW,CAACe,UAAU,CAACF,SAAS,CAACT,QAAA;MAEzD,IAAI,IAAI,CAACR,gBAAgB,EAAE;QACzBe,QAAA,CAASK,IAAI,CACX,IAAIC,kBAAA,CAAAC,uBAAuB,CAAC;UAC1BC,IAAA,EAAMC,UAAA,CAAAC,SAAS,CAACC,KAAK;UACrBV,QAAA;UACAE,IAAA;UACAC,UAAA;UACAX,QAAA;UACAmB,IAAA,EAAM,CAAC;QACT;MAEJ,OAAO;QACLZ,QAAA,CAASK,IAAI,CACX,IAAIC,kBAAA,CAAAO,iBAAiB,CAAC;UACpBL,IAAA,EAAMC,UAAA,CAAAC,SAAS,CAACC,KAAK;UACrBV,QAAA;UACAE,IAAA;UACAC,UAAA;UACAX;QACF;MAEJ;IACF;IAEA,OAAOO,QAAA;EACT;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}