{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"AppPageRouteMatcherProvider\", {\n  enumerable: true,\n  get: function () {\n    return AppPageRouteMatcherProvider;\n  }\n});\nconst _isapppageroute = require(\"../../../lib/is-app-page-route\");\nconst _constants = require(\"../../../shared/lib/constants\");\nconst _app = require(\"../normalizers/built/app\");\nconst _routekind = require(\"../route-kind\");\nconst _apppageroutematcher = require(\"../route-matchers/app-page-route-matcher\");\nconst _manifestroutematcherprovider = require(\"./manifest-route-matcher-provider\");\nclass AppPageRouteMatcherProvider extends _manifestroutematcherprovider.ManifestRouteMatcherProvider {\n  constructor(distDir, manifestLoader) {\n    super(_constants.APP_PATHS_MANIFEST, manifestLoader);\n    this.normalizers = new _app.AppNormalizers(distDir);\n  }\n  async transform(manifest) {\n    // This matcher only matches app pages.\n    const pages = Object.keys(manifest).filter(page => (0, _isapppageroute.isAppPageRoute)(page));\n    // Collect all the app paths for each page. This could include any parallel\n    // routes.\n    const allAppPaths = {};\n    for (const page of pages) {\n      const pathname = this.normalizers.pathname.normalize(page);\n      if (pathname in allAppPaths) allAppPaths[pathname].push(page);else allAppPaths[pathname] = [page];\n    }\n    // Format the routes.\n    const matchers = [];\n    for (const [pathname, appPaths] of Object.entries(allAppPaths)) {\n      // TODO-APP: (wyattjoh) this is a hack right now, should be more deterministic\n      const page = appPaths[0];\n      const filename = this.normalizers.filename.normalize(manifest[page]);\n      const bundlePath = this.normalizers.bundlePath.normalize(page);\n      matchers.push(new _apppageroutematcher.AppPageRouteMatcher({\n        kind: _routekind.RouteKind.APP_PAGE,\n        pathname,\n        page,\n        bundlePath,\n        filename,\n        appPaths\n      }));\n    }\n    return matchers;\n  }\n}","map":{"version":3,"names":["AppPageRouteMatcherProvider","_manifestroutematcherprovider","ManifestRouteMatcherProvider","constructor","distDir","manifestLoader","_constants","APP_PATHS_MANIFEST","normalizers","_app","AppNormalizers","transform","manifest","pages","Object","keys","filter","page","_isapppageroute","isAppPageRoute","allAppPaths","pathname","normalize","push","matchers","appPaths","entries","filename","bundlePath","_apppageroutematcher","AppPageRouteMatcher","kind","_routekind","RouteKind","APP_PAGE"],"sources":["../../../../src/server/future/route-matcher-providers/app-page-route-matcher-provider.ts"],"sourcesContent":[null],"mappings":";;;;;+BAYa;;;WAAAA,2BAAA;;;gCAZkB;2BAEI;qBACJ;2BACL;qCACU;8CAKS;AAEtC,MAAMA,2BAAA,SAAoCC,6BAAA,CAAAC,4BAA4B;EAG3EC,YAAYC,OAAe,EAAEC,cAA8B,EAAE;IAC3D,KAAK,CAACC,UAAA,CAAAC,kBAAkB,EAAEF,cAAA;IAE1B,IAAI,CAACG,WAAW,GAAG,IAAIC,IAAA,CAAAC,cAAc,CAACN,OAAA;EACxC;EAEA,MAAgBO,UACdC,QAAkB,EAC2B;IAC7C;IACA,MAAMC,KAAA,GAAQC,MAAA,CAAOC,IAAI,CAACH,QAAA,EAAUI,MAAM,CAAEC,IAAA,IAAS,IAAAC,eAAA,CAAAC,cAAc,EAACF,IAAA;IAEpE;IACA;IACA,MAAMG,WAAA,GAAwC,CAAC;IAC/C,KAAK,MAAMH,IAAA,IAAQJ,KAAA,EAAO;MACxB,MAAMQ,QAAA,GAAW,IAAI,CAACb,WAAW,CAACa,QAAQ,CAACC,SAAS,CAACL,IAAA;MACrD,IAAII,QAAA,IAAYD,WAAA,EAAaA,WAAW,CAACC,QAAA,CAAS,CAACE,IAAI,CAACN,IAAA,OACnDG,WAAW,CAACC,QAAA,CAAS,GAAG,CAACJ,IAAA,CAAK;IACrC;IAEA;IACA,MAAMO,QAAA,GAAuC,EAAE;IAC/C,KAAK,MAAM,CAACH,QAAA,EAAUI,QAAA,CAAS,IAAIX,MAAA,CAAOY,OAAO,CAACN,WAAA,GAAc;MAC9D;MACA,MAAMH,IAAA,GAAOQ,QAAQ,CAAC,EAAE;MAExB,MAAME,QAAA,GAAW,IAAI,CAACnB,WAAW,CAACmB,QAAQ,CAACL,SAAS,CAACV,QAAQ,CAACK,IAAA,CAAK;MACnE,MAAMW,UAAA,GAAa,IAAI,CAACpB,WAAW,CAACoB,UAAU,CAACN,SAAS,CAACL,IAAA;MAEzDO,QAAA,CAASD,IAAI,CACX,IAAIM,oBAAA,CAAAC,mBAAmB,CAAC;QACtBC,IAAA,EAAMC,UAAA,CAAAC,SAAS,CAACC,QAAQ;QACxBb,QAAA;QACAJ,IAAA;QACAW,UAAA;QACAD,QAAA;QACAF;MACF;IAEJ;IAEA,OAAOD,QAAA;EACT;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}