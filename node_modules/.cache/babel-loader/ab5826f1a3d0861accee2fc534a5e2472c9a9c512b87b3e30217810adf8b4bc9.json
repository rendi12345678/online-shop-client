{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  interceptTestApis: null,\n  wrapRequestHandlerWorker: null,\n  wrapRequestHandlerNode: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  interceptTestApis: function () {\n    return interceptTestApis;\n  },\n  wrapRequestHandlerWorker: function () {\n    return wrapRequestHandlerWorker;\n  },\n  wrapRequestHandlerNode: function () {\n    return wrapRequestHandlerNode;\n  }\n});\nconst _async_hooks = require(\"async_hooks\");\nconst _ClientRequest = require(\"next/dist/compiled/@mswjs/interceptors/ClientRequest\");\nconst testStorage = new _async_hooks.AsyncLocalStorage();\nfunction getTestStack() {\n  let stack = (new Error().stack ?? \"\").split(\"\\n\");\n  // Skip the first line and find first non-empty line.\n  for (let i = 1; i < stack.length; i++) {\n    if (stack[i].length > 0) {\n      stack = stack.slice(i);\n      break;\n    }\n  }\n  // Filter out franmework lines.\n  stack = stack.filter(f => !f.includes(\"/next/dist/\"));\n  // At most 5 lines.\n  stack = stack.slice(0, 5);\n  // Cleanup some internal info and trim.\n  stack = stack.map(s => s.replace(\"webpack-internal:///(rsc)/\", \"\").trim());\n  return stack.join(\"    \");\n}\nasync function buildProxyRequest(testData, request) {\n  const {\n    url,\n    method,\n    headers,\n    body,\n    cache,\n    credentials,\n    integrity,\n    mode,\n    redirect,\n    referrer,\n    referrerPolicy\n  } = request;\n  return {\n    testData,\n    api: \"fetch\",\n    request: {\n      url,\n      method,\n      headers: [...Array.from(headers), [\"next-test-stack\", getTestStack()]],\n      body: body ? Buffer.from(await request.arrayBuffer()).toString(\"base64\") : null,\n      cache,\n      credentials,\n      integrity,\n      mode,\n      redirect,\n      referrer,\n      referrerPolicy\n    }\n  };\n}\nfunction buildResponse(proxyResponse) {\n  const {\n    status,\n    headers,\n    body\n  } = proxyResponse.response;\n  return new Response(body ? Buffer.from(body, \"base64\") : null, {\n    status,\n    headers: new Headers(headers)\n  });\n}\nasync function handleFetch(originalFetch, request) {\n  const testInfo = testStorage.getStore();\n  if (!testInfo) {\n    throw new Error(\"No test info\");\n  }\n  const {\n    testData,\n    proxyPort\n  } = testInfo;\n  const proxyRequest = await buildProxyRequest(testData, request);\n  const resp = await originalFetch(`http://localhost:${proxyPort}`, {\n    method: \"POST\",\n    body: JSON.stringify(proxyRequest),\n    next: {\n      // @ts-ignore\n      internal: true\n    }\n  });\n  if (!resp.ok) {\n    throw new Error(`Proxy request failed: ${resp.status}`);\n  }\n  const proxyResponse = await resp.json();\n  const {\n    api\n  } = proxyResponse;\n  switch (api) {\n    case \"continue\":\n      return originalFetch(request);\n    case \"abort\":\n    case \"unhandled\":\n      throw new Error(`Proxy request aborted [${request.method} ${request.url}]`);\n    default:\n      break;\n  }\n  return buildResponse(proxyResponse);\n}\nfunction interceptFetch() {\n  const originalFetch = global.fetch;\n  global.fetch = function testFetch(input, init) {\n    var _init_next;\n    // Passthrough internal requests.\n    // @ts-ignore\n    if (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next.internal) {\n      return originalFetch(input, init);\n    }\n    return handleFetch(originalFetch, new Request(input, init));\n  };\n}\nfunction interceptTestApis() {\n  const originalFetch = global.fetch;\n  interceptFetch();\n  const clientRequestInterceptor = new _ClientRequest.ClientRequestInterceptor();\n  clientRequestInterceptor.on(\"request\", async ({\n    request\n  }) => {\n    const response = await handleFetch(originalFetch, request);\n    request.respondWith(response);\n  });\n  clientRequestInterceptor.apply();\n  // Cleanup.\n  return () => {\n    clientRequestInterceptor.dispose();\n    global.fetch = originalFetch;\n  };\n}\nfunction wrapRequestHandlerWorker(handler) {\n  return async (req, res) => {\n    const proxyPortHeader = req.headers[\"next-test-proxy-port\"];\n    if (!proxyPortHeader) {\n      await handler(req, res);\n      return;\n    }\n    const url = req.url ?? \"\";\n    const proxyPort = Number(proxyPortHeader);\n    const testData = req.headers[\"next-test-data\"] ?? \"\";\n    const testReqInfo = {\n      url,\n      proxyPort,\n      testData\n    };\n    await testStorage.run(testReqInfo, () => handler(req, res));\n  };\n}\nfunction wrapRequestHandlerNode(handler) {\n  return async (req, res, parsedUrl) => {\n    const proxyPortHeader = req.headers[\"next-test-proxy-port\"];\n    if (!proxyPortHeader) {\n      await handler(req, res, parsedUrl);\n      return;\n    }\n    const url = req.url ?? \"\";\n    const proxyPort = Number(proxyPortHeader);\n    const testData = req.headers[\"next-test-data\"] ?? \"\";\n    const testReqInfo = {\n      url,\n      proxyPort,\n      testData\n    };\n    await testStorage.run(testReqInfo, () => handler(req, res, parsedUrl));\n  };\n}","map":{"version":3,"names":["interceptTestApis","wrapRequestHandlerWorker","wrapRequestHandlerNode","testStorage","_async_hooks","AsyncLocalStorage","getTestStack","stack","Error","split","i","length","slice","filter","f","includes","map","s","replace","trim","join","buildProxyRequest","testData","request","url","method","headers","body","cache","credentials","integrity","mode","redirect","referrer","referrerPolicy","api","Array","from","Buffer","arrayBuffer","toString","buildResponse","proxyResponse","status","response","Response","Headers","handleFetch","originalFetch","testInfo","getStore","proxyPort","proxyRequest","resp","JSON","stringify","next","internal","ok","json","interceptFetch","global","fetch","testFetch","input","init","_init_next","Request","clientRequestInterceptor","_ClientRequest","ClientRequestInterceptor","on","respondWith","apply","dispose","handler","req","res","proxyPortHeader","Number","testReqInfo","run","parsedUrl"],"sources":["../../../src/experimental/testmode/server.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}