{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getResolveRoutes\", {\n  enumerable: true,\n  get: function () {\n    return getResolveRoutes;\n  }\n});\nconst _url = /*#__PURE__*/_interop_require_default(require(\"url\"));\nconst _nodepath = /*#__PURE__*/_interop_require_default(require(\"node:path\"));\nconst _debug = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/debug\"));\nconst _bodystreams = require(\"../../body-streams\");\nconst _utils = require(\"../server-ipc/utils\");\nconst _serverrouteutils = require(\"../../server-route-utils\");\nconst _formathostname = require(\"../format-hostname\");\nconst _utils1 = require(\"../../web/utils\");\nconst _pipereadable = require(\"../../pipe-readable\");\nconst _gethostname = require(\"../../../shared/lib/get-hostname\");\nconst _redirectstatus = require(\"../../../lib/redirect-status\");\nconst _utils2 = require(\"../../../shared/lib/utils\");\nconst _relativizeurl = require(\"../../../shared/lib/router/utils/relativize-url\");\nconst _addpathprefix = require(\"../../../shared/lib/router/utils/add-path-prefix\");\nconst _pathhasprefix = require(\"../../../shared/lib/router/utils/path-has-prefix\");\nconst _detectdomainlocale = require(\"../../../shared/lib/i18n/detect-domain-locale\");\nconst _normalizelocalepath = require(\"../../../shared/lib/i18n/normalize-locale-path\");\nconst _removepathprefix = require(\"../../../shared/lib/router/utils/remove-path-prefix\");\nconst _nextdata = require(\"../../future/normalizers/request/next-data\");\nconst _basepath = require(\"../../future/normalizers/request/base-path\");\nconst _postponed = require(\"../../future/normalizers/request/postponed\");\nconst _requestmeta = require(\"../../request-meta\");\nconst _preparedestination = require(\"../../../shared/lib/router/utils/prepare-destination\");\nconst _mockrequest = require(\"../mock-request\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst debug = (0, _debug.default)(\"next:router-server:resolve-routes\");\nfunction getResolveRoutes(fsChecker, config, opts, renderServer, renderServerOpts, ensureMiddleware) {\n  const routes = [\n  // _next/data with middleware handling\n  {\n    match: () => ({}),\n    name: \"middleware_next_data\"\n  }, ...(opts.minimalMode ? [] : fsChecker.headers), ...(opts.minimalMode ? [] : fsChecker.redirects),\n  // check middleware (using matchers)\n  {\n    match: () => ({}),\n    name: \"middleware\"\n  }, ...(opts.minimalMode ? [] : fsChecker.rewrites.beforeFiles),\n  // check middleware (using matchers)\n  {\n    match: () => ({}),\n    name: \"before_files_end\"\n  },\n  // we check exact matches on fs before continuing to\n  // after files rewrites\n  {\n    match: () => ({}),\n    name: \"check_fs\"\n  }, ...(opts.minimalMode ? [] : fsChecker.rewrites.afterFiles),\n  // we always do the check: true handling before continuing to\n  // fallback rewrites\n  {\n    check: true,\n    match: () => ({}),\n    name: \"after files check: true\"\n  }, ...(opts.minimalMode ? [] : fsChecker.rewrites.fallback)];\n  async function resolveRoutes({\n    req,\n    res,\n    isUpgradeReq,\n    invokedOutputs\n  }) {\n    var _this;\n    let finished = false;\n    let resHeaders = {};\n    let matchedOutput = null;\n    let parsedUrl = _url.default.parse(req.url || \"\", true);\n    let didRewrite = false;\n    const urlParts = (req.url || \"\").split(\"?\", 1);\n    const urlNoQuery = urlParts[0];\n    // this normalizes repeated slashes in the path e.g. hello//world ->\n    // hello/world or backslashes to forward slashes, this does not\n    // handle trailing slash as that is handled the same as a next.config.js\n    // redirect\n    if (urlNoQuery == null ? void 0 : urlNoQuery.match(/(\\\\|\\/\\/)/)) {\n      parsedUrl = _url.default.parse((0, _utils2.normalizeRepeatedSlashes)(req.url), true);\n      return {\n        parsedUrl,\n        resHeaders,\n        finished: true,\n        statusCode: 308\n      };\n    }\n    // TODO: inherit this from higher up\n    const protocol = ((_this = req == null ? void 0 : req.socket) == null ? void 0 : _this.encrypted) || req.headers[\"x-forwarded-proto\"] === \"https\" ? \"https\" : \"http\";\n    // When there are hostname and port we build an absolute URL\n    const initUrl = config.experimental.trustHostHeader ? `https://${req.headers.host || \"localhost\"}${req.url}` : opts.port ? `${protocol}://${(0, _formathostname.formatHostname)(opts.hostname || \"localhost\")}:${opts.port}${req.url}` : req.url || \"\";\n    (0, _requestmeta.addRequestMeta)(req, \"initURL\", initUrl);\n    (0, _requestmeta.addRequestMeta)(req, \"initQuery\", {\n      ...parsedUrl.query\n    });\n    (0, _requestmeta.addRequestMeta)(req, \"initProtocol\", protocol);\n    if (!isUpgradeReq) {\n      (0, _requestmeta.addRequestMeta)(req, \"clonableBody\", (0, _bodystreams.getCloneableBody)(req));\n    }\n    const maybeAddTrailingSlash = pathname => {\n      if (config.trailingSlash && !config.skipMiddlewareUrlNormalize && !pathname.endsWith(\"/\")) {\n        return `${pathname}/`;\n      }\n      return pathname;\n    };\n    let domainLocale;\n    let defaultLocale;\n    let initialLocaleResult = undefined;\n    if (config.i18n) {\n      var _parsedUrl_pathname;\n      const hadTrailingSlash = (_parsedUrl_pathname = parsedUrl.pathname) == null ? void 0 : _parsedUrl_pathname.endsWith(\"/\");\n      const hadBasePath = (0, _pathhasprefix.pathHasPrefix)(parsedUrl.pathname || \"\", config.basePath);\n      initialLocaleResult = (0, _normalizelocalepath.normalizeLocalePath)((0, _removepathprefix.removePathPrefix)(parsedUrl.pathname || \"/\", config.basePath), config.i18n.locales);\n      domainLocale = (0, _detectdomainlocale.detectDomainLocale)(config.i18n.domains, (0, _gethostname.getHostname)(parsedUrl, req.headers));\n      defaultLocale = (domainLocale == null ? void 0 : domainLocale.defaultLocale) || config.i18n.defaultLocale;\n      parsedUrl.query.__nextDefaultLocale = defaultLocale;\n      parsedUrl.query.__nextLocale = initialLocaleResult.detectedLocale || defaultLocale;\n      // ensure locale is present for resolving routes\n      if (!initialLocaleResult.detectedLocale && !initialLocaleResult.pathname.startsWith(\"/_next/\")) {\n        parsedUrl.pathname = (0, _addpathprefix.addPathPrefix)(initialLocaleResult.pathname === \"/\" ? `/${defaultLocale}` : (0, _addpathprefix.addPathPrefix)(initialLocaleResult.pathname || \"\", `/${defaultLocale}`), hadBasePath ? config.basePath : \"\");\n        if (hadTrailingSlash) {\n          parsedUrl.pathname = maybeAddTrailingSlash(parsedUrl.pathname);\n        }\n      }\n    }\n    const checkLocaleApi = pathname => {\n      if (config.i18n && pathname === urlNoQuery && (initialLocaleResult == null ? void 0 : initialLocaleResult.detectedLocale) && (0, _pathhasprefix.pathHasPrefix)(initialLocaleResult.pathname, \"/api\")) {\n        return true;\n      }\n    };\n    async function checkTrue() {\n      const pathname = parsedUrl.pathname || \"\";\n      if (checkLocaleApi(pathname)) {\n        return;\n      }\n      if (!(invokedOutputs == null ? void 0 : invokedOutputs.has(pathname))) {\n        const output = await fsChecker.getItem(pathname);\n        if (output) {\n          if (config.useFileSystemPublicRoutes || didRewrite || output.type !== \"appFile\" && output.type !== \"pageFile\") {\n            return output;\n          }\n        }\n      }\n      const dynamicRoutes = fsChecker.getDynamicRoutes();\n      let curPathname = parsedUrl.pathname;\n      if (config.basePath) {\n        if (!(0, _pathhasprefix.pathHasPrefix)(curPathname || \"\", config.basePath)) {\n          return;\n        }\n        curPathname = (curPathname == null ? void 0 : curPathname.substring(config.basePath.length)) || \"/\";\n      }\n      const localeResult = fsChecker.handleLocale(curPathname || \"\");\n      for (const route of dynamicRoutes) {\n        // when resolving fallback: false the\n        // render worker may return a no-fallback response\n        // which signals we need to continue resolving.\n        // TODO: optimize this to collect static paths\n        // to use at the routing layer\n        if (invokedOutputs == null ? void 0 : invokedOutputs.has(route.page)) {\n          continue;\n        }\n        const params = route.match(localeResult.pathname);\n        if (params) {\n          const pageOutput = await fsChecker.getItem((0, _addpathprefix.addPathPrefix)(route.page, config.basePath || \"\"));\n          // i18n locales aren't matched for app dir\n          if ((pageOutput == null ? void 0 : pageOutput.type) === \"appFile\" && (initialLocaleResult == null ? void 0 : initialLocaleResult.detectedLocale)) {\n            continue;\n          }\n          if (pageOutput && (curPathname == null ? void 0 : curPathname.startsWith(\"/_next/data\"))) {\n            parsedUrl.query.__nextDataReq = \"1\";\n          }\n          if (config.useFileSystemPublicRoutes || didRewrite) {\n            return pageOutput;\n          }\n        }\n      }\n    }\n    const normalizers = {\n      basePath: new _basepath.BasePathPathnameNormalizer(config.basePath),\n      data: new _nextdata.NextDataPathnameNormalizer(fsChecker.buildId),\n      postponed: new _postponed.PostponedPathnameNormalizer(config.experimental.ppr === true)\n    };\n    async function handleRoute(route) {\n      let curPathname = parsedUrl.pathname || \"/\";\n      if (config.i18n && route.internal) {\n        const hadTrailingSlash = curPathname.endsWith(\"/\");\n        if (config.basePath) {\n          curPathname = (0, _removepathprefix.removePathPrefix)(curPathname, config.basePath);\n        }\n        const hadBasePath = curPathname !== parsedUrl.pathname;\n        const localeResult = (0, _normalizelocalepath.normalizeLocalePath)(curPathname, config.i18n.locales);\n        const isDefaultLocale = localeResult.detectedLocale === defaultLocale;\n        if (isDefaultLocale) {\n          curPathname = localeResult.pathname === \"/\" && hadBasePath ? config.basePath : (0, _addpathprefix.addPathPrefix)(localeResult.pathname, hadBasePath ? config.basePath : \"\");\n        } else if (hadBasePath) {\n          curPathname = curPathname === \"/\" ? config.basePath : (0, _addpathprefix.addPathPrefix)(curPathname, config.basePath);\n        }\n        if ((isDefaultLocale || hadBasePath) && hadTrailingSlash) {\n          curPathname = maybeAddTrailingSlash(curPathname);\n        }\n      }\n      let params = route.match(curPathname);\n      if ((route.has || route.missing) && params) {\n        const hasParams = (0, _preparedestination.matchHas)(req, parsedUrl.query, route.has, route.missing);\n        if (hasParams) {\n          Object.assign(params, hasParams);\n        } else {\n          params = false;\n        }\n      }\n      if (params) {\n        if (fsChecker.interceptionRoutes && route.name === \"before_files_end\") {\n          for (const interceptionRoute of fsChecker.interceptionRoutes) {\n            const result = await handleRoute(interceptionRoute);\n            if (result) {\n              return result;\n            }\n          }\n        }\n        if (route.name === \"middleware_next_data\" && parsedUrl.pathname) {\n          var _fsChecker_getMiddlewareMatchers;\n          if ((_fsChecker_getMiddlewareMatchers = fsChecker.getMiddlewareMatchers()) == null ? void 0 : _fsChecker_getMiddlewareMatchers.length) {\n            let normalized = parsedUrl.pathname;\n            // Remove the base path if it exists.\n            const hadBasePath = normalizers.basePath.match(parsedUrl.pathname);\n            if (hadBasePath) {\n              normalized = normalizers.basePath.normalize(normalized, true);\n            }\n            let updated = false;\n            if (normalizers.data.match(normalized)) {\n              updated = true;\n              parsedUrl.query.__nextDataReq = \"1\";\n              normalized = normalizers.data.normalize(normalized, true);\n            } else if (normalizers.postponed.match(normalized)) {\n              updated = true;\n              normalized = normalizers.postponed.normalize(normalized, true);\n            }\n            // If we updated the pathname, and it had a base path, re-add the\n            // base path.\n            if (updated) {\n              if (hadBasePath) {\n                normalized = _nodepath.default.posix.join(config.basePath, normalized);\n              }\n              // Re-add the trailing slash (if required).\n              normalized = maybeAddTrailingSlash(normalized);\n              parsedUrl.pathname = normalized;\n            }\n          }\n        }\n        if (route.name === \"check_fs\") {\n          const pathname = parsedUrl.pathname || \"\";\n          if ((invokedOutputs == null ? void 0 : invokedOutputs.has(pathname)) || checkLocaleApi(pathname)) {\n            return;\n          }\n          const output = await fsChecker.getItem(pathname);\n          if (output && !(config.i18n && (initialLocaleResult == null ? void 0 : initialLocaleResult.detectedLocale) && (0, _pathhasprefix.pathHasPrefix)(pathname, \"/api\"))) {\n            if (config.useFileSystemPublicRoutes || didRewrite || output.type !== \"appFile\" && output.type !== \"pageFile\") {\n              matchedOutput = output;\n              if (output.locale) {\n                parsedUrl.query.__nextLocale = output.locale;\n              }\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true,\n                matchedOutput\n              };\n            }\n          }\n        }\n        if (!opts.minimalMode && route.name === \"middleware\") {\n          const match = fsChecker.getMiddlewareMatchers();\n          if (\n          // @ts-expect-error BaseNextRequest stuff\n          (match == null ? void 0 : match(parsedUrl.pathname, req, parsedUrl.query)) && (!ensureMiddleware || (await (ensureMiddleware == null ? void 0 : ensureMiddleware().then(() => true).catch(() => false))))) {\n            const serverResult = await (renderServer == null ? void 0 : renderServer.initialize(renderServerOpts));\n            if (!serverResult) {\n              throw new Error(`Failed to initialize render server \"middleware\"`);\n            }\n            const invokeHeaders = {\n              \"x-invoke-path\": \"\",\n              \"x-invoke-query\": \"\",\n              \"x-invoke-output\": \"\",\n              \"x-middleware-invoke\": \"1\"\n            };\n            Object.assign(req.headers, invokeHeaders);\n            debug(\"invoking middleware\", req.url, invokeHeaders);\n            let middlewareRes = undefined;\n            let bodyStream = undefined;\n            try {\n              let readableController;\n              const {\n                res: mockedRes\n              } = await (0, _mockrequest.createRequestResponseMocks)({\n                url: req.url || \"/\",\n                method: req.method || \"GET\",\n                headers: (0, _utils.filterReqHeaders)(invokeHeaders, _utils.ipcForbiddenHeaders),\n                resWriter(chunk) {\n                  readableController.enqueue(Buffer.from(chunk));\n                  return true;\n                }\n              });\n              mockedRes.on(\"close\", () => {\n                readableController.close();\n              });\n              try {\n                await serverResult.requestHandler(req, res, parsedUrl);\n              } catch (err) {\n                if (!(\"result\" in err) || !(\"response\" in err.result)) {\n                  throw err;\n                }\n                middlewareRes = err.result.response;\n                res.statusCode = middlewareRes.status;\n                if (middlewareRes.body) {\n                  bodyStream = middlewareRes.body;\n                } else if (middlewareRes.status) {\n                  bodyStream = new ReadableStream({\n                    start(controller) {\n                      controller.enqueue(\"\");\n                      controller.close();\n                    }\n                  });\n                }\n              }\n            } catch (e) {\n              // If the client aborts before we can receive a response object\n              // (when the headers are flushed), then we can early exit without\n              // further processing.\n              if ((0, _pipereadable.isAbortError)(e)) {\n                return {\n                  parsedUrl,\n                  resHeaders,\n                  finished: true\n                };\n              }\n              throw e;\n            }\n            if (res.closed || res.finished || !middlewareRes) {\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true\n              };\n            }\n            const middlewareHeaders = (0, _utils1.toNodeOutgoingHttpHeaders)(middlewareRes.headers);\n            debug(\"middleware res\", middlewareRes.status, middlewareHeaders);\n            if (middlewareHeaders[\"x-middleware-override-headers\"]) {\n              const overriddenHeaders = new Set();\n              let overrideHeaders = middlewareHeaders[\"x-middleware-override-headers\"];\n              if (typeof overrideHeaders === \"string\") {\n                overrideHeaders = overrideHeaders.split(\",\");\n              }\n              for (const key of overrideHeaders) {\n                overriddenHeaders.add(key.trim());\n              }\n              delete middlewareHeaders[\"x-middleware-override-headers\"];\n              // Delete headers.\n              for (const key of Object.keys(req.headers)) {\n                if (!overriddenHeaders.has(key)) {\n                  delete req.headers[key];\n                }\n              }\n              // Update or add headers.\n              for (const key of overriddenHeaders.keys()) {\n                const valueKey = \"x-middleware-request-\" + key;\n                const newValue = middlewareHeaders[valueKey];\n                const oldValue = req.headers[key];\n                if (oldValue !== newValue) {\n                  req.headers[key] = newValue === null ? undefined : newValue;\n                }\n                delete middlewareHeaders[valueKey];\n              }\n            }\n            if (!middlewareHeaders[\"x-middleware-rewrite\"] && !middlewareHeaders[\"x-middleware-next\"] && !middlewareHeaders[\"location\"]) {\n              middlewareHeaders[\"x-middleware-refresh\"] = \"1\";\n            }\n            delete middlewareHeaders[\"x-middleware-next\"];\n            for (const [key, value] of Object.entries({\n              ...(0, _utils.filterReqHeaders)(middlewareHeaders, _utils.ipcForbiddenHeaders)\n            })) {\n              if ([\"content-length\", \"x-middleware-rewrite\", \"x-middleware-redirect\", \"x-middleware-refresh\", \"x-middleware-invoke\", \"x-invoke-path\", \"x-invoke-query\"].includes(key)) {\n                continue;\n              }\n              if (value) {\n                resHeaders[key] = value;\n                req.headers[key] = value;\n              }\n            }\n            if (middlewareHeaders[\"x-middleware-rewrite\"]) {\n              const value = middlewareHeaders[\"x-middleware-rewrite\"];\n              const rel = (0, _relativizeurl.relativizeURL)(value, initUrl);\n              resHeaders[\"x-middleware-rewrite\"] = rel;\n              const query = parsedUrl.query;\n              parsedUrl = _url.default.parse(rel, true);\n              if (parsedUrl.protocol) {\n                return {\n                  parsedUrl,\n                  resHeaders,\n                  finished: true\n                };\n              }\n              // keep internal query state\n              for (const key of Object.keys(query)) {\n                if (key.startsWith(\"_next\") || key.startsWith(\"__next\")) {\n                  parsedUrl.query[key] = query[key];\n                }\n              }\n              if (config.i18n) {\n                const curLocaleResult = (0, _normalizelocalepath.normalizeLocalePath)(parsedUrl.pathname || \"\", config.i18n.locales);\n                if (curLocaleResult.detectedLocale) {\n                  parsedUrl.query.__nextLocale = curLocaleResult.detectedLocale;\n                }\n              }\n            }\n            if (middlewareHeaders[\"location\"]) {\n              const value = middlewareHeaders[\"location\"];\n              const rel = (0, _relativizeurl.relativizeURL)(value, initUrl);\n              resHeaders[\"location\"] = rel;\n              parsedUrl = _url.default.parse(rel, true);\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true,\n                statusCode: middlewareRes.status\n              };\n            }\n            if (middlewareHeaders[\"x-middleware-refresh\"]) {\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true,\n                bodyStream,\n                statusCode: middlewareRes.status\n              };\n            }\n          }\n        }\n        // handle redirect\n        if ((\"statusCode\" in route || \"permanent\" in route) && route.destination) {\n          const {\n            parsedDestination\n          } = (0, _preparedestination.prepareDestination)({\n            appendParamsToQuery: false,\n            destination: route.destination,\n            params: params,\n            query: parsedUrl.query\n          });\n          const {\n            query\n          } = parsedDestination;\n          delete parsedDestination.query;\n          parsedDestination.search = (0, _serverrouteutils.stringifyQuery)(req, query);\n          parsedDestination.pathname = (0, _utils2.normalizeRepeatedSlashes)(parsedDestination.pathname);\n          return {\n            finished: true,\n            // @ts-expect-error custom ParsedUrl\n            parsedUrl: parsedDestination,\n            statusCode: (0, _redirectstatus.getRedirectStatus)(route)\n          };\n        }\n        // handle headers\n        if (route.headers) {\n          const hasParams = Object.keys(params).length > 0;\n          for (const header of route.headers) {\n            let {\n              key,\n              value\n            } = header;\n            if (hasParams) {\n              key = (0, _preparedestination.compileNonPath)(key, params);\n              value = (0, _preparedestination.compileNonPath)(value, params);\n            }\n            if (key.toLowerCase() === \"set-cookie\") {\n              if (!Array.isArray(resHeaders[key])) {\n                const val = resHeaders[key];\n                resHeaders[key] = typeof val === \"string\" ? [val] : [];\n              }\n              resHeaders[key].push(value);\n            } else {\n              resHeaders[key] = value;\n            }\n          }\n        }\n        // handle rewrite\n        if (route.destination) {\n          const {\n            parsedDestination\n          } = (0, _preparedestination.prepareDestination)({\n            appendParamsToQuery: true,\n            destination: route.destination,\n            params: params,\n            query: parsedUrl.query\n          });\n          if (parsedDestination.protocol) {\n            return {\n              // @ts-expect-error custom ParsedUrl\n              parsedUrl: parsedDestination,\n              finished: true\n            };\n          }\n          if (config.i18n) {\n            const curLocaleResult = (0, _normalizelocalepath.normalizeLocalePath)((0, _removepathprefix.removePathPrefix)(parsedDestination.pathname, config.basePath), config.i18n.locales);\n            if (curLocaleResult.detectedLocale) {\n              parsedUrl.query.__nextLocale = curLocaleResult.detectedLocale;\n            }\n          }\n          didRewrite = true;\n          parsedUrl.pathname = parsedDestination.pathname;\n          Object.assign(parsedUrl.query, parsedDestination.query);\n        }\n        // handle check: true\n        if (route.check) {\n          const output = await checkTrue();\n          if (output) {\n            return {\n              parsedUrl,\n              resHeaders,\n              finished: true,\n              matchedOutput: output\n            };\n          }\n        }\n      }\n    }\n    for (const route of routes) {\n      const result = await handleRoute(route);\n      if (result) {\n        return result;\n      }\n    }\n    return {\n      finished,\n      parsedUrl,\n      resHeaders,\n      matchedOutput\n    };\n  }\n  return resolveRoutes;\n}","map":{"version":3,"names":["getResolveRoutes","debug","_debug","default","fsChecker","config","opts","renderServer","renderServerOpts","ensureMiddleware","routes","match","name","minimalMode","headers","redirects","rewrites","beforeFiles","afterFiles","check","fallback","resolveRoutes","req","res","isUpgradeReq","invokedOutputs","_this","finished","resHeaders","matchedOutput","parsedUrl","_url","parse","url","didRewrite","urlParts","split","urlNoQuery","_utils2","normalizeRepeatedSlashes","statusCode","protocol","socket","encrypted","initUrl","experimental","trustHostHeader","host","port","_formathostname","formatHostname","hostname","_requestmeta","addRequestMeta","query","_bodystreams","getCloneableBody","maybeAddTrailingSlash","pathname","trailingSlash","skipMiddlewareUrlNormalize","endsWith","domainLocale","defaultLocale","initialLocaleResult","undefined","i18n","_parsedUrl_pathname","hadTrailingSlash","hadBasePath","_pathhasprefix","pathHasPrefix","basePath","_normalizelocalepath","normalizeLocalePath","_removepathprefix","removePathPrefix","locales","_detectdomainlocale","detectDomainLocale","domains","_gethostname","getHostname","__nextDefaultLocale","__nextLocale","detectedLocale","startsWith","_addpathprefix","addPathPrefix","checkLocaleApi","checkTrue","has","output","getItem","useFileSystemPublicRoutes","type","dynamicRoutes","getDynamicRoutes","curPathname","substring","length","localeResult","handleLocale","route","page","params","pageOutput","__nextDataReq","normalizers","_basepath","BasePathPathnameNormalizer","data","_nextdata","NextDataPathnameNormalizer","buildId","postponed","_postponed","PostponedPathnameNormalizer","ppr","handleRoute","internal","isDefaultLocale","missing","hasParams","_preparedestination","matchHas","Object","assign","interceptionRoutes","interceptionRoute","result","_fsChecker_getMiddlewareMatchers","getMiddlewareMatchers","normalized","normalize","updated","_nodepath","posix","join","locale","then","catch","serverResult","initialize","Error","invokeHeaders","middlewareRes","bodyStream","readableController","mockedRes","_mockrequest","createRequestResponseMocks","method","_utils","filterReqHeaders","ipcForbiddenHeaders","resWriter","chunk","enqueue","Buffer","from","on","close","requestHandler","err","response","status","body","ReadableStream","start","controller","e","_pipereadable","isAbortError","closed","middlewareHeaders","_utils1","toNodeOutgoingHttpHeaders","overriddenHeaders","Set","overrideHeaders","key","add","trim","keys","valueKey","newValue","oldValue","value","entries","includes","rel","_relativizeurl","relativizeURL","curLocaleResult","destination","parsedDestination","prepareDestination","appendParamsToQuery","search","_serverrouteutils","stringifyQuery","_redirectstatus","getRedirectStatus","header","compileNonPath","toLowerCase","Array","isArray","val","push"],"sources":["../../../../src/server/lib/router-utils/resolve-routes.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}