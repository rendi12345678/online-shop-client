{"ast":null,"code":"// This module provides intellisense for all components that has the `\"use client\"` directive.\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\nconst _constant = require(\"../constant\");\nconst _utils = require(\"../utils\");\nconst clientBoundary = {\n  getSemanticDiagnosticsForExportVariableStatement(source, node) {\n    const ts = (0, _utils.getTs)();\n    const diagnostics = [];\n    if (ts.isVariableDeclarationList(node.declarationList)) {\n      for (const declaration of node.declarationList.declarations) {\n        const initializer = declaration.initializer;\n        if (initializer && ts.isArrowFunction(initializer)) {\n          diagnostics.push(...clientBoundary.getSemanticDiagnosticsForFunctionExport(source, initializer));\n        }\n      }\n    }\n    return diagnostics;\n  },\n  getSemanticDiagnosticsForFunctionExport(source, node) {\n    var _node_parameters_, _node_parameters;\n    const ts = (0, _utils.getTs)();\n    const typeChecker = (0, _utils.getTypeChecker)();\n    if (!typeChecker) return [];\n    const diagnostics = [];\n    const isErrorFile = /[\\\\/]error\\.tsx?$/.test(source.fileName);\n    const isGlobalErrorFile = /[\\\\/]global-error\\.tsx?$/.test(source.fileName);\n    const props = (_node_parameters = node.parameters) == null ? void 0 : (_node_parameters_ = _node_parameters[0]) == null ? void 0 : _node_parameters_.name;\n    if (props && ts.isObjectBindingPattern(props)) {\n      for (const prop of props.elements) {\n        var _type_symbol_getDeclarations, _type_symbol;\n        const type = typeChecker.getTypeAtLocation(prop);\n        const typeDeclarationNode = (_type_symbol = type.symbol) == null ? void 0 : (_type_symbol_getDeclarations = _type_symbol.getDeclarations()) == null ? void 0 : _type_symbol_getDeclarations[0];\n        const propName = (prop.propertyName || prop.name).getText();\n        if (typeDeclarationNode) {\n          if (\n          // Show warning for not serializable props.\n          ts.isFunctionOrConstructorTypeNode(typeDeclarationNode) || ts.isClassDeclaration(typeDeclarationNode)) {\n            // There's a special case for the error file that the `reset` prop is allowed\n            // to be a function:\n            // https://github.com/vercel/next.js/issues/46573\n            if (!(isErrorFile || isGlobalErrorFile) || propName !== \"reset\") {\n              diagnostics.push({\n                file: source,\n                category: ts.DiagnosticCategory.Warning,\n                code: _constant.NEXT_TS_ERRORS.INVALID_CLIENT_ENTRY_PROP,\n                messageText: `Props must be serializable for components in the \"use client\" entry file, \"${propName}\" is invalid.`,\n                start: prop.getStart(),\n                length: prop.getWidth()\n              });\n            }\n          }\n        }\n      }\n    }\n    return diagnostics;\n  }\n};\nconst _default = clientBoundary;","map":{"version":3,"names":["_default","clientBoundary","getSemanticDiagnosticsForExportVariableStatement","source","node","ts","_utils","getTs","diagnostics","isVariableDeclarationList","declarationList","declaration","declarations","initializer","isArrowFunction","push","getSemanticDiagnosticsForFunctionExport","_node_parameters_","_node_parameters","typeChecker","getTypeChecker","isErrorFile","test","fileName","isGlobalErrorFile","props","parameters","name","isObjectBindingPattern","prop","elements","_type_symbol_getDeclarations","_type_symbol","type","getTypeAtLocation","typeDeclarationNode","symbol","getDeclarations","propName","propertyName","getText","isFunctionOrConstructorTypeNode","isClassDeclaration","file","category","DiagnosticCategory","Warning","code","_constant","NEXT_TS_ERRORS","INVALID_CLIENT_ENTRY_PROP","messageText","start","getStart","length","getWidth"],"sources":["../../../../src/server/typescript/rules/client-boundary.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;+BAgFA;;;WAAAA,QAAA;;;0BA9E+B;uBACO;AAGtC,MAAMC,cAAA,GAAiB;EACrBC,iDACEC,MAA2B,EAC3BC,IAAgC;IAEhC,MAAMC,EAAA,GAAK,IAAAC,MAAA,CAAAC,KAAK;IAEhB,MAAMC,WAAA,GAAqC,EAAE;IAE7C,IAAIH,EAAA,CAAGI,yBAAyB,CAACL,IAAA,CAAKM,eAAe,GAAG;MACtD,KAAK,MAAMC,WAAA,IAAeP,IAAA,CAAKM,eAAe,CAACE,YAAY,EAAE;QAC3D,MAAMC,WAAA,GAAcF,WAAA,CAAYE,WAAW;QAC3C,IAAIA,WAAA,IAAeR,EAAA,CAAGS,eAAe,CAACD,WAAA,GAAc;UAClDL,WAAA,CAAYO,IAAI,IACXd,cAAA,CAAee,uCAAuC,CACvDb,MAAA,EACAU,WAAA;QAGN;MACF;IACF;IAEA,OAAOL,WAAA;EACT;EAEAQ,wCACEb,MAA2B,EAC3BC,IAA2D;QAW7Ca,iBAAA,EAAAC,gBAAA;IATd,MAAMb,EAAA,GAAK,IAAAC,MAAA,CAAAC,KAAK;IAChB,MAAMY,WAAA,GAAc,IAAAb,MAAA,CAAAc,cAAc;IAClC,IAAI,CAACD,WAAA,EAAa,OAAO,EAAE;IAE3B,MAAMX,WAAA,GAAqC,EAAE;IAE7C,MAAMa,WAAA,GAAc,oBAAoBC,IAAI,CAACnB,MAAA,CAAOoB,QAAQ;IAC5D,MAAMC,iBAAA,GAAoB,2BAA2BF,IAAI,CAACnB,MAAA,CAAOoB,QAAQ;IAEzE,MAAME,KAAA,IAAQP,gBAAA,GAAAd,IAAA,CAAKsB,UAAU,sBAAfT,iBAAA,GAAAC,gBAAiB,CAAC,EAAE,qBAApBD,iBAAA,CAAsBU,IAAI;IACxC,IAAIF,KAAA,IAASpB,EAAA,CAAGuB,sBAAsB,CAACH,KAAA,GAAQ;MAC7C,KAAK,MAAMI,IAAA,IAAQJ,KAAC,CAAwCK,QAAQ,EAAE;YAExCC,4BAAA,EAAAC,YAAA;QAD5B,MAAMC,IAAA,GAAOd,WAAA,CAAYe,iBAAiB,CAACL,IAAA;QAC3C,MAAMM,mBAAA,IAAsBH,YAAA,GAAAC,IAAA,CAAKG,MAAM,sBAAXL,4BAAA,GAAAC,YAAA,CAAaK,eAAe,uBAA5BN,4BAAgC,CAAC,EAAE;QAC/D,MAAMO,QAAA,GAAW,CAACT,IAAA,CAAKU,YAAY,IAAIV,IAAA,CAAKF,IAAI,EAAEa,OAAO;QAEzD,IAAIL,mBAAA,EAAqB;UACvB;UACE;UACA9B,EAAA,CAAGoC,+BAA+B,CAACN,mBAAA,KACnC9B,EAAA,CAAGqC,kBAAkB,CAACP,mBAAA,GACtB;YACA;YACA;YACA;YACA,IAAI,EAAEd,WAAA,IAAeG,iBAAgB,KAAMc,QAAA,KAAa,SAAS;cAC/D9B,WAAA,CAAYO,IAAI,CAAC;gBACf4B,IAAA,EAAMxC,MAAA;gBACNyC,QAAA,EAAUvC,EAAA,CAAGwC,kBAAkB,CAACC,OAAO;gBACvCC,IAAA,EAAMC,SAAA,CAAAC,cAAc,CAACC,yBAAyB;gBAC9CC,WAAA,EAAc,8EAA6Eb,QAAS,eAAc;gBAClHc,KAAA,EAAOvB,IAAA,CAAKwB,QAAQ;gBACpBC,MAAA,EAAQzB,IAAA,CAAK0B,QAAQ;cACvB;YACF;UACF;QACF;MACF;IACF;IAEA,OAAO/C,WAAA;EACT;AACF;MAEAR,QAAA,GAAeC,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}